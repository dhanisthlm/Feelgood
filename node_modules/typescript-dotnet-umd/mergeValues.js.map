{"version":3,"sources":["mergeValues.js","mergeValues.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","mergeValues","target","defaults","result","key","hasOwnProperty","Object","defineProperty","value"],"mappings":";;;;CAIA,SAAWA,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QAAoBG,UAANF,IAAiBF,OAAOC,QAAUC,OAElD,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,WAAYN,IAEpC,SAAUI,EAASF,GAClB,YCDJ,SAAAM,GAECC,EACAC,GAEA,GAAMC,GAAaF,KACnB,KAAI,GAAMG,KAAOF,GAEbA,EAASG,eAAeD,KAASD,EAAOE,eAAeD,KAEzDD,EAAOC,GAAaF,EAAUE,GAGhC,OAAOD,GAbRG,OAAAC,eAAAb,EAAA,cAAAc,OAAA,IDYId,EAAAA,WAAkBM","file":"mergeValues.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    function mergeValues(target, defaults) {\n        var result = target || {};\n        for (var key in defaults) {\n            if (defaults.hasOwnProperty(key) && !result.hasOwnProperty(key)) {\n                result[key] = defaults[key];\n            }\n        }\n        return result;\n    }\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = mergeValues;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n/**\r\n * Takes a target object and ensures values exist.\r\n * @param target\r\n * @param defaults\r\n * @returns {any}\r\n */\r\nexport default\r\nfunction mergeValues<T extends Object, U extends Object>(\r\n\ttarget:T,\r\n\tdefaults:U):T & U\r\n{\r\n\tconst result:any = target || {};\r\n\tfor(const key in defaults)\r\n\t{\r\n\t\tif(defaults.hasOwnProperty(key) && !result.hasOwnProperty(key))\r\n\t\t{\r\n\t\t\tresult[key] = (<any>defaults)[key];\r\n\t\t}\r\n\t}\r\n\treturn result;\r\n}\r\n\r\n"]}