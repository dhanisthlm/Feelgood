{"version":3,"sources":["System/Time/ClockTime.js","System/Time/ClockTime.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","pluralize","value","label","Math","abs","TimeQuantity_1","extends_1","__extends","ClockTime","_super","args","_i","arguments","length","call","this","millisecondsFromTime","_","ms","getTotalMilliseconds","msi","floor","tick","days","hour","minute","second","millisecond","Object","freeze","from","hours","minutes","seconds","milliseconds","prototype","toString","a","push","splice","join","replace","TimeQuantity","defineProperty"],"mappings":";;;;;CAKA,SAAWA,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QAAoBG,UAANF,IAAiBF,OAAOC,QAAUC,OAElD,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,UAAW,iBAAkB,iBAAkBN,IAEvE,SAAUI,EAASF,GAClB,YCoGJ,SAAAM,GAAmBC,EAAcC,GAKhC,MAHqB,KAAlBC,KAAKC,IAAIH,KACXC,GAAS,KAEHA,EAhHR,GAAAG,GAAAT,EAA2B,kBAG3BU,EAAAV,EAA4B,iBACtBW,EAAYD,EAAAA,WAGlBE,EAAA,SAAAC,GAYC,QAAAD,KDJW,ICIC,GAAAE,MAAAC,EAAA,EAAAA,EAAAC,UAAAC,OAAAF,IAAAD,EAAAC,EAAA,GAAAC,UAAAD,EAEXF,GAAAK,KAAAC,KACCL,EAAKG,OAAO,EACTL,EAAUQ,qBACZN,EAAK,IAAM,EACXA,EAAK,IAAM,EACXA,EAAKG,OAAO,GAAKH,EAAK,IAAM,EAC5BA,EAAKG,OAAO,GAAKH,EAAK,IAAM,GAEzBA,EAAKG,OAAO,GAAKH,EAAK,IAAM,EAGjC,IAAMO,GAAIF,KACNG,EAAKf,KAAKC,IAAIa,EAAEE,wBAChBC,EAAMjB,KAAKkB,MAAMH,EAErBD,GAAEK,KAAkB,KAAVJ,EAAKE,GAEfH,EAAEM,KAAQH,EAAI,MAAwB,EACtCA,GAAc,MAAPH,EAAEM,KAETN,EAAEO,KAAQJ,EAAI,KAAyB,EACvCA,GAAc,KAAPH,EAAEO,KAETP,EAAEQ,OAAUL,EAAI,IAA2B,EAC3CA,GAAgB,IAATH,EAAEQ,OAETR,EAAES,OAAUN,EAAI,IAA2B,EAC3CA,GAAgB,IAATH,EAAES,OAETT,EAAEU,YAAcP,EAEhBQ,OAAOC,OAAOZ,GAmDhB,MAhG+BV,GAAAC,EAAAC,GAkDvBD,EAAAsB,KAAP,SAAYC,EAAcC,EAAgBC,EAAoBC,GAE7D,MAFyC,UAAAD,IAAAA,EAAA,GAAoB,SAAAC,IAAAA,EAAA,GAEtD,GAAI1B,GAAUuB,EAAOC,EAASC,EAASC,IAGxC1B,EAAAQ,qBAAP,SACCe,EACAC,EACAC,EACAC,GADA,SAAAD,IAAAA,EAAA,GACA,SAAAC,IAAAA,EAAA,EAEA,IAAIjC,GAAQ8B,CAOZ,OANA9B,IAAS,GACTA,GAAS+B,EACT/B,GAAS,GACTA,GAASgC,EACThC,GAAS,IACTA,GAASiC,GAIV1B,EAAA2B,UAAAC,SAAA,WAKC,GAAInB,GAAIF,KAAMsB,IAiBd,OAfGpB,GAAEM,MACJc,EAAEC,KAAKtC,EAAUiB,EAAEM,KAAM,QAEvBN,EAAEO,MACJa,EAAEC,KAAKtC,EAAUiB,EAAEO,KAAM,SAEvBP,EAAEQ,QACJY,EAAEC,KAAKtC,EAAUiB,EAAEQ,OAAQ,WAEzBR,EAAES,QACJW,EAAEC,KAAKtC,EAAUiB,EAAES,OAAQ,WAEzBW,EAAExB,OAAO,GACXwB,EAAEE,OAAOF,EAAExB,OAAS,EAAG,EAAG,OAEpBwB,EAAEG,KAAK,MAAMC,QAAQ,UAAW,UAGzCjC,GAhG+BH,EAAAqC,aAAlBhD,GAAAc,UAASA,EA4GtBoB,OAAAe,eAAAjD,EAAA,cAAAO,OAAA,IDvCIP,EAAAA,WCuCWc","file":"System/Time/ClockTime.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Originally based upon .NET source but with many additions and improvements.\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", \"./TimeQuantity\", \"../../extends\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    var TimeQuantity_1 = require(\"./TimeQuantity\");\n    var extends_1 = require(\"../../extends\");\n    var __extends = extends_1.default;\n    var ClockTime = (function (_super) {\n        __extends(ClockTime, _super);\n        function ClockTime() {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i - 0] = arguments[_i];\n            }\n            _super.call(this, args.length > 1\n                ? ClockTime.millisecondsFromTime(args[0] || 0, args[1] || 0, args.length > 2 && args[2] || 0, args.length > 3 && args[3] || 0)\n                : (args.length > 0 && args[0] || 0));\n            var _ = this;\n            var ms = Math.abs(_.getTotalMilliseconds());\n            var msi = Math.floor(ms);\n            _.tick = (ms - msi) * 10000;\n            _.days = (msi / 86400000) | 0;\n            msi -= _.days * 86400000;\n            _.hour = (msi / 3600000) | 0;\n            msi -= _.hour * 3600000;\n            _.minute = (msi / 60000) | 0;\n            msi -= _.minute * 60000;\n            _.second = (msi / 1000) | 0;\n            msi -= _.second * 1000;\n            _.millisecond = msi;\n            Object.freeze(_);\n        }\n        ClockTime.from = function (hours, minutes, seconds, milliseconds) {\n            if (seconds === void 0) { seconds = 0; }\n            if (milliseconds === void 0) { milliseconds = 0; }\n            return new ClockTime(hours, minutes, seconds, milliseconds);\n        };\n        ClockTime.millisecondsFromTime = function (hours, minutes, seconds, milliseconds) {\n            if (seconds === void 0) { seconds = 0; }\n            if (milliseconds === void 0) { milliseconds = 0; }\n            var value = hours;\n            value *= 60;\n            value += minutes;\n            value *= 60;\n            value += seconds;\n            value *= 1000;\n            value += milliseconds;\n            return value;\n        };\n        ClockTime.prototype.toString = function () {\n            var _ = this, a = [];\n            if (_.days)\n                a.push(pluralize(_.days, \"day\"));\n            if (_.hour)\n                a.push(pluralize(_.hour, \"hour\"));\n            if (_.minute)\n                a.push(pluralize(_.minute, \"minute\"));\n            if (_.second)\n                a.push(pluralize(_.second, \"second\"));\n            if (a.length > 1)\n                a.splice(a.length - 1, 0, \"and\");\n            return a.join(\", \").replace(\", and, \", \" and \");\n        };\n        return ClockTime;\n    }(TimeQuantity_1.TimeQuantity));\n    exports.ClockTime = ClockTime;\n    function pluralize(value, label) {\n        if (Math.abs(value) !== 1)\n            label += \"s\";\n        return label;\n    }\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = ClockTime;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Originally based upon .NET source but with many additions and improvements.\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {TimeQuantity} from \"./TimeQuantity\";\r\nimport {IClockTime} from \"./ITimeStamp\";\r\nimport {Minutes, Seconds, Milliseconds, Ticks} from \"./HowMany\";\r\nimport __extendsImport from \"../../extends\";\r\nconst __extends = __extendsImport;\r\n\r\n\r\nexport class ClockTime extends TimeQuantity implements IClockTime\r\n{\r\n\r\n\tdays:number;\r\n\thour:number;\r\n\tminute:number;\r\n\tsecond:number;\r\n\tmillisecond:number;\r\n\ttick:number;\r\n\r\n\tconstructor(milliseconds:number);\r\n\tconstructor(hours:number, minutes:number, seconds?:number, milliseconds?:number);\r\n\tconstructor(...args:number[])\r\n\t{\r\n\t\tsuper(\r\n\t\t\targs.length>1\r\n\t\t\t\t? ClockTime.millisecondsFromTime(\r\n\t\t\t\targs[0] || 0,\r\n\t\t\t\targs[1] || 0,\r\n\t\t\t\targs.length>2 && args[2] || 0,\r\n\t\t\t\targs.length>3 && args[3] || 0\r\n\t\t\t)\r\n\t\t\t\t: (args.length>0 && args[0] || 0)\r\n\t\t);\r\n\r\n\t\tconst _ = this;\r\n\t\tvar ms = Math.abs(_.getTotalMilliseconds());\r\n\t\tvar msi = Math.floor(ms);\r\n\r\n\t\t_.tick = (ms - msi)*Ticks.Per.Millisecond;\r\n\r\n\t\t_.days = (msi/Milliseconds.Per.Day) | 0;\r\n\t\tmsi -= _.days*Milliseconds.Per.Day;\r\n\r\n\t\t_.hour = (msi/Milliseconds.Per.Hour) | 0;\r\n\t\tmsi -= _.hour*Milliseconds.Per.Hour;\r\n\r\n\t\t_.minute = (msi/Milliseconds.Per.Minute) | 0;\r\n\t\tmsi -= _.minute*Milliseconds.Per.Minute;\r\n\r\n\t\t_.second = (msi/Milliseconds.Per.Second) | 0;\r\n\t\tmsi -= _.second*Milliseconds.Per.Second;\r\n\r\n\t\t_.millisecond = msi;\r\n\r\n\t\tObject.freeze(_);\r\n\t}\r\n\r\n\r\n\t// Static version for relative consistency.  Constructor does allow this format.\r\n\tstatic from(hours:number, minutes:number, seconds:number = 0, milliseconds:number = 0):ClockTime\r\n\t{\r\n\t\treturn new ClockTime(hours, minutes, seconds, milliseconds);\r\n\t}\r\n\r\n\tstatic millisecondsFromTime(\r\n\t\thours:number,\r\n\t\tminutes:number,\r\n\t\tseconds:number = 0,\r\n\t\tmilliseconds:number = 0):number\r\n\t{\r\n\t\tvar value = hours;\r\n\t\tvalue *= Minutes.Per.Hour;\r\n\t\tvalue += minutes;\r\n\t\tvalue *= Seconds.Per.Minute;\r\n\t\tvalue += seconds;\r\n\t\tvalue *= Milliseconds.Per.Second;\r\n\t\tvalue += milliseconds;\r\n\t\treturn value;\r\n\t}\r\n\r\n\ttoString(/*format?:string, formatProvider?:IFormatProvider*/):string\r\n\t{\r\n\t\t/* INSERT CUSTOM FORMATTING CODE HERE */\r\n\r\n\r\n\t\tvar _ = this, a:string[] = [];\r\n\r\n\t\tif(_.days)\r\n\t\t\ta.push(pluralize(_.days, \"day\"));\r\n\r\n\t\tif(_.hour)\r\n\t\t\ta.push(pluralize(_.hour, \"hour\"));\r\n\r\n\t\tif(_.minute)\r\n\t\t\ta.push(pluralize(_.minute, \"minute\"));\r\n\r\n\t\tif(_.second)\r\n\t\t\ta.push(pluralize(_.second, \"second\"));\r\n\r\n\t\tif(a.length>1)\r\n\t\t\ta.splice(a.length - 1, 0, \"and\");\r\n\r\n\t\treturn a.join(\", \").replace(\", and, \", \" and \");\r\n\t}\r\n\r\n}\r\n\r\n\r\n// Temporary until the full TimeSpanFormat is available.\r\nfunction pluralize(value:number, label:string):string\r\n{\r\n\tif(Math.abs(value)!==1)\r\n\t\tlabel += \"s\";\r\n\r\n\treturn label;\r\n}\r\n\r\nexport default ClockTime;"]}