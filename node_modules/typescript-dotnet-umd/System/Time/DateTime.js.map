{"version":3,"sources":["System/Time/DateTime.js","System/Time/DateTime.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","TimeSpan_1","ClockTime_1","TimeStamp_1","DateTime","value","kind","Date","_","this","_kind","_value","toJsDate","_setJsDate","prototype","getTime","_time","Object","defineProperty","get","enumerable","configurable","getFullYear","getMonth","year","month","calendarMonth","day","getDate","getDay","addMilliseconds","ms","addSeconds","seconds","addMinutes","minutes","addHours","hours","addDays","days","addMonths","months","d","setMonth","addYears","years","setFullYear","add","time","getTotalMilliseconds","subtract","timePassedSince","previous","between","t","ClockTime","getHours","getMinutes","getSeconds","getMilliseconds","toTimeStamp","TimeStamp","from","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","now","date","today","first","last","f","l","TimeSpan","isLeapYear","daysInMonth","yearOrDate","fromCalendarDate","freeze"],"mappings":"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","file":"System/Time/DateTime.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Based on .NET DateTime's interface.\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", \"./TimeSpan\", \"./ClockTime\", \"./TimeStamp\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    var TimeSpan_1 = require(\"./TimeSpan\");\n    var ClockTime_1 = require(\"./ClockTime\");\n    var TimeStamp_1 = require(\"./TimeStamp\");\n    var DateTime = (function () {\n        function DateTime(value, kind) {\n            if (value === void 0) { value = new Date(); }\n            if (kind === void 0) { kind = 1; }\n            var _ = this;\n            _._kind = kind;\n            if (value instanceof DateTime)\n                _._value = value.toJsDate();\n            else if (value instanceof Date)\n                _._setJsDate(value);\n            else\n                _._value = value === void (0)\n                    ? new Date()\n                    : new Date(value);\n        }\n        DateTime.prototype.toJsDate = function () {\n            return new Date(this._value.getTime());\n        };\n        DateTime.prototype._setJsDate = function (value) {\n            this._time = null;\n            this._value = new Date(value.getTime());\n        };\n        Object.defineProperty(DateTime.prototype, \"kind\", {\n            get: function () {\n                return this._kind;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DateTime.prototype, \"year\", {\n            get: function () {\n                return this._value.getFullYear();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DateTime.prototype, \"month\", {\n            get: function () {\n                return this._value.getMonth();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DateTime.prototype, \"calendarMonth\", {\n            get: function () {\n                return this._value.getMonth() + 1;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DateTime.prototype, \"calendar\", {\n            get: function () {\n                return {\n                    year: this.year,\n                    month: this.calendarMonth,\n                    day: this.day\n                };\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DateTime.prototype, \"day\", {\n            get: function () {\n                return this._value.getDate();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DateTime.prototype, \"dayIndex\", {\n            get: function () {\n                return this._value.getDate() - 1;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DateTime.prototype, \"dayOfWeek\", {\n            get: function () {\n                return this._value.getDay();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        DateTime.prototype.addMilliseconds = function (ms) {\n            ms = ms || 0;\n            return new DateTime(this._value.getTime() + ms, this._kind);\n        };\n        DateTime.prototype.addSeconds = function (seconds) {\n            seconds = seconds || 0;\n            return this.addMilliseconds(seconds * 1000);\n        };\n        DateTime.prototype.addMinutes = function (minutes) {\n            minutes = minutes || 0;\n            return this.addMilliseconds(minutes * 60000);\n        };\n        DateTime.prototype.addHours = function (hours) {\n            hours = hours || 0;\n            return this.addMilliseconds(hours * 3600000);\n        };\n        DateTime.prototype.addDays = function (days) {\n            days = days || 0;\n            return this.addMilliseconds(days * 86400000);\n        };\n        DateTime.prototype.addMonths = function (months) {\n            months = months || 0;\n            var d = this.toJsDate();\n            d.setMonth(d.getMonth() + months);\n            return new DateTime(d, this._kind);\n        };\n        DateTime.prototype.addYears = function (years) {\n            years = years || 0;\n            var d = this.toJsDate();\n            d.setFullYear(d.getFullYear() + years);\n            return new DateTime(d, this._kind);\n        };\n        DateTime.prototype.add = function (time) {\n            return this.addMilliseconds(time.getTotalMilliseconds());\n        };\n        DateTime.prototype.subtract = function (time) {\n            return this.addMilliseconds(-time.getTotalMilliseconds());\n        };\n        DateTime.prototype.timePassedSince = function (previous) {\n            return DateTime.between(previous, this);\n        };\n        Object.defineProperty(DateTime.prototype, \"date\", {\n            get: function () {\n                var _ = this;\n                return new DateTime(new Date(_.year, _.month, _.day), _._kind);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DateTime.prototype, \"timeOfDay\", {\n            get: function () {\n                var _ = this, t = _._time;\n                if (!t) {\n                    var d = this._value;\n                    _._time = t = new ClockTime_1.ClockTime(d.getHours(), d.getMinutes(), d.getSeconds(), d.getMilliseconds());\n                }\n                return t;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        DateTime.prototype.toTimeStamp = function () {\n            return TimeStamp_1.TimeStamp.from(this);\n        };\n        Object.defineProperty(DateTime, \"now\", {\n            get: function () {\n                return new DateTime();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DateTime.prototype, \"toUniversalTime\", {\n            get: function () {\n                var _ = this;\n                if (_._kind != 1)\n                    return new DateTime(_, _._kind);\n                var d = _._value;\n                return new DateTime(new Date(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate(), d.getUTCHours(), d.getUTCMinutes(), d.getUTCSeconds(), d.getUTCMilliseconds()), 2);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DateTime, \"today\", {\n            get: function () {\n                return DateTime.now.date;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DateTime, \"tomorrow\", {\n            get: function () {\n                var today = DateTime.today;\n                return today.addDays(1);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        DateTime.between = function (first, last) {\n            var f = first instanceof DateTime ? first._value : first, l = last instanceof DateTime ? last._value : last;\n            return new TimeSpan_1.TimeSpan(l.getTime() - f.getTime());\n        };\n        DateTime.isLeapYear = function (year) {\n            return ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\n        };\n        DateTime.daysInMonth = function (year, month) {\n            return (new Date(year, month + 1, 0)).getDate();\n        };\n        DateTime.from = function (yearOrDate, month, day) {\n            var year;\n            if (typeof yearOrDate == \"object\") {\n                day = yearOrDate.day;\n                month = yearOrDate.month;\n                year = yearOrDate.year;\n            }\n            return new DateTime(new Date(year, month, day));\n        };\n        DateTime.fromCalendarDate = function (yearOrDate, month, day) {\n            var year;\n            if (typeof yearOrDate == \"object\") {\n                day = yearOrDate.day;\n                month = yearOrDate.month;\n                year = yearOrDate.year;\n            }\n            return new DateTime(new Date(year, month - 1, day));\n        };\n        return DateTime;\n    }());\n    exports.DateTime = DateTime;\n    Object.freeze(DateTime);\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = DateTime;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Based on .NET DateTime's interface.\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n\r\nimport {ICalendarDate, ITimeStamp} from \"./ITimeStamp\";\r\nimport {TimeSpan} from \"./TimeSpan\";\r\nimport {ClockTime} from \"./ClockTime\";\r\nimport {Milliseconds} from \"./HowMany\";\r\nimport {TimeStamp} from \"./TimeStamp\";\r\nimport {IDateTime} from \"./IDateTime\";\r\nimport {Gregorian} from \"./Calendars\";\r\nimport {ITimeQuantity} from \"./ITimeQuantity\";\r\n\r\nexport class DateTime implements ICalendarDate, IDateTime\r\n{\r\n\tprivate _value: Date;\r\n\r\n\ttoJsDate(): Date\r\n\t{\r\n\t\treturn new Date(this._value.getTime()); // return a clone.\r\n\t}\r\n\r\n\tprivate _setJsDate(value: Date)\r\n\t{\r\n\t\tthis._time = null;\r\n\t\tthis._value = new Date(value.getTime());\r\n\t}\r\n\r\n\tconstructor();\r\n\tconstructor(dateString: string, kind?: DateTime.Kind);\r\n\tconstructor(milliseconds: number, kind?: DateTime.Kind);\r\n\tconstructor(source: Date, kind?: DateTime.Kind);\r\n\tconstructor(source: DateTime, kind?: DateTime.Kind);\r\n\tconstructor(value: any = new Date(), kind: DateTime.Kind = DateTime.Kind.Local)\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_._kind = kind;\r\n\t\tif(value instanceof DateTime)\r\n\t\t\t_._value = value.toJsDate();\r\n\t\telse if(value instanceof Date)\r\n\t\t\t_._setJsDate(value);\r\n\t\telse\r\n\t\t\t_._value = value=== void(0)\r\n\t\t\t\t? new Date()\r\n\t\t\t\t: new Date(value);\r\n\t}\r\n\r\n\tprivate _kind: DateTime.Kind;\r\n\tget kind(): DateTime.Kind\r\n\t{\r\n\t\treturn this._kind;\r\n\t}\r\n\r\n\tget year(): number\r\n\t{\r\n\t\treturn this._value.getFullYear();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the Gregorian Month (zero indexed).\r\n\t * @returns {number}\r\n\t */\r\n\tget month(): Gregorian.Month\r\n\t{\r\n\t\treturn this._value.getMonth();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the month number (1-12).\r\n\t * @returns {number}\r\n\t */\r\n\tget calendarMonth(): number\r\n\t{\r\n\t\treturn this._value.getMonth() + 1;\r\n\t}\r\n\r\n\tget calendar(): ICalendarDate\r\n\t{\r\n\t\treturn {\r\n\t\t\tyear: this.year,\r\n\t\t\tmonth: this.calendarMonth,\r\n\t\t\tday: this.day\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the day of the month.  An integer between 1 and 31.\r\n\t * @returns {number}\r\n\t */\r\n\tget day(): number\r\n\t{\r\n\t\treturn this._value.getDate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the day of the month indexed starting at zero.\r\n\t * @returns {number}\r\n\t */\r\n\tget dayIndex(): number\r\n\t{\r\n\t\treturn this._value.getDate() - 1;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the zero indexed day of the week. (Sunday == 0)\r\n\t * @returns {number}\r\n\t */\r\n\tget dayOfWeek(): Gregorian.DayOfWeek\r\n\t{\r\n\t\treturn this._value.getDay();\r\n\t}\r\n\r\n\r\n\taddMilliseconds(ms: number): DateTime\r\n\t{\r\n\t\tms = ms || 0;\r\n\t\treturn new DateTime(this._value.getTime() + ms, this._kind);\r\n\t}\r\n\r\n\taddSeconds(seconds: number): DateTime\r\n\t{\r\n\t\tseconds = seconds || 0;\r\n\t\treturn this.addMilliseconds(seconds*Milliseconds.Per.Second);\r\n\t}\r\n\r\n\taddMinutes(minutes: number): DateTime\r\n\t{\r\n\t\tminutes = minutes || 0;\r\n\t\treturn this.addMilliseconds(minutes*Milliseconds.Per.Minute);\r\n\t}\r\n\r\n\taddHours(hours: number): DateTime\r\n\t{\r\n\t\thours = hours || 0;\r\n\t\treturn this.addMilliseconds(hours*Milliseconds.Per.Hour);\r\n\t}\r\n\r\n\taddDays(days: number): DateTime\r\n\t{\r\n\t\tdays = days || 0;\r\n\t\treturn this.addMilliseconds(days*Milliseconds.Per.Day);\r\n\t}\r\n\r\n\taddMonths(months: number): DateTime\r\n\t{\r\n\t\tmonths = months || 0;\r\n\t\tvar d = this.toJsDate();\r\n\t\td.setMonth(d.getMonth() + months);\r\n\t\treturn new DateTime(d, this._kind);\r\n\t}\r\n\r\n\taddYears(years: number): DateTime\r\n\t{\r\n\t\tyears = years || 0;\r\n\t\tvar d = this.toJsDate();\r\n\t\td.setFullYear(d.getFullYear() + years);\r\n\t\treturn new DateTime(d, this._kind);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Receives an ITimeQuantity value and adds based on the total milliseconds.\r\n\t * @param {ITimeQuantity} time\r\n\t * @returns {DateTime}\r\n\t */\r\n\tadd(time: ITimeQuantity): DateTime\r\n\t{\r\n\t\treturn this.addMilliseconds(time.getTotalMilliseconds());\r\n\t}\r\n\r\n\t/**\r\n\t * Receives an ITimeQuantity value and subtracts based on the total milliseconds.\r\n\t * @param {ITimeQuantity} time\r\n\t * @returns {DateTime}\r\n\t */\r\n\tsubtract(time: ITimeQuantity): DateTime\r\n\t{\r\n\t\treturn this.addMilliseconds(-time.getTotalMilliseconds());\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a TimeSpan representing the amount of time between two dates.\r\n\t * @param previous\r\n\t * @returns {TimeSpan}\r\n\t */\r\n\ttimePassedSince(previous: Date|DateTime): TimeSpan\r\n\t{\r\n\t\treturn DateTime.between(previous, this);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a DateTime object for 00:00 of this date.\r\n\t */\r\n\tget date(): DateTime\r\n\t{\r\n\t\tconst _ = this;\r\n\t\treturn new DateTime(\r\n\t\t\tnew Date(\r\n\t\t\t\t_.year,\r\n\t\t\t\t_.month,\r\n\t\t\t\t_.day\r\n\t\t\t)\r\n\t\t\t, _._kind\r\n\t\t);\r\n\t}\r\n\r\n\tprivate _time: ClockTime;\r\n\r\n\t/**\r\n\t * Returns the time of day represented by a ClockTime object.\r\n\t * @returns {ClockTime}\r\n\t */\r\n\tget timeOfDay(): ClockTime\r\n\t{\r\n\t\tvar _ = this, t = _._time;\r\n\t\tif(!t)\r\n\t\t{\r\n\t\t\tvar d = this._value;\r\n\t\t\t_._time = t = new ClockTime(\r\n\t\t\t\td.getHours(),\r\n\t\t\t\td.getMinutes(),\r\n\t\t\t\td.getSeconds(),\r\n\t\t\t\td.getMilliseconds());\r\n\t\t}\r\n\t\treturn t;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a readonly object which contains all the date and time components.\r\n\t */\r\n\ttoTimeStamp(): ITimeStamp\r\n\t{\r\n\t\treturn TimeStamp.from(this);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the now local time.\r\n\t * @returns {DateTime}\r\n\t */\r\n\tstatic get now(): DateTime\r\n\t{\r\n\t\treturn new DateTime();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a UTC version of this date if its kind is local.\r\n\t * @returns {DateTime}\r\n\t */\r\n\tget toUniversalTime(): DateTime\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tif(_._kind!=DateTime.Kind.Local)\r\n\t\t\treturn new DateTime(_, _._kind);\r\n\r\n\t\tvar d = _._value;\r\n\t\treturn new DateTime(\r\n\t\t\tnew Date(\r\n\t\t\t\td.getUTCFullYear(),\r\n\t\t\t\td.getUTCMonth(),\r\n\t\t\t\td.getUTCDate(),\r\n\t\t\t\td.getUTCHours(),\r\n\t\t\t\td.getUTCMinutes(),\r\n\t\t\t\td.getUTCSeconds(),\r\n\t\t\t\td.getUTCMilliseconds()\r\n\t\t\t),\r\n\t\t\tDateTime.Kind.Utc\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * The date component for now.\r\n\t * @returns {DateTime}\r\n\t */\r\n\tstatic get today(): DateTime\r\n\t{\r\n\t\treturn DateTime.now.date;\r\n\t}\r\n\r\n\t/**\r\n\t * Midnight tomorrow.\r\n\t * @returns {DateTime}\r\n\t */\r\n\tstatic get tomorrow(): DateTime\r\n\t{\r\n\t\tvar today: DateTime = DateTime.today;\r\n\t\treturn today.addDays(1);\r\n\t}\r\n\r\n\t/**\r\n\t * Measures the difference between two dates as a TimeSpan.\r\n\t * @param first\r\n\t * @param last\r\n\t */\r\n\tstatic between(first: Date|DateTime, last: Date|DateTime): TimeSpan\r\n\t{\r\n\t\tvar f: Date = first instanceof DateTime ? first._value : <Date>first,\r\n\t\t    l: Date = last instanceof DateTime ? last._value : <Date>last;\r\n\r\n\t\treturn new TimeSpan(l.getTime() - f.getTime());\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates if the given year is a leap year using the formula:\r\n\t * ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0)\r\n\t * @param year\r\n\t * @returns {boolean}\r\n\t */\r\n\tstatic isLeapYear(year: number): boolean\r\n\t{\r\n\t\treturn ((year%4==0) && (year%100!=0)) || (year%400==0);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the number of days for the specific year and month.\r\n\t * @param year\r\n\t * @param month\r\n\t * @returns {any}\r\n\t */\r\n\tstatic daysInMonth(year: number, month: Gregorian.Month): number\r\n\t{\r\n\t\t// Basically, add 1 month, subtract a day... What's the date?\r\n\t\treturn (new Date(year, month + 1, 0)).getDate();\r\n\t}\r\n\r\n\tstatic from(calendarDate: ICalendarDate): DateTime;\r\n\tstatic from(year: number, month: Gregorian.Month, day: number): DateTime;\r\n\tstatic from(\r\n\t\tyearOrDate: number|ICalendarDate,\r\n\t\tmonth?: number,\r\n\t\tday?: number): DateTime\r\n\t{\r\n\t\tvar year: number;\r\n\t\tif(typeof yearOrDate==\"object\")\r\n\t\t{\r\n\t\t\tday = (<ICalendarDate>yearOrDate).day;\r\n\t\t\tmonth = (<ICalendarDate>yearOrDate).month;\r\n\t\t\tyear = (<ICalendarDate>yearOrDate).year;\r\n\t\t}\r\n\r\n\t\treturn new DateTime(new Date(year, month, day));\r\n\r\n\t}\r\n\r\n\r\n\tstatic fromCalendarDate(calendarDate: ICalendarDate): DateTime;\r\n\tstatic fromCalendarDate(year: number, month: number, day: number): DateTime;\r\n\tstatic fromCalendarDate(\r\n\t\tyearOrDate: number|ICalendarDate,\r\n\t\tmonth?: number,\r\n\t\tday?: number): DateTime\r\n\t{\r\n\t\tvar year: number;\r\n\t\tif(typeof yearOrDate==\"object\")\r\n\t\t{\r\n\t\t\tday = (<ICalendarDate>yearOrDate).day;\r\n\t\t\tmonth = (<ICalendarDate>yearOrDate).month;\r\n\t\t\tyear = (<ICalendarDate>yearOrDate).year;\r\n\t\t}\r\n\r\n\t\treturn new DateTime(new Date(year, month - 1, day));\r\n\r\n\t}\r\n\r\n}\r\n\r\n// Extend DateTime's usefulness.\r\nexport module DateTime\r\n{\r\n\texport const enum Kind {\r\n\t\tUnspecified,\r\n\t\tLocal,\r\n\t\tUtc,\r\n\t}\r\n}\r\n\r\nObject.freeze(DateTime);\r\n\r\nexport default DateTime;\r\n"]}