{"version":3,"sources":["System/Time/TimeUnitValue.js","System/Time/TimeUnitValue.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","getUnitQuantityFrom","q","units","TimeUnit_1","TimeUnit","fromMilliseconds","getTotalMilliseconds","TimeQuantity_1","extends_1","__extends","TimeUnitValue","_super","value","_units","call","this","assertValid","Object","defineProperty","prototype","get","_quantity","set","_total","enumerable","configurable","toMilliseconds","to","from","Milliseconds","TimeQuantity"],"mappings":";;;;CAIA,SAAWA,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QAAoBG,UAANF,IAAiBF,OAAOC,QAAUC,OAElD,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,UAAW,aAAc,iBAAkB,iBAAkBN,IAErF,SAAUI,EAASF,GAClB,YCiDJ,SAAAM,GAA6BC,EAAiBC,GAE7C,MAAOC,GAAAC,SAASC,iBAAiBJ,EAAEK,uBAAwBJ,GAzD5D,GAAAC,GAAAP,EAAuB,cACvBW,EAAAX,EAA2B,kBAE3BY,EAAAZ,EAA4B,iBACtBa,EAAYD,EAAAA,WAKlBE,EAAA,SAAAC,GAIC,QAAAD,GAAYE,EAAoCC,GAE/CF,EAAAG,KAAAC,KAAqB,gBAAT,GACDH,EACRZ,EAAmCY,EAAOC,IAJEE,KAAAF,OAAAA,EAK/CV,EAAAC,SAASY,YAAYH,GAmCvB,MA3C4BJ,GAAAC,EAAAC,GAW3BM,OAAAC,eAAIR,EAAAS,UAAA,SDAOC,ICAX,WAEC,MAAOL,MAAKM,WDCFC,ICEX,SAAU3B,GAEToB,KAAKQ,OAAS,KACdR,KAAKM,UAAY1B,GDDP6B,YAAY,EACZC,cAAc,ICGzBf,EAAAS,UAAAb,qBAAA,WAEC,MAAOH,GAAAC,SAASsB,eAAeX,KAAKM,UAAWN,KAAKF,SAIrDI,OAAAC,eAAIR,EAAAS,UAAA,SDHOC,ICGX,WAEC,MAAOL,MAAKF,QDFFW,YAAY,EACZC,cAAc,ICIzBf,EAAAS,UAAAQ,GAAA,SAAGzB,GAEF,MAFE,UAAAA,IAAAA,EAAiBa,KAAKb,OAEjBQ,EAAckB,KAAKb,KAAKb,IAGzBQ,EAAAkB,KAAP,SAAYhB,EAA4BV,GAEvC,MAFuC,UAAAA,IAAAA,EAAiBC,EAAAC,SAASyB,cAE1D,GAAInB,GAAcE,EAAOV,IAGlCQ,GA3C4BH,EAAAuB,aAD5Bb,QAAAC,eAAAxB,EAAA,cAAAkB,OAAA,ID2CIlB,EAAAA,WAAkBgB","file":"System/Time/TimeUnitValue.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", \"./TimeUnit\", \"./TimeQuantity\", \"../../extends\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    var TimeUnit_1 = require(\"./TimeUnit\");\n    var TimeQuantity_1 = require(\"./TimeQuantity\");\n    var extends_1 = require(\"../../extends\");\n    var __extends = extends_1.default;\n    var TimeUnitValue = (function (_super) {\n        __extends(TimeUnitValue, _super);\n        function TimeUnitValue(value, _units) {\n            _super.call(this, typeof (value) == 'number'\n                ? value\n                : getUnitQuantityFrom(value, _units));\n            this._units = _units;\n            TimeUnit_1.TimeUnit.assertValid(_units);\n        }\n        Object.defineProperty(TimeUnitValue.prototype, \"value\", {\n            get: function () {\n                return this._quantity;\n            },\n            set: function (v) {\n                this._total = null;\n                this._quantity = v;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        TimeUnitValue.prototype.getTotalMilliseconds = function () {\n            return TimeUnit_1.TimeUnit.toMilliseconds(this._quantity, this._units);\n        };\n        Object.defineProperty(TimeUnitValue.prototype, \"units\", {\n            get: function () {\n                return this._units;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        TimeUnitValue.prototype.to = function (units) {\n            if (units === void 0) { units = this.units; }\n            return TimeUnitValue.from(this, units);\n        };\n        TimeUnitValue.from = function (value, units) {\n            if (units === void 0) { units = TimeUnit_1.TimeUnit.Milliseconds; }\n            return new TimeUnitValue(value, units);\n        };\n        return TimeUnitValue;\n    }(TimeQuantity_1.TimeQuantity));\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = TimeUnitValue;\n    function getUnitQuantityFrom(q, units) {\n        return TimeUnit_1.TimeUnit.fromMilliseconds(q.getTotalMilliseconds(), units);\n    }\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n\r\nimport {TimeUnit} from \"./TimeUnit\";\r\nimport {TimeQuantity} from \"./TimeQuantity\";\r\nimport {ITimeQuantity} from \"./ITimeQuantity\";\r\nimport __extendsImport from \"../../extends\";\r\nconst __extends = __extendsImport;\r\n\r\n/**\r\n * TimeUnitValue allows for passing around a reference to a changeable measure of time coerced by its unit type.\r\n */\r\nexport default\r\nclass TimeUnitValue extends TimeQuantity\r\n{\r\n\r\n\tconstructor(value:number|ITimeQuantity, private _units:TimeUnit)\r\n\t{\r\n\t\tsuper(typeof(value)=='number'\r\n\t\t\t? <number>value\r\n\t\t\t: getUnitQuantityFrom(<ITimeQuantity>value, _units));\r\n\t\tTimeUnit.assertValid(_units);\r\n\t}\r\n\r\n\tget value():number\r\n\t{\r\n\t\treturn this._quantity;\r\n\t}\r\n\r\n\tset value(v:number)\r\n\t{\r\n\t\tthis._total = null;\r\n\t\tthis._quantity = v;\r\n\t}\r\n\r\n\tgetTotalMilliseconds():number\r\n\t{\r\n\t\treturn TimeUnit.toMilliseconds(this._quantity, this._units);\r\n\t}\r\n\r\n\t// To avoid confusion, the unit type can only be set once at construction.\r\n\tget units():TimeUnit\r\n\t{\r\n\t\treturn this._units;\r\n\t}\r\n\r\n\tto(units:TimeUnit = this.units):TimeUnitValue\r\n\t{\r\n\t\treturn TimeUnitValue.from(this,units);\r\n\t}\r\n\r\n\tstatic from(value:number|ITimeQuantity, units:TimeUnit = TimeUnit.Milliseconds):TimeUnitValue\r\n\t{\r\n\t\treturn new TimeUnitValue(value, units);\r\n\t}\r\n\r\n}\r\n\r\nfunction getUnitQuantityFrom(q:ITimeQuantity, units:TimeUnit)\r\n{\r\n\treturn TimeUnit.fromMilliseconds(q.getTotalMilliseconds(), units);\r\n}\r\n"]}