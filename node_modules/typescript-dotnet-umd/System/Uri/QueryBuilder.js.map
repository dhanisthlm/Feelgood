{"version":3,"sources":["System/Uri/QueryBuilder.js","System/Uri/QueryBuilder.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","Types_1","OrderedStringKeyDictionary_1","Enumerator_1","QueryParams","extends_1","__extends","QueryBuilder","_super","query","decodeValues","call","this","importQuery","init","prototype","Type","isString","importFromString","isEnumerableOrArrayLike","importEntries","importMap","values","deserialize","_","parse","key","value","containsKey","prev","getValue","Array","isArray","push","setValue","encode","prefixIfNotEmpty","toString","OrderedStringKeyDictionary","Object","defineProperty"],"mappings":";;;;CAIA,SAAWA,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QAAoBG,UAANF,IAAiBF,OAAOC,QAAUC,OAElD,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,UAAW,WAAY,yDAA0D,wCAAyC,gBAAiB,iBAAkBN,IAErL,SAAUI,EAASF,GAClB,YCNJ,IAAAM,GAAAJ,EAAmB,YACnBK,EAAAL,EAAyC,0DACzCM,EAAAN,EAAsC,yCAG1BO,EAAWP,EAAM,iBAC7BQ,EAAAR,EAA4B,iBACtBS,EAAYD,EAAAA,WAQlBE,EAAA,SAAAC,GAGC,QAAAD,GACCE,EACAC,GAAA,SAAAA,IAAAA,GAAA,GAEAF,EAAAG,KAAAC,MAEAA,KAAKC,YAAYJ,EAAOC,GA8E1B,MAvFkCJ,GAAAC,EAAAC,GAa1BD,EAAAO,KAAP,SACCL,EACAC,GAEA,MAFA,UAAAA,IAAAA,GAAA,GAEO,GAAIH,GAAaE,EAAOC,IAGhCH,EAAAQ,UAAAF,YAAA,SACCJ,EACAC,GAgBA,MAhBA,UAAAA,IAAAA,GAAA,GAGGT,EAAAe,KAAKC,SAASR,GAEhBG,KAAKM,iBAAyBT,EAAOC,GAE9BP,EAAAgB,wBAAwBV,GAE/BG,KAAKQ,cAAcX,GAInBG,KAAKS,UAA4BZ,GAG3BG,MAURL,EAAAQ,UAAAG,iBAAA,SACCI,EACAC,EACAb,GADA,SAAAa,IAAAA,GAAA,GACA,SAAAb,IAAAA,GAAA,EAEA,IAAMc,GAAIZ,IAkBV,OAjBAR,GAAYqB,MAAMH,EACjB,SAACI,EAAKC,GAEL,GAAGH,EAAEI,YAAYF,GACjB,CACC,GAAIG,GAAOL,EAAEM,SAASJ,EACnBK,OAAMC,QAAQH,GAChBA,EAAKI,KAAKN,GAEVH,EAAEU,SAASR,GAA0BG,EAAMF,QAG5CH,GAAEU,SAASR,EAAKC,IAElBJ,EACAb,GAEME,MAORL,EAAAQ,UAAAoB,OAAA,SAAOC,GAEN,MAAOhC,GAAY+B,OAAOvB,KAAMwB,IAGjC7B,EAAAQ,UAAAsB,SAAA,WAEC,MAAOzB,MAAKuB,UAEd5B,GAvFkCL,EAAAoC,2BAArB3C,GAAAY,aAAYA,EAyFzBgC,OAAAC,eAAA7C,EAAA,cAAAgC,OAAA,IDxCIhC,EAAAA,WCwCWY","file":"System/Uri/QueryBuilder.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", \"../Types\", \"../Collections/Dictionaries/OrderedStringKeyDictionary\", \"../Collections/Enumeration/Enumerator\", \"./QueryParams\", \"../../extends\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    var Types_1 = require(\"../Types\");\n    var OrderedStringKeyDictionary_1 = require(\"../Collections/Dictionaries/OrderedStringKeyDictionary\");\n    var Enumerator_1 = require(\"../Collections/Enumeration/Enumerator\");\n    var QueryParams = require(\"./QueryParams\");\n    var extends_1 = require(\"../../extends\");\n    var __extends = extends_1.default;\n    var QueryBuilder = (function (_super) {\n        __extends(QueryBuilder, _super);\n        function QueryBuilder(query, decodeValues) {\n            if (decodeValues === void 0) { decodeValues = true; }\n            _super.call(this);\n            this.importQuery(query, decodeValues);\n        }\n        QueryBuilder.init = function (query, decodeValues) {\n            if (decodeValues === void 0) { decodeValues = true; }\n            return new QueryBuilder(query, decodeValues);\n        };\n        QueryBuilder.prototype.importQuery = function (query, decodeValues) {\n            if (decodeValues === void 0) { decodeValues = true; }\n            if (Types_1.Type.isString(query)) {\n                this.importFromString(query, decodeValues);\n            }\n            else if (Enumerator_1.isEnumerableOrArrayLike(query)) {\n                this.importEntries(query);\n            }\n            else {\n                this.importMap(query);\n            }\n            return this;\n        };\n        QueryBuilder.prototype.importFromString = function (values, deserialize, decodeValues) {\n            if (deserialize === void 0) { deserialize = true; }\n            if (decodeValues === void 0) { decodeValues = true; }\n            var _ = this;\n            QueryParams.parse(values, function (key, value) {\n                if (_.containsKey(key)) {\n                    var prev = _.getValue(key);\n                    if (Array.isArray(prev))\n                        prev.push(value);\n                    else\n                        _.setValue(key, [prev, value]);\n                }\n                else\n                    _.setValue(key, value);\n            }, deserialize, decodeValues);\n            return this;\n        };\n        QueryBuilder.prototype.encode = function (prefixIfNotEmpty) {\n            return QueryParams.encode(this, prefixIfNotEmpty);\n        };\n        QueryBuilder.prototype.toString = function () {\n            return this.encode();\n        };\n        return QueryBuilder;\n    }(OrderedStringKeyDictionary_1.OrderedStringKeyDictionary));\n    exports.QueryBuilder = QueryBuilder;\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = QueryBuilder;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n\r\nimport {Type} from \"../Types\";\r\nimport {OrderedStringKeyDictionary} from \"../Collections/Dictionaries/OrderedStringKeyDictionary\";\r\nimport {isEnumerableOrArrayLike} from \"../Collections/Enumeration/Enumerator\";\r\nimport * as UriComponent from \"./UriComponent\";\r\nimport * as QueryParam from \"./QueryParam\";\r\nimport * as QueryParams from \"./QueryParams\";\r\nimport __extendsImport from \"../../extends\";\r\nconst __extends = __extendsImport;\r\n\r\n\r\n/**\r\n * Provides a means for parsing and building a set of parameters.\r\n *\r\n * In other languages, dictionaries are not reliable for retaining the order of stored values. So for certainty and flexibility we use an ordered dictionary as a base class.\r\n */\r\nexport class QueryBuilder extends OrderedStringKeyDictionary<UriComponent.Value|UriComponent.Value[]>\r\n{\r\n\r\n\tconstructor(\r\n\t\tquery:QueryParam.Convertible,\r\n\t\tdecodeValues:boolean = true)\r\n\t{\r\n\t\tsuper();\r\n\r\n\t\tthis.importQuery(query, decodeValues);\r\n\t}\r\n\r\n\r\n\tstatic init(\r\n\t\tquery:QueryParam.Convertible,\r\n\t\tdecodeValues:boolean = true):QueryBuilder\r\n\t{\r\n\t\treturn new QueryBuilder(query, decodeValues);\r\n\t}\r\n\r\n\timportQuery(\r\n\t\tquery:QueryParam.Convertible,\r\n\t\tdecodeValues:boolean = true):QueryBuilder\r\n\t{\r\n\r\n\t\tif(Type.isString(query))\r\n\t\t{\r\n\t\t\tthis.importFromString(<string>query, decodeValues);\r\n\t\t}\r\n\t\telse if(isEnumerableOrArrayLike(query))\r\n\t\t{\r\n\t\t\tthis.importEntries(query);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.importMap(<UriComponent.Map>query);\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Property parses the components of an URI into their values or array of values.\r\n\t * @param values\r\n\t * @param deserialize\r\n\t * @param decodeValues\r\n\t * @returns {QueryBuilder}\r\n\t */\r\n\timportFromString(\r\n\t\tvalues:string,\r\n\t\tdeserialize:boolean = true,\r\n\t\tdecodeValues:boolean = true):QueryBuilder\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tQueryParams.parse(values,\r\n\t\t\t(key, value)=>\r\n\t\t\t{\r\n\t\t\t\tif(_.containsKey(key))\r\n\t\t\t\t{\r\n\t\t\t\t\tvar prev = _.getValue(key);\r\n\t\t\t\t\tif(Array.isArray(prev))\r\n\t\t\t\t\t\tprev.push(value);\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\t_.setValue(key, [<UriComponent.Value>prev, value]);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t\t_.setValue(key, value);\r\n\t\t\t},\r\n\t\t\tdeserialize,\r\n\t\t\tdecodeValues);\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns the encoded URI string\r\n\t */\r\n\tencode(prefixIfNotEmpty?:boolean):string\r\n\t{\r\n\t\treturn QueryParams.encode(this, prefixIfNotEmpty);\r\n\t}\r\n\r\n\ttoString():string\r\n\t{\r\n\t\treturn this.encode();\r\n\t}\r\n}\r\n\r\nexport default QueryBuilder;\r\n"]}