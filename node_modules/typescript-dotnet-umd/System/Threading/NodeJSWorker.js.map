{"version":3,"sources":["System/Threading/NodeJSWorker.js","System/Threading/NodeJSWorker.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","ObservableBase_1","extends_1","__extends","ps","NodeJSWorker","_super","url","_this","this","call","process","_process","fork","on","msg","_onNext","JSON","parse","err","_onError","prototype","data","onmessage","error","onerror","_onDispose","removeAllListeners","kill","postMessage","obj","throwIfDisposed","send","stringify","terminate","dispose","ObservableBase","Object","defineProperty","value"],"mappings":";;;;;CAKA,SAAWA,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QAAoBG,UAANF,IAAiBF,OAAOC,QAAUC,OAElD,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,UAAW,+BAAgC,iBAAkBN,IAErF,SAAUI,EAASF,GAClB,YCNJ,IAAAM,GAAAJ,EAA6B,gCAC7BK,EAAAL,EAA4B,iBACtBM,EAAYD,EAAAA,WAGZE,EAAKP,EAAQ,iBAMnBQ,EAAA,SAAAC,GAMC,QAAAD,GAAYE,GANb,GAAAC,GAAAC,IAQEH,GAAAI,KAAAD,KACA,IAAIE,GAAUF,KAAKG,SAAWR,EAAGS,KAAKN,EACtCI,GAAQG,GAAG,UAAW,SAACC,GAAa,MAAAP,GAAKQ,QAAQC,KAAKC,MAAMH,MAC5DJ,EAAQG,GAAG,QAAS,SAACK,GAAU,MAAAX,GAAKY,SAASD,KAqC/C,MAhDkChB,GAAAE,EAAAC,GAcvBD,EAAAgB,UAAAL,QAAV,SAAkBM,GAEjBhB,EAAAe,UAAML,QAAON,KAAAD,KAACa,GACXb,KAAKc,WACPd,KAAKc,WAAWD,KAAMA,KAIdjB,EAAAgB,UAAAD,SAAV,SAAmBI,GAElBlB,EAAAe,UAAMD,SAAQV,KAAAD,KAACe,GACZf,KAAKgB,SACPhB,KAAKgB,QAAQD,IAGLnB,EAAAgB,UAAAK,WAAV,WAECpB,EAAAe,UAAMK,WAAUhB,KAAAD,MAChBA,KAAKG,SAASe,qBACdlB,KAAKG,SAASgB,OACdnB,KAAKG,SAAW,MAGjBP,EAAAgB,UAAAQ,YAAA,SAAYC,GAEXrB,KAAKsB,kBACLtB,KAAKG,SAASoB,KAAKf,KAAKgB,WAAWX,KAAMQ,MAG1CzB,EAAAgB,UAAAa,UAAA,WAECzB,KAAK0B,WAGP9B,GAhDkCJ,EAAAmC,eAArBzC,GAAAU,aAAYA,EAkDzBgC,OAAAC,eAAA3C,EAAA,cAAA4C,OAAA,IDdI5C,EAAAA,WCcWU","file":"System/Threading/NodeJSWorker.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n * Based upon Parallel.js: https://github.com/adambom/parallel.js/blob/master/lib/Worker.js\n */\n(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", \"../Observable/ObservableBase\", \"../../extends\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    var ObservableBase_1 = require(\"../Observable/ObservableBase\");\n    var extends_1 = require(\"../../extends\");\n    var __extends = extends_1.default;\n    var ps = require(\"child_process\");\n    var NodeJSWorker = (function (_super) {\n        __extends(NodeJSWorker, _super);\n        function NodeJSWorker(url) {\n            var _this = this;\n            _super.call(this);\n            var process = this._process = ps.fork(url);\n            process.on('message', function (msg) { return _this._onNext(JSON.parse(msg)); });\n            process.on('error', function (err) { return _this._onError(err); });\n        }\n        NodeJSWorker.prototype._onNext = function (data) {\n            _super.prototype._onNext.call(this, data);\n            if (this.onmessage)\n                this.onmessage({ data: data });\n        };\n        NodeJSWorker.prototype._onError = function (error) {\n            _super.prototype._onError.call(this, error);\n            if (this.onerror)\n                this.onerror(error);\n        };\n        NodeJSWorker.prototype._onDispose = function () {\n            _super.prototype._onDispose.call(this);\n            this._process.removeAllListeners();\n            this._process.kill();\n            this._process = null;\n        };\n        NodeJSWorker.prototype.postMessage = function (obj) {\n            this.throwIfDisposed();\n            this._process.send(JSON.stringify({ data: obj }));\n        };\n        NodeJSWorker.prototype.terminate = function () {\n            this.dispose();\n        };\n        return NodeJSWorker;\n    }(ObservableBase_1.ObservableBase));\n    exports.NodeJSWorker = NodeJSWorker;\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = NodeJSWorker;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n * Based upon Parallel.js: https://github.com/adambom/parallel.js/blob/master/lib/Worker.js\r\n */\r\n\r\nimport {WorkerLike} from \"./WorkerType\";\r\nimport {ObservableBase} from \"../Observable/ObservableBase\";\r\nimport __extendsImport from \"../../extends\";\r\nconst __extends = __extendsImport;\r\n\r\ndeclare const require:any;\r\nconst ps = require(\"child_process\");\r\n//import {ChildProcess} from \"child_process\";\r\n\r\n/**\r\n * This class takes the place of a WebWorker\r\n */\r\nexport class NodeJSWorker extends ObservableBase<any> implements WorkerLike\r\n{\r\n\tprivate _process:any;\r\n\tonmessage:(message:{data:any})=>void;\r\n\tonerror:(error:any)=>void;\r\n\r\n\tconstructor(url:string)\r\n\t{\r\n\t\tsuper();\r\n\t\tvar process = this._process = ps.fork(url);\r\n\t\tprocess.on('message', (msg:string)=>this._onNext(JSON.parse(msg)));\r\n\t\tprocess.on('error', (err:any)=>this._onError(err));\r\n\t}\r\n\r\n\tprotected _onNext(data:any):void\r\n\t{\r\n\t\tsuper._onNext(data);\r\n\t\tif(this.onmessage)\r\n\t\t\tthis.onmessage({data: data});\r\n\r\n\t}\r\n\r\n\tprotected _onError(error:any):void\r\n\t{\r\n\t\tsuper._onError(error);\r\n\t\tif(this.onerror)\r\n\t\t\tthis.onerror(error);\r\n\t}\r\n\r\n\tprotected _onDispose()\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis._process.removeAllListeners(); // just to satisfy paranoia.\r\n\t\tthis._process.kill();\r\n\t\tthis._process = null;\r\n\t}\r\n\r\n\tpostMessage(obj:any):void\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\tthis._process.send(JSON.stringify({data: obj}));\r\n\t}\r\n\r\n\tterminate()\r\n\t{\r\n\t\tthis.dispose();\r\n\t}\r\n\r\n}\r\n\r\nexport default NodeJSWorker;\r\n"]}