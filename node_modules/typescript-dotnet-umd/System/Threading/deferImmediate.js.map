{"version":3,"sources":["System/Threading/deferImmediate.js","System/Threading/deferImmediate.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","flush","entry","immediateQueue","first","task_1","task","domain","context","args","canceller","enter","runSingle","laterQueue","dequeue","flushing","params","apply","e","Environment_1","isNodeJS","exit","setTimeout","requestFlush","requestTick","deferImmediate","entryPool","take","process","slice","r","removeNode","add","addNode","cancel","dispose","runAfterDeferred","enqueue","Types_1","LinkedNodeList_1","Queue_1","ObjectPool_1","LinkedNodeList","Queue","ObjectPool","o","length","nextTick","setImmediate","Type","FUNCTION","window","UNDEFINED","bind","MessageChannel","channel","port1","onmessage","requestPortTick","port2","postMessage","Object","defineProperty","value"],"mappings":";;;;;CAKA,SAAWA,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QAAoBG,UAANF,IAAiBF,OAAOC,QAAUC,OAElD,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,UAAW,WAAY,gCAAiC,uBAAwB,2BAA4B,kBAAmBN,IAEvJ,SAAUI,EAASF,GAClB,YCiCJ,SAAAM,KAIC,IADA,GAAIC,GACEA,EAAQC,EAAeC,OAC7B,CACM,GAAAC,GAAAH,EAAAI,KAAMC,EAAAL,EAAAK,OAAQC,EAAAN,EAAAM,QAASC,EAAAP,EAAAO,IAC5BP,GAAMQ,YACHH,GAAQA,EAAOI,QAClBC,EAAUP,EAAME,EAAQC,EAASC,GAIlC,IADA,GAAIH,GACEA,EAAOO,EAAWC,WAEvBF,EAAUN,EAGXS,IAAW,EAsBZ,QAAAH,GAAmBN,EAAeC,EAAiBC,EAAcQ,GAEhE,IAECV,EAAKW,MAAMT,EAASQ,GAErB,MAAME,GAEL,GAAGC,EAAAC,SAkBF,KAVGb,IAEFA,EAAOc,OAERC,WAAWrB,EAAO,GACfM,GAEFA,EAAOI,QAGFO,CAONI,YAAW,WAEV,KAAMJ,IACJ,GAIFX,GAEFA,EAAOc,OAIT,QAAAE,KAEKR,IAEHA,GAAW,EACXS,KAYF,QAAAC,GAA+BnB,EAAuBE,EAAcC,GAEnE,GAAIP,GAAwBwB,EAAUC,MAkBtC,OAjBAzB,GAAMI,KAAOA,EACbJ,EAAMK,OAASY,EAAAC,UAAkBQ,QAAiB,OAClD1B,EAAMM,QAAUA,EAChBN,EAAMO,KAAOA,GAAQA,EAAKoB,QAC1B3B,EAAMQ,UAAY,WAEjB,IAAIR,EAAO,OAAO,CAClB,IAAI4B,KAAM3B,EAAe4B,WAAW7B,EAGpC,OAFAwB,GAAUM,IAAI9B,GACdA,EAAQ,KACD4B,GAGR3B,EAAe8B,QAAQ/B,GAEvBqB,KAGCW,OAAQhC,EAAMQ,UACdyB,QAAS,WAAOjC,GAASA,EAAMQ,cAQjC,QAAA0B,GAAiC9B,GAEhCO,EAAWwB,QAAQ/B,GACnBiB,IA/KD,GAgCIC,GAhCJc,EAAAzC,EAAmB,YACnB0C,EAAA1C,EAA6B,iCAC7B2C,EAAA3C,EAAoB,wBAIpB4C,EAAA5C,EAAyB,4BACzBsB,EAAAtB,EAAuB,kBA0BnBkB,GAAmB,EA6BnBZ,EAAiB,GAAIoC,GAAAG,eAGrB7B,EAAa,GAAI2B,GAAAG,MAEjBjB,EAAY,GAAIe,GAAAG,WAA4B,GAC/C,WAAI,UACJ,SAAAC,GAECA,EAAEvC,KAAO,KACTuC,EAAEtC,OAAS,KACXsC,EAAErC,QAAU,KACTqC,EAAEpC,OAAMoC,EAAEpC,KAAKqC,OAAS,GAC3BD,EAAEpC,KAAO,KACToC,EAAEnC,UAAY,MAsGhB,IApCgBf,EAAA8B,eAAcA,EA8Bd9B,EAAAyC,iBAAgBA,EAM7BjB,EAAAC,SAEFI,EAAc,WAEbI,QAAQmB,SAAS9C,QAId,UAAU+C,gBAAeV,EAAAW,KAAKC,SAKjC1B,QAFS2B,UAASb,EAAAW,KAAKG,UAETJ,aAAaK,KAAKF,OAAQlD,GAI1B,WAEb+C,aAAa/C,QAKX,UAAUqD,kBAAiBhB,EAAAW,KAAKG,UACrC,CAGC,GAAIG,GAAU,GAAID,eAGlBC,GAAQC,MAAMC,UAAY,WAEzBjC,EAAckC,EACdH,EAAQC,MAAMC,UAAYxD,EAC1BA,IAED,IAAIyD,GAAkB,WAIrBH,EAAQI,MAAMC,YAAY,GAE3BpC,GAAc,WAEbF,WAAWrB,EAAO,GAClByD,SAODlC,GAAc,WAEbF,WAAWrB,EAAO,GAIpB4D,QAAAC,eAAAnE,EAAA,cAAAoE,OAAA,IDvGIpE,EAAAA,WCuGW8B","file":"System/Threading/deferImmediate.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n * Based on code from: https://github.com/kriskowal/q\n */\n(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", \"../Types\", \"../Collections/LinkedNodeList\", \"../Collections/Queue\", \"../Disposable/ObjectPool\", \"../Environment\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    var Types_1 = require(\"../Types\");\n    var LinkedNodeList_1 = require(\"../Collections/LinkedNodeList\");\n    var Queue_1 = require(\"../Collections/Queue\");\n    var ObjectPool_1 = require(\"../Disposable/ObjectPool\");\n    var Environment_1 = require(\"../Environment\");\n    var requestTick;\n    var flushing = false;\n    function flush() {\n        var entry;\n        while (entry = immediateQueue.first) {\n            var task_1 = entry.task, domain = entry.domain, context = entry.context, args = entry.args;\n            entry.canceller();\n            if (domain)\n                domain.enter();\n            runSingle(task_1, domain, context, args);\n        }\n        var task;\n        while (task = laterQueue.dequeue()) {\n            runSingle(task);\n        }\n        flushing = false;\n    }\n    var immediateQueue = new LinkedNodeList_1.LinkedNodeList();\n    var laterQueue = new Queue_1.Queue();\n    var entryPool = new ObjectPool_1.ObjectPool(40, function () { return {}; }, function (o) {\n        o.task = null;\n        o.domain = null;\n        o.context = null;\n        if (o.args)\n            o.args.length = 0;\n        o.args = null;\n        o.canceller = null;\n    });\n    function runSingle(task, domain, context, params) {\n        try {\n            task.apply(context, params);\n        }\n        catch (e) {\n            if (Environment_1.isNodeJS) {\n                if (domain) {\n                    domain.exit();\n                }\n                setTimeout(flush, 0);\n                if (domain) {\n                    domain.enter();\n                }\n                throw e;\n            }\n            else {\n                setTimeout(function () {\n                    throw e;\n                }, 0);\n            }\n        }\n        if (domain) {\n            domain.exit();\n        }\n    }\n    function requestFlush() {\n        if (!flushing) {\n            flushing = true;\n            requestTick();\n        }\n    }\n    function deferImmediate(task, context, args) {\n        var entry = entryPool.take();\n        entry.task = task;\n        entry.domain = Environment_1.isNodeJS && process['domain'];\n        entry.context = context;\n        entry.args = args && args.slice();\n        entry.canceller = function () {\n            if (!entry)\n                return false;\n            var r = !!immediateQueue.removeNode(entry);\n            entryPool.add(entry);\n            entry = null;\n            return r;\n        };\n        immediateQueue.addNode(entry);\n        requestFlush();\n        return {\n            cancel: entry.canceller,\n            dispose: function () { entry && entry.canceller(); }\n        };\n    }\n    exports.deferImmediate = deferImmediate;\n    function runAfterDeferred(task) {\n        laterQueue.enqueue(task);\n        requestFlush();\n    }\n    exports.runAfterDeferred = runAfterDeferred;\n    if (Environment_1.isNodeJS) {\n        requestTick = function () {\n            process.nextTick(flush);\n        };\n    }\n    else if (typeof setImmediate === Types_1.Type.FUNCTION) {\n        if (typeof window !== Types_1.Type.UNDEFINED) {\n            requestTick = setImmediate.bind(window, flush);\n        }\n        else {\n            requestTick = function () {\n                setImmediate(flush);\n            };\n        }\n    }\n    else if (typeof MessageChannel !== Types_1.Type.UNDEFINED) {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function () {\n            requestTick = requestPortTick;\n            channel.port1.onmessage = flush;\n            flush();\n        };\n        var requestPortTick = function () {\n            channel.port2.postMessage(0);\n        };\n        requestTick = function () {\n            setTimeout(flush, 0);\n            requestPortTick();\n        };\n    }\n    else {\n        requestTick = function () {\n            setTimeout(flush, 0);\n        };\n    }\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = deferImmediate;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n * Based on code from: https://github.com/kriskowal/q\r\n */\r\n\r\n\r\nimport {Type} from \"../Types\";\r\nimport {LinkedNodeList} from \"../Collections/LinkedNodeList\";\r\nimport {Queue} from \"../Collections/Queue\";\r\nimport {Closure} from \"../FunctionTypes\";\r\nimport {ILinkedNode} from \"../Collections/ILinkedListNode\";\r\nimport {ICancellable} from \"./ICancellable\";\r\nimport {ObjectPool} from \"../Disposable/ObjectPool\";\r\nimport {isNodeJS} from \"../Environment\";\r\n\r\ndeclare module process\r\n{\r\n\texport function nextTick(callback:Closure):void;\r\n\r\n\texport function toString():string;\r\n}\r\n\r\ninterface IDomain\r\n{\r\n\tenter():void;\r\n\texit():void;\r\n}\r\n\r\ninterface ITaskQueueEntry extends ILinkedNode<ITaskQueueEntry>\r\n{\r\n\ttask:Function;\r\n\tdomain?:IDomain;\r\n\tcontext?:any;\r\n\targs?:any[];\r\n\tcanceller:()=>boolean;\r\n}\r\n\r\n\r\nvar requestTick:()=>void;\r\nvar flushing:boolean = false;\r\n\r\n// Use the fastest possible means to execute a task in a future turn\r\n// of the event loop.\r\n\r\n\r\nfunction flush():void\r\n{\r\n\t/* jshint loopfunc: true */\r\n\tvar entry:ITaskQueueEntry;\r\n\twhile(entry = immediateQueue.first)\r\n\t{\r\n\t\tlet {task, domain, context, args} = entry;\r\n\t\tentry.canceller();\r\n\t\tif(domain) domain.enter();\r\n\t\trunSingle(task, domain, context, args);\r\n\t}\r\n\r\n\tlet task:Closure;\r\n\twhile(task = laterQueue.dequeue())\r\n\t{\r\n\t\trunSingle(task);\r\n\t}\r\n\r\n\tflushing = false;\r\n}\r\n\r\n\r\n// linked list of tasks.  Using a real linked list to allow for removal.\r\nvar immediateQueue = new LinkedNodeList<ITaskQueueEntry>();\r\n\r\n// queue for late tasks, used by unhandled rejection tracking\r\nvar laterQueue = new Queue<Closure>();\r\n\r\nvar entryPool = new ObjectPool<ITaskQueueEntry>(40,\r\n\t()=><any>{},\r\n\to=>\r\n\t{\r\n\t\to.task = null;\r\n\t\to.domain = null;\r\n\t\to.context = null;\r\n\t\tif(o.args) o.args.length = 0;\r\n\t\to.args = null;\r\n\t\to.canceller = null;\r\n\t});\r\n\r\nfunction runSingle(task:Function, domain?:IDomain, context?:any, params?:any[]):void\r\n{\r\n\ttry\r\n\t{\r\n\t\ttask.apply(context, params);\r\n\t}\r\n\tcatch(e)\r\n\t{\r\n\t\tif(isNodeJS)\r\n\t\t{\r\n\t\t\t// In node, uncaught exceptions are considered fatal errors.\r\n\t\t\t// Re-throw them synchronously to interrupt flushing!\r\n\r\n\t\t\t// Ensure continuation if the uncaught exception is suppressed\r\n\t\t\t// listening \"uncaughtException\" events (as domains does).\r\n\t\t\t// Continue in next event to avoid tick recursion.\r\n\t\t\tif(domain)\r\n\t\t\t{\r\n\t\t\t\tdomain.exit();\r\n\t\t\t}\r\n\t\t\tsetTimeout(flush, 0);\r\n\t\t\tif(domain)\r\n\t\t\t{\r\n\t\t\t\tdomain.enter();\r\n\t\t\t}\r\n\r\n\t\t\tthrow e;\r\n\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t// In browsers, uncaught exceptions are not fatal.\r\n\t\t\t// Re-throw them asynchronously to avoid slow-downs.\r\n\t\t\tsetTimeout(()=>\r\n\t\t\t{\r\n\t\t\t\tthrow e;\r\n\t\t\t}, 0);\r\n\t\t}\r\n\t}\r\n\r\n\tif(domain)\r\n\t{\r\n\t\tdomain.exit();\r\n\t}\r\n}\r\n\r\nfunction requestFlush():void\r\n{\r\n\tif(!flushing)\r\n\t{\r\n\t\tflushing = true;\r\n\t\trequestTick();\r\n\t}\r\n}\r\n\r\nexport function deferImmediate(task:Closure, context?:any):ICancellable\r\n/**\r\n * @param task The function to call.\r\n * @param context The context (aka this) to call on. Null or undefined = global.\r\n * @param args The parameters to pass to the function.\r\n * @returns {{cancel: (function(): boolean), dispose: (function(): undefined)}}\r\n */\r\nexport function deferImmediate(task:Function, context?:any, args?:any[]):ICancellable\r\nexport function deferImmediate(task:Closure|Function, context?:any, args?:any[]):ICancellable\r\n{\r\n\tvar entry:ITaskQueueEntry = entryPool.take();\r\n\tentry.task = task;\r\n\tentry.domain = isNodeJS && (<any>process)['domain'];\r\n\tentry.context = context;\r\n\tentry.args = args && args.slice();\r\n\tentry.canceller = ()=>\r\n\t{\r\n\t\tif(!entry) return false;\r\n\t\tlet r = !!immediateQueue.removeNode(entry);\r\n\t\tentryPool.add(entry);\r\n\t\tentry = null;\r\n\t\treturn r;\r\n\t};\r\n\r\n\timmediateQueue.addNode(entry);\r\n\r\n\trequestFlush();\r\n\r\n\treturn {\r\n\t\tcancel: entry.canceller,\r\n\t\tdispose: ()=> { entry && entry.canceller(); }\r\n\t}\r\n}\r\n\r\n\r\n// runs a task after all other tasks have been run\r\n// this is useful for unhandled rejection tracking that needs to happen\r\n// after all `then`d tasks have been run.\r\nexport function runAfterDeferred(task:Closure):void\r\n{\r\n\tlaterQueue.enqueue(task);\r\n\trequestFlush();\r\n}\r\n\r\nif(isNodeJS)\r\n{\r\n\trequestTick = ()=>\r\n\t{\r\n\t\tprocess.nextTick(flush);\r\n\t};\r\n\r\n}\r\nelse if(typeof setImmediate===Type.FUNCTION)\r\n{\r\n\t// In IE10, Node.js 0.9+, or https://github.com/NobleJS/setImmediate\r\n\tif(typeof window!==Type.UNDEFINED)\r\n\t{\r\n\t\trequestTick = setImmediate.bind(window, flush);\r\n\t}\r\n\telse\r\n\t{\r\n\t\trequestTick = ()=>\r\n\t\t{\r\n\t\t\tsetImmediate(flush);\r\n\t\t};\r\n\t}\r\n\r\n}\r\nelse if(typeof MessageChannel!==Type.UNDEFINED)\r\n{\r\n\t// modern browsers\r\n\t// http://www.nonblocking.io/2011/06/windownexttick.html\r\n\tvar channel = new MessageChannel();\r\n\t// At least Safari Version 6.0.5 (8536.30.1) intermittently cannot create\r\n\t// working message ports the first time a page loads.\r\n\tchannel.port1.onmessage = function()\r\n\t{\r\n\t\trequestTick = requestPortTick;\r\n\t\tchannel.port1.onmessage = flush;\r\n\t\tflush();\r\n\t};\r\n\tvar requestPortTick = ()=>\r\n\t{\r\n\t\t// Opera requires us to provide a message payload, regardless of\r\n\t\t// whether we use it.\r\n\t\tchannel.port2.postMessage(0);\r\n\t};\r\n\trequestTick = ()=>\r\n\t{\r\n\t\tsetTimeout(flush, 0);\r\n\t\trequestPortTick();\r\n\t};\r\n\r\n}\r\nelse\r\n{\r\n\t// old browsers\r\n\trequestTick = ()=>\r\n\t{\r\n\t\tsetTimeout(flush, 0);\r\n\t};\r\n}\r\n\r\nexport default deferImmediate;"]}