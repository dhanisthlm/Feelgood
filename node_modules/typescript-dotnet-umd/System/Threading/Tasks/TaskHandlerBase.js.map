{"version":3,"sources":["System/Threading/Tasks/TaskHandlerBase.js","System/Threading/Tasks/TaskHandlerBase.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","DisposableBase_1","extends_1","__extends","TaskHandlerBase","_super","call","this","_timeoutId","_status","Object","defineProperty","prototype","get","enumerable","configurable","start","defer","throwIfDisposed","cancel","isFinite","setTimeout","_handler","runSynchronously","getStatus","d","_onExecute","ex","_onDispose","id","clearTimeout","DisposableBase","value"],"mappings":";;;;CAIA,SAAWA,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QAAoBG,UAANF,IAAiBF,OAAOC,QAAUC,OAElD,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,UAAW,kCAAmC,oBAAqBN,IAE3F,SAAUI,EAASF,GAClB,YCPJ,IAAAM,GAAAJ,EAA6B,mCAG7BK,EAAAL,EAA4B,oBACtBM,EAAYD,EAAAA,WAKlBE,EAAA,SAAAC,GAIC,QAAAD,KAECC,EAAAC,KAAAC,MACAA,KAAKC,WAAa,KAClBD,KAAKE,QAAU,EA+EjB,MAvF8CN,GAAAC,EAAAC,GAa7CK,OAAAC,eAAIP,EAAAQ,UAAA,eDHOC,ICGX,WAEC,QAASN,KAAKC,YDFJM,YAAY,EACZC,cAAc,ICQzBX,EAAAQ,UAAAI,MAAA,SAAMC,GAELV,KAAKW,kBAELX,KAAKY,SACLZ,KAAKE,QAAU,EACVQ,EAAM,IAAIA,EAAQ,GACpBG,SAASH,KACXV,KAAKC,WAAaa,WAAWjB,EAAgBkB,SAAUL,EAAOV,QAGhEH,EAAAQ,UAAAW,iBAAA,WAEChB,KAAKW,kBACLd,EAAgBkB,SAASf,OAGhBH,EAAAQ,UAAAY,UAAV,WAEC,MAAOjB,MAAKE,SAGbC,OAAAC,eAAIP,EAAAQ,UAAA,UDXOC,ICWX,WAEC,MAAON,MAAKiB,aDVFV,YAAY,EACZC,cAAc,ICaVX,EAAAkB,SAAf,SAAwBG,GAEvBA,EAAEN,SACFM,EAAEhB,QAAU,CACZ,KAECgB,EAAEC,aACFD,EAAEhB,QAAU,EAEb,MAAMkB,GAELF,EAAEhB,QAAU,IAMJL,EAAAQ,UAAAgB,WAAV,WAECrB,KAAKY,SACLZ,KAAKE,QAAU,MAGhBL,EAAAQ,UAAAO,OAAA,WAEC,GAAIU,GAAKtB,KAAKC,UACd,OAAGqB,IAEFC,aAAaD,GACbtB,KAAKC,WAAa,KAClBD,KAAKE,QAAU,GACR,IAED,GAITL,GAvF8CH,EAAA8B,eAAxBpC,GAAAS,gBAAeA,EAyFrCM,OAAAC,eAAAhB,EAAA,cAAAqC,OAAA,IDrBIrC,EAAAA,WCqBWS","file":"System/Threading/Tasks/TaskHandlerBase.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", \"../../Disposable/DisposableBase\", \"../../../extends\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    var DisposableBase_1 = require(\"../../Disposable/DisposableBase\");\n    var extends_1 = require(\"../../../extends\");\n    var __extends = extends_1.default;\n    var TaskHandlerBase = (function (_super) {\n        __extends(TaskHandlerBase, _super);\n        function TaskHandlerBase() {\n            _super.call(this);\n            this._timeoutId = null;\n            this._status = 0;\n        }\n        Object.defineProperty(TaskHandlerBase.prototype, \"isScheduled\", {\n            get: function () {\n                return !!this._timeoutId;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        TaskHandlerBase.prototype.start = function (defer) {\n            this.throwIfDisposed();\n            this.cancel();\n            this._status = 1;\n            if (!(defer > 0))\n                defer = 0;\n            if (isFinite(defer))\n                this._timeoutId = setTimeout(TaskHandlerBase._handler, defer, this);\n        };\n        TaskHandlerBase.prototype.runSynchronously = function () {\n            this.throwIfDisposed();\n            TaskHandlerBase._handler(this);\n        };\n        TaskHandlerBase.prototype.getStatus = function () {\n            return this._status;\n        };\n        Object.defineProperty(TaskHandlerBase.prototype, \"status\", {\n            get: function () {\n                return this.getStatus();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        TaskHandlerBase._handler = function (d) {\n            d.cancel();\n            d._status = 2;\n            try {\n                d._onExecute();\n                d._status = 3;\n            }\n            catch (ex) {\n                d._status = 5;\n            }\n        };\n        TaskHandlerBase.prototype._onDispose = function () {\n            this.cancel();\n            this._status = null;\n        };\n        TaskHandlerBase.prototype.cancel = function () {\n            var id = this._timeoutId;\n            if (id) {\n                clearTimeout(id);\n                this._timeoutId = null;\n                this._status = 4;\n                return true;\n            }\n            return false;\n        };\n        return TaskHandlerBase;\n    }(DisposableBase_1.DisposableBase));\n    exports.TaskHandlerBase = TaskHandlerBase;\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = TaskHandlerBase;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {DisposableBase} from \"../../Disposable/DisposableBase\";\r\nimport {ICancellable} from \"../ICancellable\";\r\nimport {TaskStatus} from \"./TaskStatus\";\r\nimport __extendsImport from \"../../../extends\";\r\nconst __extends = __extendsImport;\r\n\r\n/**\r\n * A simple class for handling potentially repeated executions either deferred or immediate.\r\n */\r\nexport abstract class TaskHandlerBase extends DisposableBase implements ICancellable\r\n{\r\n\tprivate _status:TaskStatus;\r\n\r\n\tconstructor()\r\n\t{\r\n\t\tsuper();\r\n\t\tthis._timeoutId = null;\r\n\t\tthis._status = TaskStatus.Created\r\n\t}\r\n\r\n\tprivate _timeoutId:any;\r\n\r\n\tget isScheduled():boolean\r\n\t{\r\n\t\treturn !!this._timeoutId;\r\n\t}\r\n\r\n\t/**\r\n\t * Schedules/Reschedules triggering the task.\r\n\t * @param defer Optional time to wait until triggering.\r\n\t */\r\n\tstart(defer?:number):void\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tthis.cancel();\r\n\t\tthis._status = TaskStatus.WaitingToRun;\r\n\t\tif(!(defer>0)) defer = 0;\r\n\t\tif(isFinite(defer))\r\n\t\t\tthis._timeoutId = setTimeout(TaskHandlerBase._handler, defer, this);\r\n\t}\r\n\r\n\trunSynchronously():void\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\tTaskHandlerBase._handler(this);\r\n\t}\r\n\r\n\tprotected getStatus():TaskStatus\r\n\t{\r\n\t\treturn this._status;\r\n\t}\r\n\r\n\tget status():TaskStatus\r\n\t{\r\n\t\treturn this.getStatus();\r\n\t}\r\n\r\n\t// Use a static function here to avoid recreating a new function every time.\r\n\tprivate static _handler(d:TaskHandlerBase):void\r\n\t{\r\n\t\td.cancel();\r\n\t\td._status = TaskStatus.Running;\r\n\t\ttry\r\n\t\t{\r\n\t\t\td._onExecute();\r\n\t\t\td._status = TaskStatus.RanToCompletion;\r\n\t\t}\r\n\t\tcatch(ex)\r\n\t\t{\r\n\t\t\td._status = TaskStatus.Faulted;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected abstract _onExecute():void;\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tthis.cancel();\r\n\t\tthis._status = null;\r\n\t}\r\n\r\n\tcancel():boolean\r\n\t{\r\n\t\tvar id = this._timeoutId;\r\n\t\tif(id)\r\n\t\t{\r\n\t\t\tclearTimeout(id);\r\n\t\t\tthis._timeoutId = null;\r\n\t\t\tthis._status = TaskStatus.Cancelled;\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\r\n}\r\n\r\nexport default TaskHandlerBase;"]}