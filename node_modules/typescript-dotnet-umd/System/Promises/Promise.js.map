{"version":3,"sources":["System/Promises/Promise.js","System/Promises/Promise.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","isPromise","value","Types_1","hasMemberOfType","THEN","FUNCTION","resolve","resolver","promiseFactory","nextValue","Promise","wrap","handleResolution","p","ex","reject","handleResolutionMethods","targetFulfill","targetReject","handleDispatch","onFulfilled","onRejected","PromiseBase","thenThis","then","handleSyncIfPossible","thenSynchronous","newODE","ObjectDisposedException_1","ObjectDisposedException","deferImmediate_1","DisposableBase_1","InvalidOperationException_1","ArgumentException_1","ArgumentNullException_1","ObjectPool_1","Set_1","defer_1","extends_1","__extends","VOID0","PROMISE","PROMISE_STATE","TARGET","PromiseState","_super","_state","_result","_error","call","this","_disposableObjectName","prototype","_onDispose","getState","Object","defineProperty","get","enumerable","configurable","State","Pending","Fulfilled","Rejected","getResult","throwIfDisposed","getError","DisposableBase","_this","result","error","thenAllowFatal","done","defer","delayFromNow","milliseconds","e","delayAfterResolve","isSettled","catchAllowFatal","fin","finallyAllowFatal","finallyThis","synchronous","f","deferImmediate","Resolvable","apply","arguments","state","Error","Resolved","PromiseWrapper","_target","ArgumentNullException","ArgumentException","t","forceSynchronous","resolveUsing","_waiting","push","pools","PromiseCallbacks","init","_resolvedCalled","throwIfSettled","InvalidOperationException","rejectHandler","reason","console","warn","fulfillHandler","_emitDisposalRejection","d","wasDisposed","_rejectInternal","_resolveInternal","r","o","_i","o_1","length","c","promise","recycle","o_2","ArrayPromise","map","transform","reduce","reduction","initialValue","fulfilled","PromiseCollection","source","_source","slice","all","race","waitAll","pipe","previous","current","i","array","getPool","pool","ObjectPool","take","add","group","first","rest","Array","isArray","concat","promises","every","len","remaining","Set","cleanup","dispose","checkIfShouldResolve","count","onFulfill","remove","onReject","_loop_1","onResolved","_loop_2","filter","onResolve","promises_1","p_1","using","resolveAll","j","target","createFrom","freeze"],"mappings":";;;;;;CAMA,SAAWA,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QAAoBG,UAANF,IAAiBF,OAAOC,QAAUC,OAElD,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,UAAW,WAAY,8BAA+B,+BAAgC,0CAA2C,kCAAmC,sCAAuC,2BAA4B,qBAAsB,qBAAsB,wCAAyC,iBAAkBN,IAEtW,SAAUI,EAASF,GAClB,YCeJ,SAAAM,GAAsBC,GAErB,MAAOC,GAAAA,WAAKC,gBAAgBF,EAAOG,EAAMF,EAAAA,WAAKG,UAG/C,QAAAC,GACCL,EAA6BM,EAC7BC,GAEA,GAAIC,GAAYF,EACbA,EAASN,GACTA,CAEH,OAAOQ,IAAaT,EAAUS,GAC3BC,EAAQC,KAAKF,GACbD,EAAeC,GAGnB,QAAAG,GACCC,EACAZ,EACAM,GAEA,IAEC,GAAIZ,GAAIY,EAAWA,EAASN,GAASA,CAErC,OADGY,IAAGA,EAAEP,QAAQX,GACT,KAER,MAAMmB,GAGL,MADGD,IAAGA,EAAEE,OAAOD,GACRA,GAIT,QAAAE,GACCC,EACAC,EACAjB,EACAM,GAEA,IAEC,GAAIZ,GAAIY,EAAWA,EAASN,GAASA,CAClCgB,IAAeA,EAActB,GAEjC,MAAMmB,GACDI,GAAcA,EAAaJ,IAGjC,QAAAK,GACCN,EACAO,EACAC,GAEGR,YAAaS,GACfT,EAAEU,SAASH,EAAaC,GAExBR,EAAEW,KAAUJ,EAAaC,GAG3B,QAAAI,GACCZ,EACAO,EACAC,GAEA,MAAGR,aAAaS,GACRT,EAAEa,gBAAgBN,EAAaC,GAE/BR,EAAEW,KAAUJ,EAAaC,GAGlC,QAAAM,KAEC,MAAO,IAAIC,GAAAC,wBAAwB,UAAW,8CA3F/C,GAAA3B,GAAAN,EAAiB,YACjBkC,EAAAlC,EAA6B,+BAC7BmC,EAAAnC,EAA6B,gCAC7BoC,EAAApC,EAAwC,2CACxCqC,EAAArC,EAAgC,mCAChCsC,EAAAtC,EAAoC,uCACpCuC,EAAAvC,EAAyB,4BACzBwC,EAAAxC,EAAkB,sBAClByC,EAAAzC,EAAoB,sBACpBgC,EAAAhC,EAAsC,yCACtC0C,EAAA1C,EAA4B,iBAEtB2C,EAAYD,EAAAA,WAEZE,EAAY,OAAQC,EAAU,UAAWC,EAAgBD,EAAU,QAASrC,EAAO,OAAQuC,EAAS,SAgF1GC,EAAA,SAAAC,GAIC,QAAAD,GACWE,EACAC,EACAC,GAEVH,EAAAI,KAAAC,MAJUA,KAAAJ,OAAAA,EACAI,KAAAH,QAAAA,EACAG,KAAAF,OAAAA,EAGVE,KAAKC,sBAAwBT,EAiE/B,MA1EQH,GAAAK,EAAAC,GAYGD,EAAAQ,UAAAC,WAAV,WAECH,KAAKJ,OAASN,EACdU,KAAKH,QAAUP,EACfU,KAAKF,OAASR,GAGLI,EAAAQ,UAAAE,SAAV,WAEC,MAAOJ,MAAKJ,QAGbS,OAAAC,eAAIZ,EAAAQ,UAAA,SDpCOK,ICoCX,WAEC,MAAOP,MAAKJ,QDnCFY,YAAY,EACZC,cAAc,ICqCzBJ,OAAAC,eAAIZ,EAAAQ,UAAA,aDlCOK,ICkCX,WAEC,MAAOP,MAAKI,aAAa5C,EAAQkD,MAAMC,SDjC7BH,YAAY,EACZC,cAAc,ICmCzBJ,OAAAC,eAAIZ,EAAAQ,UAAA,aDhCOK,ICgCX,WAEC,MAAOP,MAAKI,YAAY5C,EAAQkD,MAAMC,SD/B5BH,YAAY,EACZC,cAAc,ICiCzBJ,OAAAC,eAAIZ,EAAAQ,UAAA,eD9BOK,IC8BX,WAEC,MAAOP,MAAKI,aAAa5C,EAAQkD,MAAME,WD7B7BJ,YAAY,EACZC,cAAc,IC+BzBJ,OAAAC,eAAIZ,EAAAQ,UAAA,cD5BOK,IC4BX,WAEC,MAAOP,MAAKI,aAAa5C,EAAQkD,MAAMG,UD3B7BL,YAAY,EACZC,cAAc,ICgCff,EAAAQ,UAAAY,UAAV,WAEC,MAAOd,MAAKH,SAGbQ,OAAAC,eAAIZ,EAAAQ,UAAA,UD/BOK,IC+BX,WAGC,MADAP,MAAKe,kBACEf,KAAKc,aD9BFN,YAAY,EACZC,cAAc,ICgCff,EAAAQ,UAAAc,SAAV,WAEC,MAAOhB,MAAKF,QAGbO,OAAAC,eAAIZ,EAAAQ,UAAA,SD/BOK,IC+BX,WAGC,MADAP,MAAKe,kBACEf,KAAKgB,YD9BFR,YAAY,EACZC,cAAc,ICgC1Bf,GA1EQb,EAAAoC,eADKzE,GAAAkD,aAAYA,CA6EzB,IAAAtB,GAAA,SAAAuB,GAGC,QAAAvB,KAECuB,EAAAI,KAAAC,KAAMxC,EAAQkD,MAAMC,SACpBX,KAAKC,sBAAwBV,EA0L/B,MA/LQF,GAAAjB,EAAAuB,GAkCPvB,EAAA8B,UAAA5B,KAAA,SACCJ,EACAC,GAFD,GAAA+C,GAAAlB,IAMC,OAFAA,MAAKe,kBAEE,GAAIvD,GAAiB,SAACJ,EAASS,GAErCqD,EAAK7C,SACJ,SAAA8C,GACC,MAAArD,GAAwBV,EAASS,EAAQsD,EAAQjD,IAClD,SAAAkD,GACC,MAAAjD,GACGL,EAAwBV,EAASS,EAAQuD,EAAOjD,GAChDN,EAAOuD,QAWdhD,EAAA8B,UAAAmB,eAAA,SACCnD,EACAC,GAFD,GAAA+C,GAAAlB,IAMC,OAFAA,MAAKe,kBAEE,GAAIvD,GAAiB,SAACJ,EAASS,GAErCqD,EAAK7C,SACJ,SAAA8C,GACC,MAAA/D,GAAcc,EAAcA,EAAYiD,GAAUA,IACnD,SAAAC,GACC,MAAAvD,GAAOM,EAAaA,EAAWiD,GAASA,QAW5ChD,EAAA8B,UAAAoB,KAAA,SACCpD,EACAC,GAFD,GAAA+C,GAAAlB,IAICb,GAAAoC,MAAM,WACL,MAAAL,GAAK7C,SAASH,EAAaC,MAQ7BC,EAAA8B,UAAAsB,aAAA,SAAaC,GAAb,GAAAP,GAAAlB,IAIC,OAJY,UAAAyB,IAAAA,EAAA,GAEZzB,KAAKe,kBAEE,GAAIvD,GACV,SAACJ,EAASS,GAETsB,EAAAoC,MAAM,WAELL,EAAK7C,SACJ,SAAA5B,GAAI,MAAAW,GAAQX,IACZ,SAAAiF,GAAI,MAAA7D,GAAO6D,MACVD,KAEJ,IAUFrD,EAAA8B,UAAAyB,kBAAA,SAAkBF,GAAlB,GAAAP,GAAAlB,IAIC,OAJiB,UAAAyB,IAAAA,EAAA,GAEjBzB,KAAKe,kBAEFf,KAAK4B,UAAkB5B,KAAKwB,aAAaC,GAErC,GAAIjE,GACV,SAACJ,EAASS,GAETqD,EAAK7C,SACJ,SAAA5B,GAAG,MAAA0C,GAAAoC,MAAM,WAAI,MAAAnE,GAAQX,IAAIgF,IACzB,SAAAC,GAAG,MAAAvC,GAAAoC,MAAM,WAAI,MAAA1D,GAAO6D,IAAID,OAE1B,IASFrD,EAAA8B,UAAA,SAAA,SAAiB/B,GAEhB,MAAO6B,MAAK1B,KAAKgB,EAAOnB,IAQzBC,EAAA8B,UAAA2B,gBAAA,SAAyB1D,GAExB,MAAO6B,MAAKqB,eAAe/B,EAAOnB,IAQnCC,EAAA8B,UAAA,WAAA,SAAmB4B,GAElB,MAAO9B,MAAK1B,KAAKwD,EAAKA,IAQvB1D,EAAA8B,UAAA6B,kBAAA,SAA2BD,GAE1B,MAAO9B,MAAKqB,eAAeS,EAAKA,IAUjC1D,EAAA8B,UAAA8B,YAAA,SAAYF,EAAcG,GAEzBjC,KAAKe,iBACL,IAAImB,GAAaD,EAAcC,EAAI,WAAI,MAAAtD,GAAAuD,eAAeL,GAEtD,OADA9B,MAAK3B,SAAS6D,EAAGA,GACVlC,MAGT5B,GA/LQsB,EADclD,GAAA4B,YAAWA,CAkMjC,IAAAgE,GAAA,SAAAzC,GAAA,QAAAyC,KAA4CzC,EAAA0C,MAAArC,KAAAsC,WAkD5C,MAlD4CjD,GAAA+C,EAAAzC,GAG3CyC,EAAAlC,UAAA1B,gBAAA,SACCN,EACAC,GAEA6B,KAAKe,iBAEL,KAEC,OAAOf,KAAKuC,OAEX,IAAK/E,GAAQkD,MAAME,UAClB,MAAO1C,GACJd,EAAQ4C,KAAKH,QAAS3B,EAAaV,EAAQJ,SACtC4C,IACT,KAAKxC,GAAQkD,MAAMG,SAClB,MAAO1C,GACJf,EAAQ4C,KAAKF,OAAQ3B,EAAYX,EAAQJ,SACpC4C,MAGX,MAAMpC,GAEL,MAAO,IAAIiD,GAAcjD,GAG1B,KAAM,IAAI4E,OAAM,0CAGjBJ,EAAAlC,UAAA7B,SAAA,SACCH,EACAC,GAIA,OAFA6B,KAAKe,kBAEEf,KAAKuC,OAEX,IAAK/E,GAAQkD,MAAME,UACf1C,GAAaA,EAAY8B,KAAKH,QACjC,MACD,KAAKrC,GAAQkD,MAAMG,SACf1C,GAAYA,EAAW6B,KAAKF,QAIjC,MAAOE,OAGToC,GAlD4ChE,EAAtB5B,GAAA4F,WAAUA,CAuDhC,IAAAK,GAAA,SAAA9C,GAEC,QAAA8C,GAAYF,EAAqBpB,EAAUC,GAE1CzB,EAAAI,KAAAC,MACAA,KAAKH,QAAUsB,EACfnB,KAAKF,OAASsB,EACdpB,KAAKJ,OAAS2C,EAIhB,MAX0ClD,GAAAoD,EAAA9C,GAW1C8C,GAX0CL,EAApB5F,GAAAiG,SAAQA,CAgB9B,IAAA7B,GAAA,SAAAjB,GAEC,QAAAiB,GAAY7D,GAEX4C,EAAAI,KAAAC,KAAMxC,EAAQkD,MAAME,UAAW7D,GAEjC,MANkCsC,GAAAuB,EAAAjB,GAMlCiB,GANkC6B,EAArBjG,GAAAoE,UAASA,CAWtB,IAAAC,GAAA,SAAAlB,GAEC,QAAAkB,GAAYO,GAEXzB,EAAAI,KAAAC,KAAMxC,EAAQkD,MAAMG,SAAUvB,EAAO8B,GAEvC,MANiC/B,GAAAwB,EAAAlB,GAMjCkB,GANiC4B,EAApBjG,GAAAqE,SAAQA,CAYrB,IAAA6B,GAAA,SAAA/C,GAEC,QAAA+C,GAAoBC,GAFrB,GAAAzB,GAAAlB,IAME,IAFAL,EAAAI,KAAAC,MAFmBA,KAAA2C,QAAAA,GAIfA,EACH,KAAM,IAAI3D,GAAA4D,sBAAsBnD,EAEjC,KAAI3C,EAAU6F,GACb,KAAM,IAAI5D,GAAA8D,kBAAkBpD,EAAQ,iCAErCkD,GAAQrE,KACP,SAAA7B,GAECyE,EAAKtB,OAASpC,EAAQkD,MAAME,UAC5BM,EAAKrB,QAAUpD,EACfyE,EAAKpB,OAASR,EACd4B,EAAKyB,QAAUrD,GAEhB,SAAAoC,GAECR,EAAKtB,OAASpC,EAAQkD,MAAMG,SAC5BK,EAAKpB,OAAS4B,EACdR,EAAKyB,QAAUrD,IA2CnB,MAnEgCD,GAAAqD,EAAA/C,GA4B/B+C,EAAAxC,UAAA1B,gBAAA,SACCN,EACAC,GAEA6B,KAAKe,iBAEL,IAAI+B,GAAI9C,KAAK2C,OACb,OAAIG,GAEG,GAAItF,GAAiB,SAACJ,EAASS,GAErCI,EAAe6E,EACd,SAAA3B,GAAQ,MAAArD,GAAwBV,EAASS,EAAQsD,EAAQjD,IACzD,SAAAkD,GAAO,MAAAjD,GACJL,EAAwBV,EAAS,KAAMgE,EAAOjD,GAC9CN,EAAOuD,OAET,GAVWzB,EAAAO,UAAM1B,gBAAeuB,KAAAC,KAAC9B,EAAaC,IAclDuE,EAAAxC,UAAA7B,SAAA,SACCH,EACAC,GAEA6B,KAAKe,iBAEL,IAAI+B,GAAI9C,KAAK2C,OACb,OAAIG,IACJ7E,EAAe6E,EAAG5E,EAAaC,GACxB6B,MAFYL,EAAAO,UAAM7B,SAAQ0B,KAAAC,KAAC9B,EAAaC,IAKtCuE,EAAAxC,UAAAC,WAAV,WAECR,EAAAO,UAAMC,WAAUJ,KAAAC,MAChBA,KAAK2C,QAAUrD,GAGjBoD,GAnEgCN,GAyEhC5E,EAAA,SAAAmC,GAeC,QAAAnC,GACCH,EAA+B0F,GAAA,SAAAA,IAAAA,GAAA,GAE/BpD,EAAAI,KAAAC,MAEG3C,GAAU2C,KAAKgD,aAAa3F,EAAU0F,GA+O3C,MAnQgC1D,GAAA7B,EAAAmC,GAwB/BnC,EAAA0C,UAAA1B,gBAAA,SACCN,EACAC,GAKA,GAHA6B,KAAKe,kBAGFf,KAAKJ,OAAQ,MAAOD,GAAAO,UAAM1B,gBAAeuB,KAAAC,KAAC9B,EAAaC,EAE1D,IAAIR,GAAI,GAAIH,EAGZ,QAFCwC,KAAKiD,WAAajD,KAAKiD,cACtBC,KAAKC,EAAMC,iBAAiBC,KAAKnF,EAAaC,EAAYR,IACrDA,GAGRH,EAAA0C,UAAA7B,SAAA,SACCH,EACAC,GAKA,MAHA6B,MAAKe,kBAGFf,KAAKJ,OACKD,EAAAO,UAAM7B,SAAQ0B,KAAAC,KAAC9B,EAAaC,KAExC6B,KAAKiD,WAAajD,KAAKiD,cACtBC,KAAKC,EAAMC,iBAAiBC,KAAKnF,EAAaC,IAEzC6B,OAIExC,EAAA0C,UAAAC,WAAV,WAECR,EAAAO,UAAMC,WAAUJ,KAAAC,MAChBA,KAAKsD,gBAAkBhE,GAMxB9B,EAAA0C,UAAA8C,aAAA,SACC3F,EACA0F,EACAQ,GAHD,GAAArC,GAAAlB,IAKC,IAHA,SAAA+C,IAAAA,GAAA,GACA,SAAAQ,IAAAA,GAAA,IAEIlG,EACH,KAAM,IAAI2B,GAAA4D,sBAAsB,WACjC,IAAG5C,KAAKsD,gBACP,KAAM,IAAIxE,GAAA0E,0BAA0B,6BACrC,IAAGxD,KAAKuC,MACP,KAAM,IAAIzD,GAAA0E,0BAA0B,qBAAuBhG,EAAQkD,MAAMV,KAAKuC,OAE/EvC,MAAKsD,iBAAkB,CAEvB,IAAIf,GAAQ,EACRkB,EAAgB,SAACC,GAEjBnB,EAGFoB,QAAQC,KAAa,IAARrB,EACV,kCACA,sCAIHA,EAAQ,GACRrB,EAAKoC,iBAAkB,EACvBpC,EAAKrD,OAAO6F,KAIVG,EAAiB,SAACpH,GAElB8F,EAGFoB,QAAQC,KAAY,GAAPrB,EACV,gCACA,oCAIHA,EAAQ,EACRrB,EAAKoC,iBAAkB,EACvBpC,EAAK9D,QAAQX,IAKZsG,GACF1F,EAASwG,EAAgBJ,GAEzB7E,EAAAuD,eAAe,WAAI,MAAA9E,GAASwG,EAAgBJ,MAKtCjG,EAAA0C,UAAA4D,uBAAR,SAA+BnG,GAE9B,GAAIoG,GAAIpG,EAAEqG,WAEV,OADGD,IAAG/D,KAAKiE,gBAAgBxF,KACpBsF,GAGAvG,EAAA0C,UAAAgE,iBAAR,SAAyB/C,GAAzB,GAAAD,GAAAlB,IAEC,KAAGA,KAAKgE,YAAR,CAKA,KAAM7C,YAAkB/C,IACxB,CACC,GAAI+F,GAAwBhD,CAC5B,IAAGnB,KAAK8D,uBAAuBK,GAAI,MACnC,QAAOA,EAAE5B,OAER,IAAK/E,GAAQkD,MAAMC,QAKlB,WAJAwD,GAAE3F,gBACD,SAAA/B,GAAG,MAAAyE,GAAKgD,iBAAiBzH,IACzB,SAAAiF,GAAG,MAAAR,GAAK+C,gBAAgBvC,IAG1B,KAAKlE,GAAQkD,MAAMG,SAElB,WADAb,MAAKiE,gBAAgBE,EAAE/C,MAExB,KAAK5D,GAAQkD,MAAME,UAClBO,EAASgD,EAAEhD,QAKd,GAAGrE,EAAUqE,GAEZA,EAAO7C,KACN,SAAA7B,GAAG,MAAAyE,GAAKgD,iBAAiBzH,IACzB,SAAAiF,GAAG,MAAAR,GAAK+C,gBAAgBvC,SAI1B,CACC1B,KAAKJ,OAASpC,EAAQkD,MAAME,UAE5BZ,KAAKH,QAAUsB,EACfnB,KAAKF,OAASR,CACd,IAAI8E,GAAIpE,KAAKiD,QACb,IAAGmB,EACH,CACCpE,KAAKiD,SAAW3D,CAChB,KAAa,GAAA+E,GAAA,EAAAC,EAAAF,EAAAC,EAAAC,EAAAC,OAAAF,IAAE,CAAX,GAAIG,GAACF,EAAAD,GAEHnG,EAAAsG,EAAAtG,YAAauG,EAAAD,EAAAC,OAClBtB,GAAMC,iBAAiBsB,QAAQF,GAE/B9G,EAAiB+G,EAAStD,EAAQjD,GAGnCkG,EAAEG,OAAS,MAKN/G,EAAA0C,UAAA+D,gBAAR,SAAwB7C,GAGvB,IAAGpB,KAAKgE,YAAR,CAEAhE,KAAKJ,OAASpC,EAAQkD,MAAMG,SAE5Bb,KAAKF,OAASsB,CACd,IAAIgD,GAAIpE,KAAKiD,QACb,IAAGmB,EACH,CACCpE,KAAKiD,SAAW,IAChB,KAAa,GAAAoB,GAAA,EAAAM,EAAAP,EAAAC,EAAAM,EAAAJ,OAAAF,IAAE,CAAX,GAAIG,GAACG,EAAAN,GAEHlG,EAAAqG,EAAArG,WAAYsG,EAAAD,EAAAC,OACjBtB,GAAMC,iBAAiBsB,QAAQF,GAC5BrG,EAGFT,EAAiB+G,EAASrD,EAAOjD,GAG1BsG,GAASA,EAAQ5G,OAAOuD,GAEjCgD,EAAEG,OAAS,KAIb/G,EAAA0C,UAAA9C,QAAA,SAAQ+D,EAA4BoC,GAGnC,GAHmC,SAAAA,IAAAA,GAAA,GAEnCvD,KAAKe,kBACGI,GAAQnB,KACf,KAAM,IAAIlB,GAAA0E,0BAA0B,sCAErC,IAAGxD,KAAKJ,OACR,CAEC,IAAI2D,GAAkBvD,KAAKJ,QAAQpC,EAAQkD,MAAME,WAAaZ,KAAKH,UAAUsB,EAAQ,MACrF,MAAM,IAAIrC,GAAA0E,0BAA0B,qEAGrC,GAAGxD,KAAKsD,iBAEP,GAAGC,EACF,KAAM,IAAIzE,GAAA0E,0BAA0B,kCAItCxD,MAAKkE,iBAAiB/C,IAIvB3D,EAAA0C,UAAArC,OAAA,SAAOuD,EAAWmC,GAGjB,GAHiB,SAAAA,IAAAA,GAAA,GAEjBvD,KAAKe,kBACFf,KAAKJ,OACR,CAEC,IAAI2D,GAAkBvD,KAAKJ,QAAQpC,EAAQkD,MAAMG,UAAYb,KAAKF,SAASsB,EAAO,MAClF,MAAM,IAAItC,GAAA0E,0BAA0B,oEAGrC,GAAGxD,KAAKsD,iBAEP,GAAGC,EACF,KAAM,IAAIzE,GAAA0E,0BAA0B,kCAItCxD,MAAKiE,gBAAgB7C,IAEvB5D,GAnQgC4E,EAAnB5F,GAAAgB,QAAOA,CAyQpB,IAAAoH,GAAA,SAAAjF,GAAA,QAAAiF,KAAqCjF,EAAA0C,MAAArC,KAAAsC,WAoCrC,MApCqCjD,GAAAuF,EAAAjF,GAQpCiF,EAAA1E,UAAA2E,IAAA,SAAOC,GAAP,GAAA5D,GAAAlB,IAGC,OADAA,MAAKe,kBACE,GAAI6D,GAAgB,SAAAxH,GAE1B8D,EAAK7C,SAAS,SAAC8C,GAAa,MAAA/D,GAAQ+D,EAAO0D,IAAIC,QAC7C,IASJF,EAAA1E,UAAA6E,OAAA,SACCC,EACAC,GAGA,MAAOjF,MACLxB,gBAAgB,SAAC2C,GAAa,MAAAA,GAAO4D,OAAOC,EAAWC,MAGnDL,EAAAM,UAAP,SAAoBnI,GAEnB,MAAO,IAAI6H,GAAgB,SAAAxH,GAAS,MAAAL,KAAO,IAE7C6H,GApCqCpH,EAAxBhB,GAAAoI,aAAYA,CAyCzB,IAAAO,GAAA,SAAAxF,GAIC,QAAAwF,GAAYC,GAEXzF,EAAAI,KAAAC,MACAA,KAAKqF,QAAUD,GAAUA,EAAOE,YA0GlC,MAjH0CjG,GAAA8F,EAAAxF,GAU/BwF,EAAAjF,UAAAC,WAAV,WAECR,EAAAO,UAAMC,WAAUJ,KAAAC,MAChBA,KAAKqF,QAAQd,OAAS,EACtBvE,KAAKqF,QAAU,MAOhBhF,OAAAC,eAAI6E,EAAAjF,UAAA,YDhUOK,ICgUX,WAGC,MADAP,MAAKe,kBACEf,KAAKqF,QAAQC,SD/TV9E,YAAY,EACZC,cAAc,ICqUzB0E,EAAAjF,UAAAqF,IAAA,WAGC,MADAvF,MAAKe,kBACEvD,EAAQ+H,IAAIvF,KAAKqF,UAQzBF,EAAAjF,UAAAsF,KAAA,WAGC,MADAxF,MAAKe,kBACEvD,EAAQgI,KAAKxF,KAAKqF,UAQ1BF,EAAAjF,UAAAuF,QAAA,WAGC,MADAzF,MAAKe,kBACEvD,EAAQiI,QAAQzF,KAAKqF,UAQ7BF,EAAAjF,UAAA2E,IAAA,SAAOC,GAAP,GAAA5D,GAAAlB,IAGC,OADAA,MAAKe,kBACE,GAAI6D,GAAgB,SAAAxH,GAE1B8D,EAAKqE,MACHlH,SAAS,SAAC8C,GAAa,MAAA/D,GAAQ+D,EAAO0D,IAAIC,QAC1C,IAUJK,EAAAjF,UAAAwF,KAAA,SAAQZ,GAGP,MADA9E,MAAKe,kBACE,GAAIoE,GAAqBnF,KAAKqF,QAAQR,IAAI,SAAAlH,GAAG,MAAAY,GAAqBZ,EAAGmH,OAU7EK,EAAAjF,UAAA6E,OAAA,SACCC,EACAC,GAGA,MADAjF,MAAKe,kBACEvD,EAAQC,KAAKuC,KAAKqF,QACvBN,OACA,SACCY,EACAC,EACAC,EACAC,GACA,MAAAvH,GAAqBoH,EACpB,SAAAhI,GAAG,MAAAY,GAAqBqH,EAAS,SAAApB,GAAG,MAAAQ,GAAUrH,EAAG6G,EAAGqB,EAAGC,QAEzDhJ,EAAUmI,GACPA,EACA,GAAIrE,GAAUqE,MAErBE,GAjH0CtG,EAAAoC,eAA7BzE,GAAA2I,kBAAiBA,CAmH9B,IAAOhC,IAAP,SAAOA,GA0CN,GAAcC,IAAd,SAAcA,GAKb,QAAA2C,KAEC,MAAOC,KACFA,EAAO,GAAI/G,GAAAgH,WAAmC,GAAI3J,EAAS,SAAAkI,GAE9DA,EAAEtG,YAAc,KAChBsG,EAAErG,WAAa,KACfqG,EAAEC,QAAU,QAIf,QAAAnI,KAEC,OACC4B,YAAa,KACbC,WAAY,KACZsG,QAAS,MAIX,QAAApB,GACCnF,EACAC,EACAsG,GAGA,GAAID,GAAIuB,IAAUG,MAIlB,OAHA1B,GAAEtG,YAAcA,EAChBsG,EAAErG,WAAaA,EACfqG,EAAEC,QAAUA,EACLD,EAGR,QAAAE,GAA2BF,GAE1BuB,IAAUI,IAAI3B,GArCf,GAAIwB,EAsBY5C,GAAAC,KAAIA,EAaJD,EAAAsB,QAAOA,GAtCVtB,EAAAD,EAAAC,mBAAAD,EAAAC,uBA1CRD,IAAAA,MA0FP,IAAc3F,IAAd,SAAcA,GA+Cb,QAAAlB,GAA2BoF,GAE1B,MAAO,IAAIlE,GAAQkE,GAWpB,QAAA0E,GACCC,GDzdU,IC0dV,GAAAC,MAAAjC,EAAA,EAAAA,EAAA/B,UAAAiC,OAAAF,IAAAiC,EAAAjC,EAAA,GAAA/B,UAAA+B,EAGA,KAAIgC,IAAUC,EAAK/B,OAAQ,KAAM,IAAIvF,GAAA4D,sBAAsB,WAC3D,OAAO,IAAIuC,IAAmBoB,MAAMC,QAAQH,GAASA,GAASA,IAAQI,OAAOH,IAQ9E,QAAAf,GACCc,GD7dU,IC8dV,GAAAC,MAAAjC,EAAA,EAAAA,EAAA/B,UAAAiC,OAAAF,IAAAiC,EAAAjC,EAAA,GAAA/B,UAAA+B,EAEA,KAAIgC,IAAUC,EAAK/B,OAAQ,KAAM,IAAIvF,GAAA4D,sBAAsB,WAC3D,IAAI8D,IAAYH,MAAMC,QAAQH,GAASA,GAASA,IAAQI,OAAOH,EAC/D,QAAII,EAASnC,QAAUmC,EAASC,MAAM,SAAAlK,GAAG,OAACA,IAAW,GAAImI,GACxD,SAAAT,GAAG,MAAAA,GAAEuC,KAAW,GAGV,GAAI9B,GAAkB,SAACxH,EAASS,GAEtC,GAAIsD,MACAyF,EAAMF,EAASnC,MACnBpD,GAAOoD,OAASqC,CA4ChB,KAAI,GA1CAC,GAAY,GAAI3H,GAAA4H,IAAIJ,EAAS7B,IAAI,SAACpI,EAAGoJ,GAAI,MAAAA,MAEzCkB,EAAU,WAEblJ,EAAS,KACTT,EAAU,KACVsJ,EAASnC,OAAS,EAClBmC,EAAW,KACXG,EAAUG,UACVH,EAAY,MAGTI,EAAuB,WAE1B,GAAI9C,GAAI/G,CACL+G,KAAM0C,EAAUK,QAElBH,IACA5C,EAAEhD,KAIAgG,EAAY,SAAC1K,EAAOoJ,GAEpBzI,IAEF+D,EAAO0E,GAAKpJ,EACZoK,EAAUO,OAAOvB,GACjBoB,MAIEI,EAAW,SAAC3F,GAEf,GAAIyC,GAAItG,CACLsG,KAEF4C,IACA5C,EAAEzC,KAIJ4F,EAAA,SAAAzB,GAEC,GAAIlI,GAAI+I,EAASb,EACdlI,GAAGA,EAAEW,KAAK,SAAA7B,GAAG,MAAA0K,GAAU1K,EAAGoJ,IAAIwB,GAC5BR,EAAUO,OAAOvB,GACtBoB,KALOpB,EAAI,EAAGgB,GAAeD,EAAFf,EAAOA,IDnelByB,EAAQzB,KCqf3B,QAAAJ,GACCY,GD/eU,ICgfV,GAAAC,MAAAjC,EAAA,EAAAA,EAAA/B,UAAAiC,OAAAF,IAAAiC,EAAAjC,EAAA,GAAA/B,UAAA+B,EAEA,KAAIgC,IAAUC,EAAK/B,OAAQ,KAAM,IAAIvF,GAAA4D,sBAAsB,WAC3D,IAAI8D,IAAYH,MAAMC,QAAQH,GAASA,GAASA,IAAQI,OAAOH,EAC/D,QAAII,EAASnC,QAAUmC,EAASC,MAAM,SAAAlK,GAAG,OAACA,IAAW,GAAImI,GACxD,SAAAT,GAAG,MAAAA,GAAEuC,KAAW,GAIV,GAAI9B,GAAkB,SAACxH,EAASS,GAkCtC,IAAI,GAhCA+I,GAAMF,EAASnC,OAGfsC,EAAY,GAAI3H,GAAA4H,IAAIJ,EAAS7B,IAAI,SAACpI,EAAGoJ,GAAI,MAAAA,MAEzCkB,EAAU,WAEblJ,EAAS,KACTT,EAAU,KACVyJ,EAAUG,UACVH,EAAY,MAGTI,EAAuB,WAE1B,GAAI9C,GAAI/G,CACL+G,KAAM0C,EAAUK,QAElBH,IACA5C,EAAEuC,KAIAa,EAAa,SAAC1B,GAEdgB,IAEFA,EAAUO,OAAOvB,GACjBoB,MAIFO,EAAA,SAAA3B,GAEC,GAAIlI,GAAI+I,EAASb,EACdlI,GAAGA,EAAEW,KAAK,SAAA7B,GAAG,MAAA8K,GAAW1B,IAAI,SAAAnE,GAAG,MAAA6F,GAAW1B,KACxC0B,EAAW1B,IAJTA,EAAI,EAAGgB,GAAeD,EAAFf,EAAOA,IDrflB2B,EAAQ3B,KCugB3B,QAAAL,GACCa,GDjgBU,ICkgBV,GAAAC,MAAAjC,EAAA,EAAAA,EAAA/B,UAAAiC,OAAAF,IAAAiC,EAAAjC,EAAA,GAAA/B,UAAA+B,EAEA,IAAIqC,GAAWL,IAAUE,MAAMC,QAAQH,GAASA,GAASA,IAAQI,OAAOH,EACxE,KAAII,IAAaA,EAASnC,UAAYmC,EAAWA,EAASe,OAAO,SAAAhL,GAAG,MAAG,OAAHA,KAAU8H,OAC7E,KAAM,IAAIxF,GAAA8D,kBAAkB,uBAE7B,IAAI+D,GAAMF,EAASnC,MAGnB,IAAQ,GAALqC,EAAQ,MAAOnJ,GAAKiJ,EAAS,GAGhC,KAAI,GAAIb,GAAI,EAAKe,EAAFf,EAAOA,IACtB,CACC,GAAIlI,GAAQ+I,EAASb,EACrB,IAAGlI,YAAaS,IAAeT,EAAEiE,UAAW,MAAOjE,GAGpD,MAAO,IAAIH,GAAQ,SAACJ,EAASS,GAsB5B,IAAa,GApBTkJ,GAAU,WAEblJ,EAAS,KACTT,EAAU,KACVsJ,EAASnC,OAAS,EAClBmC,EAAW,MAGRgB,EAAY,SAACvD,EAAiB1H,GAE9B0H,IAEF4C,IACA5C,EAAE1H,KAIA0K,EAAY,SAAC1K,GAAS,MAAAiL,GAAUtK,EAASX,IACzC4K,EAAW,SAAC3F,GAAU,MAAAgG,GAAU7J,EAAQ6D,IAE/B2C,EAAA,EAAAsD,EAAAjB,EAAArC,EAAAsD,EAAApD,OAAAF,IAAS,CAAlB,GAAIuD,GAACD,EAAAtD,EAER,KAAIjH,EAAS,KACbwK,GAAEtJ,KAAK6I,EAAWE,MAmBrB,QAAAjK,GAAwBL,GAGvB,MAAOD,GAAUC,GAASU,EAAKV,GAAS,GAAI6D,GAAU7D,GASvD,QAAA8K,GACCxK,EACA0F,GAEA,MAFA,UAAAA,IAAAA,GAAA,GAEO,GAAIvF,GAAWH,EAAU0F,GAYjC,QAAA+E,GACCzB,GD5iBU,IC6iBV,GAAAC,MAAAjC,EAAA,EAAAA,EAAA/B,UAAAiC,OAAAF,IAAAiC,EAAAjC,EAAA,GAAA/B,UAAA+B,EAEA,KAAIgC,IAAUC,EAAK/B,OAAQ,KAAM,IAAIvF,GAAA4D,sBAAsB,cAC3D,OAAO,IAAIuC,IACToB,MAAMC,QAAQH,GAASA,GAASA,IAC/BI,OAAOH,GACPzB,IAAI,SAACpI,GAAQ,MAAAW,GAAQX,MAWzB,QAAAoI,GAAyBO,EAAYN,GAEpC,MAAO,IAAIK,GAAkBC,EAAOP,IAAI,SAAAd,GAAG,MAAA,IAAIvG,GAAW,SAAC2G,EAAG4D,GAE7D,IAEC5D,EAAEW,EAAUf,IAEb,MAAMnG,GAELmK,EAAEnK,SAUL,QAAAC,GAA0B6F,GAEzB,MAAO,IAAI7C,GAAY6C,GAQxB,QAAAjG,GAAwBuK,GAEvB,IAAIA,EAAQ,KAAM,IAAIhJ,GAAA4D,sBAAsBnD,EAC5C,OAAO3C,GAAUkL,GACbA,YAAkB5J,GAAc4J,EAAS,GAAItF,GAAesF,GAC7D,GAAIpH,GAAaoH,GAQrB,QAAAC,GAAsC3J,GAErC,IAAIA,EAAM,KAAM,IAAIU,GAAA4D,sBAAsB1F,EAC1C,OAAO,IAAIwF,IAAgBpE,KAAMA,KA1WlC,SAAYoC,GACXA,EAAAA,EAAA,QAAA,GAAA,UACAA,EAAAA,EAAA,UAAA,GAAA,YACAA,EAAAA,EAAA,SAAA,IAAA,YAHWlD,EAAAkD,QAAAlD,EAAAkD,UAAZ,IAAYA,GAAAlD,EAAAkD,KAKZL,QAAO6H,OAAOxH,GAkCElD,EAAAlB,QAAOA,EAaPkB,EAAA4I,MAAKA,EAcL5I,EAAA+H,IAAGA,EA4EH/H,EAAAiI,QAAOA,EA+DPjI,EAAAgI,KAAIA,EAgEJhI,EAAAJ,QAAOA,EAYPI,EAAAqK,MAAKA,EAgBLrK,EAAAsK,WAAUA,EAmBVtK,EAAAqH,IAAGA,EAoBHrH,EAAAK,OAAMA,EAUNL,EAAAC,KAAIA,EAaJD,EAAAyK,WAAUA,GA/WbzK,EAAAhB,EAAAgB,UAAAhB,EAAAgB,aA+Xd6C,OAAAC,eAAA9D,EAAA,cAAAO,OAAA,IDhlBIP,EAAAA,WCglBWgB","file":"System/Promises/Promise.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT\n * Although most of the following code is written from scratch, it is\n * heavily influenced by Q (https://github.com/kriskowal/q) and uses some of Q's spec.\n */\n(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", \"../Types\", \"../Threading/deferImmediate\", \"../Disposable/DisposableBase\", \"../Exceptions/InvalidOperationException\", \"../Exceptions/ArgumentException\", \"../Exceptions/ArgumentNullException\", \"../Disposable/ObjectPool\", \"../Collections/Set\", \"../Threading/defer\", \"../Disposable/ObjectDisposedException\", \"../../extends\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    var Types_1 = require(\"../Types\");\n    var deferImmediate_1 = require(\"../Threading/deferImmediate\");\n    var DisposableBase_1 = require(\"../Disposable/DisposableBase\");\n    var InvalidOperationException_1 = require(\"../Exceptions/InvalidOperationException\");\n    var ArgumentException_1 = require(\"../Exceptions/ArgumentException\");\n    var ArgumentNullException_1 = require(\"../Exceptions/ArgumentNullException\");\n    var ObjectPool_1 = require(\"../Disposable/ObjectPool\");\n    var Set_1 = require(\"../Collections/Set\");\n    var defer_1 = require(\"../Threading/defer\");\n    var ObjectDisposedException_1 = require(\"../Disposable/ObjectDisposedException\");\n    var extends_1 = require(\"../../extends\");\n    var __extends = extends_1.default;\n    var VOID0 = void 0, PROMISE = \"Promise\", PROMISE_STATE = PROMISE + \"State\", THEN = \"then\", TARGET = \"target\";\n    function isPromise(value) {\n        return Types_1.default.hasMemberOfType(value, THEN, Types_1.default.FUNCTION);\n    }\n    function resolve(value, resolver, promiseFactory) {\n        var nextValue = resolver\n            ? resolver(value)\n            : value;\n        return nextValue && isPromise(nextValue)\n            ? Promise.wrap(nextValue)\n            : promiseFactory(nextValue);\n    }\n    function handleResolution(p, value, resolver) {\n        try {\n            var v = resolver ? resolver(value) : value;\n            if (p)\n                p.resolve(v);\n            return null;\n        }\n        catch (ex) {\n            if (p)\n                p.reject(ex);\n            return ex;\n        }\n    }\n    function handleResolutionMethods(targetFulfill, targetReject, value, resolver) {\n        try {\n            var v = resolver ? resolver(value) : value;\n            if (targetFulfill)\n                targetFulfill(v);\n        }\n        catch (ex) {\n            if (targetReject)\n                targetReject(ex);\n        }\n    }\n    function handleDispatch(p, onFulfilled, onRejected) {\n        if (p instanceof PromiseBase)\n            p.thenThis(onFulfilled, onRejected);\n        else\n            p.then(onFulfilled, onRejected);\n    }\n    function handleSyncIfPossible(p, onFulfilled, onRejected) {\n        if (p instanceof PromiseBase)\n            return p.thenSynchronous(onFulfilled, onRejected);\n        else\n            return p.then(onFulfilled, onRejected);\n    }\n    function newODE() {\n        return new ObjectDisposedException_1.ObjectDisposedException(\"Promise\", \"An underlying promise-result was disposed.\");\n    }\n    var PromiseState = (function (_super) {\n        __extends(PromiseState, _super);\n        function PromiseState(_state, _result, _error) {\n            _super.call(this);\n            this._state = _state;\n            this._result = _result;\n            this._error = _error;\n            this._disposableObjectName = PROMISE_STATE;\n        }\n        PromiseState.prototype._onDispose = function () {\n            this._state = VOID0;\n            this._result = VOID0;\n            this._error = VOID0;\n        };\n        PromiseState.prototype.getState = function () {\n            return this._state;\n        };\n        Object.defineProperty(PromiseState.prototype, \"state\", {\n            get: function () {\n                return this._state;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(PromiseState.prototype, \"isPending\", {\n            get: function () {\n                return this.getState() === Promise.State.Pending;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(PromiseState.prototype, \"isSettled\", {\n            get: function () {\n                return this.getState() != Promise.State.Pending;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(PromiseState.prototype, \"isFulfilled\", {\n            get: function () {\n                return this.getState() === Promise.State.Fulfilled;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(PromiseState.prototype, \"isRejected\", {\n            get: function () {\n                return this.getState() === Promise.State.Rejected;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        PromiseState.prototype.getResult = function () {\n            return this._result;\n        };\n        Object.defineProperty(PromiseState.prototype, \"result\", {\n            get: function () {\n                this.throwIfDisposed();\n                return this.getResult();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        PromiseState.prototype.getError = function () {\n            return this._error;\n        };\n        Object.defineProperty(PromiseState.prototype, \"error\", {\n            get: function () {\n                this.throwIfDisposed();\n                return this.getError();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return PromiseState;\n    }(DisposableBase_1.DisposableBase));\n    exports.PromiseState = PromiseState;\n    var PromiseBase = (function (_super) {\n        __extends(PromiseBase, _super);\n        function PromiseBase() {\n            _super.call(this, Promise.State.Pending);\n            this._disposableObjectName = PROMISE;\n        }\n        PromiseBase.prototype.then = function (onFulfilled, onRejected) {\n            var _this = this;\n            this.throwIfDisposed();\n            return new Promise(function (resolve, reject) {\n                _this.thenThis(function (result) {\n                    return handleResolutionMethods(resolve, reject, result, onFulfilled);\n                }, function (error) {\n                    return onRejected\n                        ? handleResolutionMethods(resolve, reject, error, onRejected)\n                        : reject(error);\n                });\n            });\n        };\n        PromiseBase.prototype.thenAllowFatal = function (onFulfilled, onRejected) {\n            var _this = this;\n            this.throwIfDisposed();\n            return new Promise(function (resolve, reject) {\n                _this.thenThis(function (result) {\n                    return resolve((onFulfilled ? onFulfilled(result) : result));\n                }, function (error) {\n                    return reject(onRejected ? onRejected(error) : error);\n                });\n            });\n        };\n        PromiseBase.prototype.done = function (onFulfilled, onRejected) {\n            var _this = this;\n            defer_1.defer(function () {\n                return _this.thenThis(onFulfilled, onRejected);\n            });\n        };\n        PromiseBase.prototype.delayFromNow = function (milliseconds) {\n            var _this = this;\n            if (milliseconds === void 0) { milliseconds = 0; }\n            this.throwIfDisposed();\n            return new Promise(function (resolve, reject) {\n                defer_1.defer(function () {\n                    _this.thenThis(function (v) { return resolve(v); }, function (e) { return reject(e); });\n                }, milliseconds);\n            }, true);\n        };\n        PromiseBase.prototype.delayAfterResolve = function (milliseconds) {\n            var _this = this;\n            if (milliseconds === void 0) { milliseconds = 0; }\n            this.throwIfDisposed();\n            if (this.isSettled)\n                return this.delayFromNow(milliseconds);\n            return new Promise(function (resolve, reject) {\n                _this.thenThis(function (v) { return defer_1.defer(function () { return resolve(v); }, milliseconds); }, function (e) { return defer_1.defer(function () { return reject(e); }, milliseconds); });\n            }, true);\n        };\n        PromiseBase.prototype['catch'] = function (onRejected) {\n            return this.then(VOID0, onRejected);\n        };\n        PromiseBase.prototype.catchAllowFatal = function (onRejected) {\n            return this.thenAllowFatal(VOID0, onRejected);\n        };\n        PromiseBase.prototype['finally'] = function (fin) {\n            return this.then(fin, fin);\n        };\n        PromiseBase.prototype.finallyAllowFatal = function (fin) {\n            return this.thenAllowFatal(fin, fin);\n        };\n        PromiseBase.prototype.finallyThis = function (fin, synchronous) {\n            this.throwIfDisposed();\n            var f = synchronous ? f : function () { return deferImmediate_1.deferImmediate(fin); };\n            this.thenThis(f, f);\n            return this;\n        };\n        return PromiseBase;\n    }(PromiseState));\n    exports.PromiseBase = PromiseBase;\n    var Resolvable = (function (_super) {\n        __extends(Resolvable, _super);\n        function Resolvable() {\n            _super.apply(this, arguments);\n        }\n        Resolvable.prototype.thenSynchronous = function (onFulfilled, onRejected) {\n            this.throwIfDisposed();\n            try {\n                switch (this.state) {\n                    case Promise.State.Fulfilled:\n                        return onFulfilled\n                            ? resolve(this._result, onFulfilled, Promise.resolve)\n                            : this;\n                    case Promise.State.Rejected:\n                        return onRejected\n                            ? resolve(this._error, onRejected, Promise.resolve)\n                            : this;\n                }\n            }\n            catch (ex) {\n                return new Rejected(ex);\n            }\n            throw new Error(\"Invalid state for a resolved promise.\");\n        };\n        Resolvable.prototype.thenThis = function (onFulfilled, onRejected) {\n            this.throwIfDisposed();\n            switch (this.state) {\n                case Promise.State.Fulfilled:\n                    if (onFulfilled)\n                        onFulfilled(this._result);\n                    break;\n                case Promise.State.Rejected:\n                    if (onRejected)\n                        onRejected(this._error);\n                    break;\n            }\n            return this;\n        };\n        return Resolvable;\n    }(PromiseBase));\n    exports.Resolvable = Resolvable;\n    var Resolved = (function (_super) {\n        __extends(Resolved, _super);\n        function Resolved(state, result, error) {\n            _super.call(this);\n            this._result = result;\n            this._error = error;\n            this._state = state;\n        }\n        return Resolved;\n    }(Resolvable));\n    exports.Resolved = Resolved;\n    var Fulfilled = (function (_super) {\n        __extends(Fulfilled, _super);\n        function Fulfilled(value) {\n            _super.call(this, Promise.State.Fulfilled, value);\n        }\n        return Fulfilled;\n    }(Resolved));\n    exports.Fulfilled = Fulfilled;\n    var Rejected = (function (_super) {\n        __extends(Rejected, _super);\n        function Rejected(error) {\n            _super.call(this, Promise.State.Rejected, VOID0, error);\n        }\n        return Rejected;\n    }(Resolved));\n    exports.Rejected = Rejected;\n    var PromiseWrapper = (function (_super) {\n        __extends(PromiseWrapper, _super);\n        function PromiseWrapper(_target) {\n            var _this = this;\n            _super.call(this);\n            this._target = _target;\n            if (!_target)\n                throw new ArgumentNullException_1.ArgumentNullException(TARGET);\n            if (!isPromise(_target))\n                throw new ArgumentException_1.ArgumentException(TARGET, \"Must be a promise-like object.\");\n            _target.then(function (v) {\n                _this._state = Promise.State.Fulfilled;\n                _this._result = v;\n                _this._error = VOID0;\n                _this._target = VOID0;\n            }, function (e) {\n                _this._state = Promise.State.Rejected;\n                _this._error = e;\n                _this._target = VOID0;\n            });\n        }\n        PromiseWrapper.prototype.thenSynchronous = function (onFulfilled, onRejected) {\n            this.throwIfDisposed();\n            var t = this._target;\n            if (!t)\n                return _super.prototype.thenSynchronous.call(this, onFulfilled, onRejected);\n            return new Promise(function (resolve, reject) {\n                handleDispatch(t, function (result) { return handleResolutionMethods(resolve, reject, result, onFulfilled); }, function (error) { return onRejected\n                    ? handleResolutionMethods(resolve, null, error, onRejected)\n                    : reject(error); });\n            }, true);\n        };\n        PromiseWrapper.prototype.thenThis = function (onFulfilled, onRejected) {\n            this.throwIfDisposed();\n            var t = this._target;\n            if (!t)\n                return _super.prototype.thenThis.call(this, onFulfilled, onRejected);\n            handleDispatch(t, onFulfilled, onRejected);\n            return this;\n        };\n        PromiseWrapper.prototype._onDispose = function () {\n            _super.prototype._onDispose.call(this);\n            this._target = VOID0;\n        };\n        return PromiseWrapper;\n    }(Resolvable));\n    var Promise = (function (_super) {\n        __extends(Promise, _super);\n        function Promise(resolver, forceSynchronous) {\n            if (forceSynchronous === void 0) { forceSynchronous = false; }\n            _super.call(this);\n            if (resolver)\n                this.resolveUsing(resolver, forceSynchronous);\n        }\n        Promise.prototype.thenSynchronous = function (onFulfilled, onRejected) {\n            this.throwIfDisposed();\n            if (this._state)\n                return _super.prototype.thenSynchronous.call(this, onFulfilled, onRejected);\n            var p = new Promise();\n            (this._waiting || (this._waiting = []))\n                .push(pools.PromiseCallbacks.init(onFulfilled, onRejected, p));\n            return p;\n        };\n        Promise.prototype.thenThis = function (onFulfilled, onRejected) {\n            this.throwIfDisposed();\n            if (this._state)\n                return _super.prototype.thenThis.call(this, onFulfilled, onRejected);\n            (this._waiting || (this._waiting = []))\n                .push(pools.PromiseCallbacks.init(onFulfilled, onRejected));\n            return this;\n        };\n        Promise.prototype._onDispose = function () {\n            _super.prototype._onDispose.call(this);\n            this._resolvedCalled = VOID0;\n        };\n        Promise.prototype.resolveUsing = function (resolver, forceSynchronous, throwIfSettled) {\n            var _this = this;\n            if (forceSynchronous === void 0) { forceSynchronous = false; }\n            if (throwIfSettled === void 0) { throwIfSettled = false; }\n            if (!resolver)\n                throw new ArgumentNullException_1.ArgumentNullException(\"resolver\");\n            if (this._resolvedCalled)\n                throw new InvalidOperationException_1.InvalidOperationException(\".resolve() already called.\");\n            if (this.state)\n                throw new InvalidOperationException_1.InvalidOperationException(\"Already resolved: \" + Promise.State[this.state]);\n            this._resolvedCalled = true;\n            var state = 0;\n            var rejectHandler = function (reason) {\n                if (state) {\n                    console.warn(state == -1\n                        ? \"Rejection called multiple times\"\n                        : \"Rejection called after fulfilled.\");\n                }\n                else {\n                    state = -1;\n                    _this._resolvedCalled = false;\n                    _this.reject(reason);\n                }\n            };\n            var fulfillHandler = function (v) {\n                if (state) {\n                    console.warn(state == 1\n                        ? \"Fulfill called multiple times\"\n                        : \"Fulfill called after rejection.\");\n                }\n                else {\n                    state = 1;\n                    _this._resolvedCalled = false;\n                    _this.resolve(v);\n                }\n            };\n            if (forceSynchronous)\n                resolver(fulfillHandler, rejectHandler);\n            else\n                deferImmediate_1.deferImmediate(function () { return resolver(fulfillHandler, rejectHandler); });\n        };\n        Promise.prototype._emitDisposalRejection = function (p) {\n            var d = p.wasDisposed;\n            if (d)\n                this._rejectInternal(newODE());\n            return d;\n        };\n        Promise.prototype._resolveInternal = function (result) {\n            var _this = this;\n            if (this.wasDisposed)\n                return;\n            while (result instanceof PromiseBase) {\n                var r = result;\n                if (this._emitDisposalRejection(r))\n                    return;\n                switch (r.state) {\n                    case Promise.State.Pending:\n                        r.thenSynchronous(function (v) { return _this._resolveInternal(v); }, function (e) { return _this._rejectInternal(e); });\n                        return;\n                    case Promise.State.Rejected:\n                        this._rejectInternal(r.error);\n                        return;\n                    case Promise.State.Fulfilled:\n                        result = r.result;\n                        break;\n                }\n            }\n            if (isPromise(result)) {\n                result.then(function (v) { return _this._resolveInternal(v); }, function (e) { return _this._rejectInternal(e); });\n            }\n            else {\n                this._state = Promise.State.Fulfilled;\n                this._result = result;\n                this._error = VOID0;\n                var o = this._waiting;\n                if (o) {\n                    this._waiting = VOID0;\n                    for (var _i = 0, o_1 = o; _i < o_1.length; _i++) {\n                        var c = o_1[_i];\n                        var onFulfilled = c.onFulfilled, promise = c.promise;\n                        pools.PromiseCallbacks.recycle(c);\n                        handleResolution(promise, result, onFulfilled);\n                    }\n                    o.length = 0;\n                }\n            }\n        };\n        Promise.prototype._rejectInternal = function (error) {\n            if (this.wasDisposed)\n                return;\n            this._state = Promise.State.Rejected;\n            this._error = error;\n            var o = this._waiting;\n            if (o) {\n                this._waiting = null;\n                for (var _i = 0, o_2 = o; _i < o_2.length; _i++) {\n                    var c = o_2[_i];\n                    var onRejected = c.onRejected, promise = c.promise;\n                    pools.PromiseCallbacks.recycle(c);\n                    if (onRejected) {\n                        handleResolution(promise, error, onRejected);\n                    }\n                    else if (promise)\n                        promise.reject(error);\n                }\n                o.length = 0;\n            }\n        };\n        Promise.prototype.resolve = function (result, throwIfSettled) {\n            if (throwIfSettled === void 0) { throwIfSettled = false; }\n            this.throwIfDisposed();\n            if (result == this)\n                throw new InvalidOperationException_1.InvalidOperationException(\"Cannot resolve a promise as itself.\");\n            if (this._state) {\n                if (!throwIfSettled || this._state == Promise.State.Fulfilled && this._result === result)\n                    return;\n                throw new InvalidOperationException_1.InvalidOperationException(\"Changing the fulfilled state/value of a promise is not supported.\");\n            }\n            if (this._resolvedCalled) {\n                if (throwIfSettled)\n                    throw new InvalidOperationException_1.InvalidOperationException(\".resolve() already called.\");\n                return;\n            }\n            this._resolveInternal(result);\n        };\n        Promise.prototype.reject = function (error, throwIfSettled) {\n            if (throwIfSettled === void 0) { throwIfSettled = false; }\n            this.throwIfDisposed();\n            if (this._state) {\n                if (!throwIfSettled || this._state == Promise.State.Rejected && this._error === error)\n                    return;\n                throw new InvalidOperationException_1.InvalidOperationException(\"Changing the rejected state/value of a promise is not supported.\");\n            }\n            if (this._resolvedCalled) {\n                if (throwIfSettled)\n                    throw new InvalidOperationException_1.InvalidOperationException(\".resolve() already called.\");\n                return;\n            }\n            this._rejectInternal(error);\n        };\n        return Promise;\n    }(Resolvable));\n    exports.Promise = Promise;\n    var ArrayPromise = (function (_super) {\n        __extends(ArrayPromise, _super);\n        function ArrayPromise() {\n            _super.apply(this, arguments);\n        }\n        ArrayPromise.prototype.map = function (transform) {\n            var _this = this;\n            this.throwIfDisposed();\n            return new ArrayPromise(function (resolve) {\n                _this.thenThis(function (result) { return resolve(result.map(transform)); });\n            }, true);\n        };\n        ArrayPromise.prototype.reduce = function (reduction, initialValue) {\n            return this\n                .thenSynchronous(function (result) { return result.reduce(reduction, initialValue); });\n        };\n        ArrayPromise.fulfilled = function (value) {\n            return new ArrayPromise(function (resolve) { return value; }, true);\n        };\n        return ArrayPromise;\n    }(Promise));\n    exports.ArrayPromise = ArrayPromise;\n    var PromiseCollection = (function (_super) {\n        __extends(PromiseCollection, _super);\n        function PromiseCollection(source) {\n            _super.call(this);\n            this._source = source && source.slice() || [];\n        }\n        PromiseCollection.prototype._onDispose = function () {\n            _super.prototype._onDispose.call(this);\n            this._source.length = 0;\n            this._source = null;\n        };\n        Object.defineProperty(PromiseCollection.prototype, \"promises\", {\n            get: function () {\n                this.throwIfDisposed();\n                return this._source.slice();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        PromiseCollection.prototype.all = function () {\n            this.throwIfDisposed();\n            return Promise.all(this._source);\n        };\n        PromiseCollection.prototype.race = function () {\n            this.throwIfDisposed();\n            return Promise.race(this._source);\n        };\n        PromiseCollection.prototype.waitAll = function () {\n            this.throwIfDisposed();\n            return Promise.waitAll(this._source);\n        };\n        PromiseCollection.prototype.map = function (transform) {\n            var _this = this;\n            this.throwIfDisposed();\n            return new ArrayPromise(function (resolve) {\n                _this.all()\n                    .thenThis(function (result) { return resolve(result.map(transform)); });\n            }, true);\n        };\n        PromiseCollection.prototype.pipe = function (transform) {\n            this.throwIfDisposed();\n            return new PromiseCollection(this._source.map(function (p) { return handleSyncIfPossible(p, transform); }));\n        };\n        PromiseCollection.prototype.reduce = function (reduction, initialValue) {\n            this.throwIfDisposed();\n            return Promise.wrap(this._source\n                .reduce(function (previous, current, i, array) {\n                return handleSyncIfPossible(previous, function (p) { return handleSyncIfPossible(current, function (c) { return reduction(p, c, i, array); }); });\n            }, isPromise(initialValue)\n                ? initialValue\n                : new Fulfilled(initialValue)));\n        };\n        return PromiseCollection;\n    }(DisposableBase_1.DisposableBase));\n    exports.PromiseCollection = PromiseCollection;\n    var pools;\n    (function (pools) {\n        var PromiseCallbacks;\n        (function (PromiseCallbacks) {\n            var pool;\n            function getPool() {\n                return pool\n                    || (pool = new ObjectPool_1.ObjectPool(40, factory, function (c) {\n                        c.onFulfilled = null;\n                        c.onRejected = null;\n                        c.promise = null;\n                    }));\n            }\n            function factory() {\n                return {\n                    onFulfilled: null,\n                    onRejected: null,\n                    promise: null\n                };\n            }\n            function init(onFulfilled, onRejected, promise) {\n                var c = getPool().take();\n                c.onFulfilled = onFulfilled;\n                c.onRejected = onRejected;\n                c.promise = promise;\n                return c;\n            }\n            PromiseCallbacks.init = init;\n            function recycle(c) {\n                getPool().add(c);\n            }\n            PromiseCallbacks.recycle = recycle;\n        })(PromiseCallbacks = pools.PromiseCallbacks || (pools.PromiseCallbacks = {}));\n    })(pools || (pools = {}));\n    var Promise;\n    (function (Promise) {\n        (function (State) {\n            State[State[\"Pending\"] = 0] = \"Pending\";\n            State[State[\"Fulfilled\"] = 1] = \"Fulfilled\";\n            State[State[\"Rejected\"] = -1] = \"Rejected\";\n        })(Promise.State || (Promise.State = {}));\n        var State = Promise.State;\n        Object.freeze(State);\n        function factory(e) {\n            return new Promise(e);\n        }\n        Promise.factory = factory;\n        function group(first) {\n            var rest = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                rest[_i - 1] = arguments[_i];\n            }\n            if (!first && !rest.length)\n                throw new ArgumentNullException_1.ArgumentNullException(\"promises\");\n            return new PromiseCollection((Array.isArray(first) ? first : [first]).concat(rest));\n        }\n        Promise.group = group;\n        function all(first) {\n            var rest = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                rest[_i - 1] = arguments[_i];\n            }\n            if (!first && !rest.length)\n                throw new ArgumentNullException_1.ArgumentNullException(\"promises\");\n            var promises = (Array.isArray(first) ? first : [first]).concat(rest);\n            if (!promises.length || promises.every(function (v) { return !v; }))\n                return new ArrayPromise(function (r) { return r(promises); }, true);\n            return new ArrayPromise(function (resolve, reject) {\n                var result = [];\n                var len = promises.length;\n                result.length = len;\n                var remaining = new Set_1.Set(promises.map(function (v, i) { return i; }));\n                var cleanup = function () {\n                    reject = null;\n                    resolve = null;\n                    promises.length = 0;\n                    promises = null;\n                    remaining.dispose();\n                    remaining = null;\n                };\n                var checkIfShouldResolve = function () {\n                    var r = resolve;\n                    if (r && !remaining.count) {\n                        cleanup();\n                        r(result);\n                    }\n                };\n                var onFulfill = function (v, i) {\n                    if (resolve) {\n                        result[i] = v;\n                        remaining.remove(i);\n                        checkIfShouldResolve();\n                    }\n                };\n                var onReject = function (e) {\n                    var r = reject;\n                    if (r) {\n                        cleanup();\n                        r(e);\n                    }\n                };\n                var _loop_1 = function(i) {\n                    var p = promises[i];\n                    if (p)\n                        p.then(function (v) { return onFulfill(v, i); }, onReject);\n                    else\n                        remaining.remove(i);\n                    checkIfShouldResolve();\n                };\n                for (var i = 0; remaining && i < len; i++) {\n                    _loop_1(i);\n                }\n            });\n        }\n        Promise.all = all;\n        function waitAll(first) {\n            var rest = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                rest[_i - 1] = arguments[_i];\n            }\n            if (!first && !rest.length)\n                throw new ArgumentNullException_1.ArgumentNullException(\"promises\");\n            var promises = (Array.isArray(first) ? first : [first]).concat(rest);\n            if (!promises.length || promises.every(function (v) { return !v; }))\n                return new ArrayPromise(function (r) { return r(promises); }, true);\n            return new ArrayPromise(function (resolve, reject) {\n                var len = promises.length;\n                var remaining = new Set_1.Set(promises.map(function (v, i) { return i; }));\n                var cleanup = function () {\n                    reject = null;\n                    resolve = null;\n                    remaining.dispose();\n                    remaining = null;\n                };\n                var checkIfShouldResolve = function () {\n                    var r = resolve;\n                    if (r && !remaining.count) {\n                        cleanup();\n                        r(promises);\n                    }\n                };\n                var onResolved = function (i) {\n                    if (remaining) {\n                        remaining.remove(i);\n                        checkIfShouldResolve();\n                    }\n                };\n                var _loop_2 = function(i) {\n                    var p = promises[i];\n                    if (p)\n                        p.then(function (v) { return onResolved(i); }, function (e) { return onResolved(i); });\n                    else\n                        onResolved(i);\n                };\n                for (var i = 0; remaining && i < len; i++) {\n                    _loop_2(i);\n                }\n            });\n        }\n        Promise.waitAll = waitAll;\n        function race(first) {\n            var rest = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                rest[_i - 1] = arguments[_i];\n            }\n            var promises = first && (Array.isArray(first) ? first : [first]).concat(rest);\n            if (!promises || !promises.length || !(promises = promises.filter(function (v) { return v != null; })).length)\n                throw new ArgumentException_1.ArgumentException(\"Nothing to wait for.\");\n            var len = promises.length;\n            if (len == 1)\n                return wrap(promises[0]);\n            for (var i = 0; i < len; i++) {\n                var p = promises[i];\n                if (p instanceof PromiseBase && p.isSettled)\n                    return p;\n            }\n            return new Promise(function (resolve, reject) {\n                var cleanup = function () {\n                    reject = null;\n                    resolve = null;\n                    promises.length = 0;\n                    promises = null;\n                };\n                var onResolve = function (r, v) {\n                    if (r) {\n                        cleanup();\n                        r(v);\n                    }\n                };\n                var onFulfill = function (v) { return onResolve(resolve, v); };\n                var onReject = function (e) { return onResolve(reject, e); };\n                for (var _i = 0, promises_1 = promises; _i < promises_1.length; _i++) {\n                    var p_1 = promises_1[_i];\n                    if (!resolve)\n                        break;\n                    p_1.then(onFulfill, onReject);\n                }\n            });\n        }\n        Promise.race = race;\n        function resolve(value) {\n            return isPromise(value) ? wrap(value) : new Fulfilled(value);\n        }\n        Promise.resolve = resolve;\n        function using(resolver, forceSynchronous) {\n            if (forceSynchronous === void 0) { forceSynchronous = false; }\n            return new Promise(resolver, forceSynchronous);\n        }\n        Promise.using = using;\n        function resolveAll(first) {\n            var rest = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                rest[_i - 1] = arguments[_i];\n            }\n            if (!first && !rest.length)\n                throw new ArgumentNullException_1.ArgumentNullException(\"resolutions\");\n            return new PromiseCollection((Array.isArray(first) ? first : [first])\n                .concat(rest)\n                .map(function (v) { return resolve(v); }));\n        }\n        Promise.resolveAll = resolveAll;\n        function map(source, transform) {\n            return new PromiseCollection(source.map(function (d) { return new Promise(function (r, j) {\n                try {\n                    r(transform(d));\n                }\n                catch (ex) {\n                    j(ex);\n                }\n            }); }));\n        }\n        Promise.map = map;\n        function reject(reason) {\n            return new Rejected(reason);\n        }\n        Promise.reject = reject;\n        function wrap(target) {\n            if (!target)\n                throw new ArgumentNullException_1.ArgumentNullException(TARGET);\n            return isPromise(target)\n                ? (target instanceof PromiseBase ? target : new PromiseWrapper(target))\n                : new Fulfilled(target);\n        }\n        Promise.wrap = wrap;\n        function createFrom(then) {\n            if (!then)\n                throw new ArgumentNullException_1.ArgumentNullException(THEN);\n            return new PromiseWrapper({ then: then });\n        }\n        Promise.createFrom = createFrom;\n    })(Promise = exports.Promise || (exports.Promise = {}));\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = Promise;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT\r\n * Although most of the following code is written from scratch, it is\r\n * heavily influenced by Q (https://github.com/kriskowal/q) and uses some of Q's spec.\r\n */\r\n\r\n/*\r\n * Resources:\r\n * https://promisesaplus.com/\r\n * https://github.com/kriskowal/q\r\n */\r\n\r\nimport Type from \"../Types\";\r\nimport {deferImmediate} from \"../Threading/deferImmediate\";\r\nimport {DisposableBase} from \"../Disposable/DisposableBase\";\r\nimport {InvalidOperationException} from \"../Exceptions/InvalidOperationException\";\r\nimport {ArgumentException} from \"../Exceptions/ArgumentException\";\r\nimport {ArgumentNullException} from \"../Exceptions/ArgumentNullException\";\r\nimport {ObjectPool} from \"../Disposable/ObjectPool\";\r\nimport {Set} from \"../Collections/Set\";\r\nimport {defer} from \"../Threading/defer\";\r\nimport {ObjectDisposedException} from \"../Disposable/ObjectDisposedException\";\r\nimport __extendsImport from \"../../extends\";\r\n//noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\nconst VOID0:any = void 0, PROMISE = \"Promise\", PROMISE_STATE = PROMISE + \"State\", THEN = \"then\", TARGET = \"target\";\r\n\r\nfunction isPromise<T>(value:any):value is PromiseLike<T>\r\n{\r\n\treturn Type.hasMemberOfType(value, THEN, Type.FUNCTION);\r\n}\r\n\r\nfunction resolve<T>(\r\n\tvalue:Promise.Resolution<T>, resolver:(v:Promise.Resolution<T>)=>any,\r\n\tpromiseFactory:(v:any)=>PromiseBase<any>):PromiseBase<any>\r\n{\r\n\tlet nextValue = resolver\r\n\t\t? resolver(value)\r\n\t\t: value;\r\n\r\n\treturn nextValue && isPromise(nextValue)\r\n\t\t? Promise.wrap(nextValue)\r\n\t\t: promiseFactory(nextValue);\r\n}\r\n\r\nfunction handleResolution(\r\n\tp:Promise<any>,\r\n\tvalue:Promise.Resolution<any>,\r\n\tresolver?:(v:Promise.Resolution<any>)=>any):any\r\n{\r\n\ttry\r\n\t{\r\n\t\tlet v = resolver ? resolver(value) : value;\r\n\t\tif(p) p.resolve(v);\r\n\t\treturn null;\r\n\t}\r\n\tcatch(ex)\r\n\t{\r\n\t\tif(p) p.reject(ex);\r\n\t\treturn ex;\r\n\t}\r\n}\r\n\r\nfunction handleResolutionMethods(\r\n\ttargetFulfill:Promise.Fulfill<any,any>,\r\n\ttargetReject:Promise.Reject<any>,\r\n\tvalue:Promise.Resolution<any>,\r\n\tresolver?:(v:Promise.Resolution<any>)=>any):void\r\n{\r\n\ttry\r\n\t{\r\n\t\tlet v = resolver ? resolver(value) : value;\r\n\t\tif(targetFulfill) targetFulfill(v);\r\n\t}\r\n\tcatch(ex)\r\n\t{ if(targetReject) targetReject(ex); }\r\n}\r\n\r\nfunction handleDispatch<T,TResult>(\r\n\tp:PromiseLike<T>,\r\n\tonFulfilled:Promise.Fulfill<T,TResult>,\r\n\tonRejected?:Promise.Reject<TResult>):void\r\n{\r\n\tif(p instanceof PromiseBase)\r\n\t\tp.thenThis(onFulfilled, onRejected);\r\n\telse\r\n\t\tp.then(<any>onFulfilled, onRejected);\r\n}\r\n\r\nfunction handleSyncIfPossible<T,TResult>(\r\n\tp:PromiseLike<T>,\r\n\tonFulfilled:Promise.Fulfill<T,TResult>,\r\n\tonRejected?:Promise.Reject<TResult>):PromiseLike<TResult>\r\n{\r\n\tif(p instanceof PromiseBase)\r\n\t\treturn p.thenSynchronous(onFulfilled, onRejected);\r\n\telse\r\n\t\treturn p.then(<any>onFulfilled, onRejected);\r\n}\r\n\r\nfunction newODE()\r\n{\r\n\treturn new ObjectDisposedException(\"Promise\", \"An underlying promise-result was disposed.\");\r\n}\r\n\r\nexport class PromiseState<T>\r\nextends DisposableBase\r\n{\r\n\r\n\tconstructor(\r\n\t\tprotected _state:Promise.State,\r\n\t\tprotected _result?:T,\r\n\t\tprotected _error?:any)\r\n\t{\r\n\t\tsuper();\r\n\t\tthis._disposableObjectName = PROMISE_STATE;\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tthis._state = VOID0;\r\n\t\tthis._result = VOID0;\r\n\t\tthis._error = VOID0;\r\n\t}\r\n\r\n\tprotected getState():Promise.State\r\n\t{\r\n\t\treturn this._state;\r\n\t}\r\n\r\n\tget state():Promise.State\r\n\t{\r\n\t\treturn this._state;\r\n\t}\r\n\r\n\tget isPending():boolean\r\n\t{\r\n\t\treturn this.getState()===Promise.State.Pending;\r\n\t}\r\n\r\n\tget isSettled():boolean\r\n\t{\r\n\t\treturn this.getState()!=Promise.State.Pending; // Will also include undefined==0 aka disposed!=resolved.\r\n\t}\r\n\r\n\tget isFulfilled():boolean\r\n\t{\r\n\t\treturn this.getState()===Promise.State.Fulfilled;\r\n\t}\r\n\r\n\tget isRejected():boolean\r\n\t{\r\n\t\treturn this.getState()===Promise.State.Rejected;\r\n\t}\r\n\r\n\t/*\r\n\t * Providing overrides allows for special defer or lazy sub classes.\r\n\t */\r\n\tprotected getResult():T\r\n\t{\r\n\t\treturn this._result;\r\n\t}\r\n\r\n\tget result():T\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn this.getResult();\r\n\t}\r\n\r\n\tprotected getError():any\r\n\t{\r\n\t\treturn this._error;\r\n\t}\r\n\r\n\tget error():any\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn this.getError();\r\n\t}\r\n\r\n}\r\n\r\nexport abstract class PromiseBase<T>\r\nextends PromiseState<T> implements PromiseLike<T>\r\n{\r\n\tconstructor()\r\n\t{\r\n\t\tsuper(Promise.State.Pending);\r\n\t\tthis._disposableObjectName = PROMISE;\r\n\t}\r\n\r\n\t/**\r\n\t * Calls the respective handlers once the promise is resolved.\r\n\t * @param onFulfilled\r\n\t * @param onRejected\r\n\t */\r\n\tabstract thenSynchronous<TResult>(\r\n\t\tonFulfilled:Promise.Fulfill<T,TResult>,\r\n\t\tonRejected?:Promise.Reject<TResult>):PromiseBase<TResult>;\r\n\r\n\t/**\r\n\t * Same as 'thenSynchronous' but does not return the result.  Returns the current promise instead.\r\n\t * You may not need an additional promise result, and this will not create a new one.\r\n\t * @param onFulfilled\r\n\t * @param onRejected\r\n\t */\r\n\tabstract thenThis(\r\n\t\tonFulfilled:(v?:T)=>any,\r\n\t\tonRejected?:(v?:any)=>any):this;\r\n\r\n\r\n\t/**\r\n\t * Standard .then method that defers execution until resolved.\r\n\t * @param onFulfilled\r\n\t * @param onRejected\r\n\t * @returns {Promise}\r\n\t */\r\n\tthen<TResult>(\r\n\t\tonFulfilled:Promise.Fulfill<T,TResult>,\r\n\t\tonRejected?:Promise.Reject<TResult>):PromiseBase<TResult>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\treturn new Promise<TResult>((resolve, reject)=>\r\n\t\t{\r\n\t\t\tthis.thenThis(\r\n\t\t\t\tresult=>\r\n\t\t\t\t\thandleResolutionMethods(resolve, reject, result, onFulfilled),\r\n\t\t\t\terror=>\r\n\t\t\t\t\tonRejected\r\n\t\t\t\t\t\t? handleResolutionMethods(resolve, reject, error, onRejected)\r\n\t\t\t\t\t\t: reject(error)\r\n\t\t\t);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Same as .then but doesn't trap errors.  Exceptions may end up being fatal.\r\n\t * @param onFulfilled\r\n\t * @param onRejected\r\n\t * @returns {Promise}\r\n\t */\r\n\tthenAllowFatal<TResult>(\r\n\t\tonFulfilled:Promise.Fulfill<T,TResult>,\r\n\t\tonRejected?:Promise.Reject<TResult>):PromiseBase<TResult>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\treturn new Promise<TResult>((resolve, reject)=>\r\n\t\t{\r\n\t\t\tthis.thenThis(\r\n\t\t\t\tresult=>\r\n\t\t\t\t\tresolve(<any>(onFulfilled ? onFulfilled(result) : result)),\r\n\t\t\t\terror=>\r\n\t\t\t\t\treject(onRejected ? onRejected(error) : error)\r\n\t\t\t);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * .done is provided as a non-standard means that maps to similar functionality in other promise libraries.\r\n\t * As stated by promisejs.org: 'then' is to 'done' as 'map' is to 'forEach'.\r\n\t * @param onFulfilled\r\n\t * @param onRejected\r\n\t */\r\n\tdone(\r\n\t\tonFulfilled:Promise.Fulfill<T,any>,\r\n\t\tonRejected?:Promise.Reject<any>):void\r\n\t{\r\n\t\tdefer(()=>\r\n\t\t\tthis.thenThis(onFulfilled, onRejected));\r\n\t}\r\n\r\n\t/**\r\n\t * Will yield for a number of milliseconds from the time called before continuing.\r\n\t * @param milliseconds\r\n\t * @returns A promise that yields to the current execution and executes after a delay.\r\n\t */\r\n\tdelayFromNow(milliseconds:number = 0):PromiseBase<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\treturn new Promise<T>(\r\n\t\t\t(resolve, reject)=>\r\n\t\t\t{\r\n\t\t\t\tdefer(()=>\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.thenThis(\r\n\t\t\t\t\t\tv=> resolve(v),\r\n\t\t\t\t\t\te=> reject(e));\r\n\t\t\t\t}, milliseconds)\r\n\t\t\t},\r\n\t\t\ttrue // Since the resolve/reject is deferred.\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Will yield for a number of milliseconds from after this promise resolves.\r\n\t * If the promise is already resolved, the delay will start from now.\r\n\t * @param milliseconds\r\n\t * @returns A promise that yields to the current execution and executes after a delay.\r\n\t */\r\n\tdelayAfterResolve(milliseconds:number = 0):PromiseBase<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tif(this.isSettled) return this.delayFromNow(milliseconds);\r\n\r\n\t\treturn new Promise<T>(\r\n\t\t\t(resolve, reject)=>\r\n\t\t\t{\r\n\t\t\t\tthis.thenThis(\r\n\t\t\t\t\tv=>defer(()=>resolve(v), milliseconds),\r\n\t\t\t\t\te=>defer(()=>reject(e), milliseconds))\r\n\t\t\t},\r\n\t\t\ttrue // Since the resolve/reject is deferred.\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Shortcut for trapping a rejection.\r\n\t * @param onRejected\r\n\t * @returns {PromiseBase<TResult>}\r\n\t */\r\n\t'catch'<TResult>(onRejected:Promise.Reject<TResult>):PromiseBase<TResult>\r\n\t{\r\n\t\treturn this.then(VOID0, onRejected)\r\n\t}\r\n\r\n\t/**\r\n\t * Shortcut for trapping a rejection but will allow exceptions to propagate within the onRejected handler.\r\n\t * @param onRejected\r\n\t * @returns {PromiseBase<TResult>}\r\n\t */\r\n\tcatchAllowFatal<TResult>(onRejected:Promise.Reject<TResult>):PromiseBase<TResult>\r\n\t{\r\n\t\treturn this.thenAllowFatal(VOID0, onRejected)\r\n\t}\r\n\r\n\t/**\r\n\t * Shortcut to for handling either resolve or reject.\r\n\t * @param fin\r\n\t * @returns {PromiseBase<TResult>}\r\n\t */\r\n\t'finally'<TResult>(fin:()=>Promise.Resolution<TResult>):PromiseBase<TResult>\r\n\t{\r\n\t\treturn this.then(fin, fin);\r\n\t}\r\n\r\n\t/**\r\n\t * Shortcut to for handling either resolve or reject but will allow exceptions to propagate within the handler.\r\n\t * @param fin\r\n\t * @returns {PromiseBase<TResult>}\r\n\t */\r\n\tfinallyAllowFatal<TResult>(fin:()=>Promise.Resolution<TResult>):PromiseBase<TResult>\r\n\t{\r\n\t\treturn this.thenAllowFatal(fin, fin);\r\n\t}\r\n\r\n\t/**\r\n\t * Shortcut to for handling either resolve or reject.  Returns the current promise instead.\r\n\t * You may not need an additional promise result, and this will not create a new one.\r\n\t * @param fin\r\n\t * @param synchronous\r\n\t * @returns {PromiseBase}\r\n\t */\r\n\tfinallyThis(fin:()=>void, synchronous?:boolean):this\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\tvar f:()=>void = synchronous ? f : ()=>deferImmediate(fin);\r\n\t\tthis.thenThis(f, f);\r\n\t\treturn this;\r\n\t}\r\n\r\n}\r\n\r\nexport abstract class Resolvable<T> extends PromiseBase<T>\r\n{\r\n\r\n\tthenSynchronous<TResult>(\r\n\t\tonFulfilled:Promise.Fulfill<T,TResult>,\r\n\t\tonRejected?:Promise.Reject<TResult>):PromiseBase<TResult>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\ttry\r\n\t\t{\r\n\t\t\tswitch(this.state)\r\n\t\t\t{\r\n\t\t\t\tcase Promise.State.Fulfilled:\r\n\t\t\t\t\treturn onFulfilled\r\n\t\t\t\t\t\t? resolve(this._result, onFulfilled, Promise.resolve)\r\n\t\t\t\t\t\t: <any>this; // Provided for catch cases.\r\n\t\t\t\tcase Promise.State.Rejected:\r\n\t\t\t\t\treturn onRejected\r\n\t\t\t\t\t\t? resolve(this._error, onRejected, Promise.resolve)\r\n\t\t\t\t\t\t: <any>this;\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch(ex)\r\n\t\t{\r\n\t\t\treturn new Rejected<any>(ex);\r\n\t\t}\r\n\r\n\t\tthrow new Error(\"Invalid state for a resolved promise.\");\r\n\t}\r\n\r\n\tthenThis(\r\n\t\tonFulfilled:(v?:T)=>any,\r\n\t\tonRejected?:(v?:any)=>any):this\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tswitch(this.state)\r\n\t\t{\r\n\t\t\tcase Promise.State.Fulfilled:\r\n\t\t\t\tif(onFulfilled) onFulfilled(this._result);\r\n\t\t\t\tbreak;\r\n\t\t\tcase Promise.State.Rejected:\r\n\t\t\t\tif(onRejected) onRejected(this._error);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * The simplest usable version of a promise which returns synchronously the resolved state provided.\r\n */\r\nexport abstract class Resolved<T> extends Resolvable<T>\r\n{\r\n\tconstructor(state:Promise.State, result:T, error?:any)\r\n\t{\r\n\t\tsuper();\r\n\t\tthis._result = result;\r\n\t\tthis._error = error;\r\n\t\tthis._state = state;\r\n\t}\r\n\r\n\r\n}\r\n\r\n/**\r\n * A fulfilled Resolved<T>.  Provided for readability.\r\n */\r\nexport class Fulfilled<T> extends Resolved<T>\r\n{\r\n\tconstructor(value?:T)\r\n\t{\r\n\t\tsuper(Promise.State.Fulfilled, value);\r\n\t}\r\n}\r\n\r\n/**\r\n * A rejected Resolved<T>.  Provided for readability.\r\n */\r\nexport class Rejected<T> extends Resolved<T>\r\n{\r\n\tconstructor(error:any)\r\n\t{\r\n\t\tsuper(Promise.State.Rejected, VOID0, error);\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * Provided as a means for extending the interface of other PromiseLike<T> objects.\r\n */\r\nclass PromiseWrapper<T> extends Resolvable<T>\r\n{\r\n\tconstructor(private _target:PromiseLike<T>)\r\n\t{\r\n\t\tsuper();\r\n\r\n\t\tif(!_target)\r\n\t\t\tthrow new ArgumentNullException(TARGET);\r\n\r\n\t\tif(!isPromise(_target))\r\n\t\t\tthrow new ArgumentException(TARGET, \"Must be a promise-like object.\");\r\n\r\n\t\t_target.then(\r\n\t\t\tv=>\r\n\t\t\t{\r\n\t\t\t\tthis._state = Promise.State.Fulfilled;\r\n\t\t\t\tthis._result = v;\r\n\t\t\t\tthis._error = VOID0;\r\n\t\t\t\tthis._target = VOID0;\r\n\t\t\t},\r\n\t\t\te=>\r\n\t\t\t{\r\n\t\t\t\tthis._state = Promise.State.Rejected;\r\n\t\t\t\tthis._error = e;\r\n\t\t\t\tthis._target = VOID0;\r\n\t\t\t})\r\n\t}\r\n\r\n\tthenSynchronous<TResult>(\r\n\t\tonFulfilled:Promise.Fulfill<T,TResult>,\r\n\t\tonRejected?:Promise.Reject<TResult>):PromiseBase<TResult>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tvar t = this._target;\r\n\t\tif(!t) return super.thenSynchronous(onFulfilled, onRejected);\r\n\r\n\t\treturn new Promise<TResult>((resolve, reject)=>\r\n\t\t{\r\n\t\t\thandleDispatch(t,\r\n\t\t\t\tresult=>handleResolutionMethods(resolve, reject, result, onFulfilled),\r\n\t\t\t\terror=>onRejected\r\n\t\t\t\t\t? handleResolutionMethods(resolve, null, error, onRejected)\r\n\t\t\t\t\t: reject(error)\r\n\t\t\t);\r\n\t\t}, true);\r\n\t}\r\n\r\n\r\n\tthenThis(\r\n\t\tonFulfilled:(v?:T)=>any,\r\n\t\tonRejected?:(v?:any)=>any):this\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tvar t = this._target;\r\n\t\tif(!t) return <any>super.thenThis(onFulfilled, onRejected);\r\n\t\thandleDispatch(t, onFulfilled, onRejected);\r\n\t\treturn this;\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis._target = VOID0;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * This promise class that facilitates pending resolution.\r\n */\r\nexport class Promise<T> extends Resolvable<T>\r\n{\r\n\r\n\tprivate _waiting:IPromiseCallbacks<any>[];\r\n\r\n\t/*\r\n\t * A note about deferring:\r\n\t * The caller can set resolveImmediate to true if they intend to initialize code that will end up being deferred itself.\r\n\t * This eliminates the extra defer that will occur internally.\r\n\t * But for the most part, resolveImmediate = false (the default) will ensure the constructor will not block.\r\n\t *\r\n\t * resolveUsing allows for the same ability but does not defer by default: allowing the caller to take on the work load.\r\n\t * If calling resolve or reject and a deferred response is desired, then use deferImmediate with a closure to do so.\r\n\t */\r\n\r\n\tconstructor(\r\n\t\tresolver?:Promise.Executor<T>, forceSynchronous:boolean = false)\r\n\t{\r\n\t\tsuper();\r\n\r\n\t\tif(resolver) this.resolveUsing(resolver, forceSynchronous);\r\n\t}\r\n\r\n\r\n\tthenSynchronous<TResult>(\r\n\t\tonFulfilled:Promise.Fulfill<T,TResult>,\r\n\t\tonRejected?:Promise.Reject<TResult>):PromiseBase<TResult>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\t// Already fulfilled?\r\n\t\tif(this._state) return super.thenSynchronous(onFulfilled, onRejected);\r\n\r\n\t\tvar p = new Promise<TResult>();\r\n\t\t(this._waiting || (this._waiting = []))\r\n\t\t\t.push(pools.PromiseCallbacks.init(onFulfilled, onRejected, p));\r\n\t\treturn p;\r\n\t}\r\n\r\n\tthenThis(\r\n\t\tonFulfilled:(v?:T)=>any,\r\n\t\tonRejected?:(v?:any)=>any):this\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\t// Already fulfilled?\r\n\t\tif(this._state)\r\n\t\t\treturn <any>super.thenThis(onFulfilled, onRejected);\r\n\r\n\t\t(this._waiting || (this._waiting = []))\r\n\t\t\t.push(pools.PromiseCallbacks.init(onFulfilled, onRejected));\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\r\n\tprotected _onDispose()\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis._resolvedCalled = VOID0;\r\n\t}\r\n\r\n\t// Protects against double calling.\r\n\tprotected _resolvedCalled:boolean;\r\n\r\n\tresolveUsing(\r\n\t\tresolver:Promise.Executor<T>,\r\n\t\tforceSynchronous:boolean = false,\r\n\t\tthrowIfSettled:boolean = false)\r\n\t{\r\n\t\tif(!resolver)\r\n\t\t\tthrow new ArgumentNullException(\"resolver\");\r\n\t\tif(this._resolvedCalled)\r\n\t\t\tthrow new InvalidOperationException(\".resolve() already called.\");\r\n\t\tif(this.state)\r\n\t\t\tthrow new InvalidOperationException(\"Already resolved: \" + Promise.State[this.state]);\r\n\r\n\t\tthis._resolvedCalled = true;\r\n\r\n\t\tvar state = 0;\r\n\t\tvar rejectHandler = (reason:any)=>\r\n\t\t{\r\n\t\t\tif(state)\r\n\t\t\t{\r\n\t\t\t\t// Someone else's promise handling down stream could double call this. :\\\r\n\t\t\t\tconsole.warn(state== -1\r\n\t\t\t\t\t? \"Rejection called multiple times\"\r\n\t\t\t\t\t: \"Rejection called after fulfilled.\");\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tstate = -1;\r\n\t\t\t\tthis._resolvedCalled = false;\r\n\t\t\t\tthis.reject(reason);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tvar fulfillHandler = (v:any)=>\r\n\t\t{\r\n\t\t\tif(state)\r\n\t\t\t{\r\n\t\t\t\t// Someone else's promise handling down stream could double call this. :\\\r\n\t\t\t\tconsole.warn(state==1\r\n\t\t\t\t\t? \"Fulfill called multiple times\"\r\n\t\t\t\t\t: \"Fulfill called after rejection.\");\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tstate = 1;\r\n\t\t\t\tthis._resolvedCalled = false;\r\n\t\t\t\tthis.resolve(v);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// There are some performance edge cases where there caller is not blocking upstream and does not need to defer.\r\n\t\tif(forceSynchronous)\r\n\t\t\tresolver(fulfillHandler, rejectHandler);\r\n\t\telse\r\n\t\t\tdeferImmediate(()=>resolver(fulfillHandler, rejectHandler));\r\n\r\n\t}\r\n\r\n\r\n\tprivate _emitDisposalRejection(p:PromiseBase<any>):boolean\r\n\t{\r\n\t\tvar d = p.wasDisposed;\r\n\t\tif(d) this._rejectInternal(newODE());\r\n\t\treturn d;\r\n\t}\r\n\r\n\tprivate _resolveInternal(result?:T|PromiseLike<T>):void\r\n\t{\r\n\t\tif(this.wasDisposed) return;\r\n\r\n\t\t// Note: Avoid recursion if possible.\r\n\r\n\t\t// Check ahead of time for resolution and resolve appropriately\r\n\t\twhile(result instanceof PromiseBase)\r\n\t\t{\r\n\t\t\tlet r:PromiseBase<T> = <any>result;\r\n\t\t\tif(this._emitDisposalRejection(r)) return;\r\n\t\t\tswitch(r.state)\r\n\t\t\t{\r\n\t\t\t\tcase Promise.State.Pending:\r\n\t\t\t\t\tr.thenSynchronous(\r\n\t\t\t\t\t\tv=>this._resolveInternal(v),\r\n\t\t\t\t\t\te=>this._rejectInternal(e)\r\n\t\t\t\t\t);\r\n\t\t\t\t\treturn;\r\n\t\t\t\tcase Promise.State.Rejected:\r\n\t\t\t\t\tthis._rejectInternal(r.error);\r\n\t\t\t\t\treturn;\r\n\t\t\t\tcase Promise.State.Fulfilled:\r\n\t\t\t\t\tresult = r.result;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif(isPromise(result))\r\n\t\t{\r\n\t\t\tresult.then(\r\n\t\t\t\tv=>this._resolveInternal(v),\r\n\t\t\t\te=>this._rejectInternal(e)\r\n\t\t\t);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis._state = Promise.State.Fulfilled;\r\n\r\n\t\t\tthis._result = result;\r\n\t\t\tthis._error = VOID0;\r\n\t\t\tvar o = this._waiting;\r\n\t\t\tif(o)\r\n\t\t\t{\r\n\t\t\t\tthis._waiting = VOID0;\r\n\t\t\t\tfor(let c of o)\r\n\t\t\t\t{\r\n\t\t\t\t\tlet {onFulfilled, promise} = c;\r\n\t\t\t\t\tpools.PromiseCallbacks.recycle(c);\r\n\t\t\t\t\t//let ex =\r\n\t\t\t\t\thandleResolution(promise, result, onFulfilled);\r\n\t\t\t\t\t//if(!p && ex) console.error(\"Unhandled exception in onFulfilled:\",ex);\r\n\t\t\t\t}\r\n\t\t\t\to.length = 0;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate _rejectInternal(error:any):void\r\n\t{\r\n\r\n\t\tif(this.wasDisposed) return;\r\n\r\n\t\tthis._state = Promise.State.Rejected;\r\n\r\n\t\tthis._error = error;\r\n\t\tvar o = this._waiting;\r\n\t\tif(o)\r\n\t\t{\r\n\t\t\tthis._waiting = null; // null = finished. undefined = hasn't started.\r\n\t\t\tfor(let c of o)\r\n\t\t\t{\r\n\t\t\t\tlet {onRejected, promise} = c;\r\n\t\t\t\tpools.PromiseCallbacks.recycle(c);\r\n\t\t\t\tif(onRejected)\r\n\t\t\t\t{\r\n\t\t\t\t\t//let ex =\r\n\t\t\t\t\thandleResolution(promise, error, onRejected);\r\n\t\t\t\t\t//if(!p && ex) console.error(\"Unhandled exception in onRejected:\",ex);\r\n\t\t\t\t}\r\n\t\t\t\telse if(promise) promise.reject(error);\r\n\t\t\t}\r\n\t\t\to.length = 0;\r\n\t\t}\r\n\t}\r\n\r\n\tresolve(result?:T | PromiseLike<T>, throwIfSettled:boolean = false):void\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\tif(<any>result==this)\r\n\t\t\tthrow new InvalidOperationException(\"Cannot resolve a promise as itself.\");\r\n\r\n\t\tif(this._state)\r\n\t\t{\r\n\t\t\t// Same value? Ignore...\r\n\t\t\tif(!throwIfSettled || this._state==Promise.State.Fulfilled && this._result===result) return;\r\n\t\t\tthrow new InvalidOperationException(\"Changing the fulfilled state/value of a promise is not supported.\");\r\n\t\t}\r\n\r\n\t\tif(this._resolvedCalled)\r\n\t\t{\r\n\t\t\tif(throwIfSettled)\r\n\t\t\t\tthrow new InvalidOperationException(\".resolve() already called.\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis._resolveInternal(result);\r\n\t}\r\n\r\n\r\n\treject(error:any, throwIfSettled:boolean = false):void\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\tif(this._state)\r\n\t\t{\r\n\t\t\t// Same value? Ignore...\r\n\t\t\tif(!throwIfSettled || this._state==Promise.State.Rejected && this._error===error) return;\r\n\t\t\tthrow new InvalidOperationException(\"Changing the rejected state/value of a promise is not supported.\");\r\n\t\t}\r\n\r\n\t\tif(this._resolvedCalled)\r\n\t\t{\r\n\t\t\tif(throwIfSettled)\r\n\t\t\t\tthrow new InvalidOperationException(\".resolve() already called.\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis._rejectInternal(error);\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * By providing an ArrayPromise we expose useful methods/shortcuts for dealing with array results.\r\n */\r\nexport class ArrayPromise<T> extends Promise<T[]>\r\n{\r\n\r\n\t/**\r\n\t * Simplifies the use of a map function on an array of results when the source is assured to be an array.\r\n\t * @param transform\r\n\t * @returns {PromiseBase<Array<any>>}\r\n\t */\r\n\tmap<U>(transform:(value:T)=>U):ArrayPromise<U>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn new ArrayPromise<U>(resolve=>\r\n\t\t{\r\n\t\t\tthis.thenThis((result:T[])=>resolve(result.map(transform)));\r\n\t\t}, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Simplifies the use of a reduce function on an array of results when the source is assured to be an array.\r\n\t * @param reduction\r\n\t * @param initialValue\r\n\t * @returns {PromiseBase<any>}\r\n\t */\r\n\treduce<U>(\r\n\t\treduction:(previousValue:U, currentValue:T, i?:number, array?:T[]) => U,\r\n\t\tinitialValue?:U):PromiseBase<U>\r\n\t{\r\n\r\n\t\treturn this\r\n\t\t\t.thenSynchronous((result:T[])=>result.reduce(reduction, initialValue));\r\n\t}\r\n\r\n\tstatic fulfilled<T>(value:T[]):ArrayPromise<T>\r\n\t{\r\n\t\treturn new ArrayPromise<T>(resolve=>value, true);\r\n\t}\r\n}\r\n\r\n/**\r\n * A Promise collection exposes useful methods for handling a collection of promises and their results.\r\n */\r\nexport class PromiseCollection<T> extends DisposableBase\r\n{\r\n\tprivate _source:PromiseLike<T>[];\r\n\r\n\tconstructor(source:PromiseLike<T>[])\r\n\t{\r\n\t\tsuper();\r\n\t\tthis._source = source && source.slice() || [];\r\n\t}\r\n\r\n\tprotected _onDispose()\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis._source.length = 0;\r\n\t\tthis._source = null;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a copy of the source promises.\r\n\t * @returns {PromiseLike<PromiseLike<any>>[]}\r\n\t */\r\n\tget promises():PromiseLike<T>[]\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn this._source.slice();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a promise that is fulfilled with an array containing the fulfillment value of each promise, or is rejected with the same rejection reason as the first promise to be rejected.\r\n\t * @returns {PromiseBase<any>}\r\n\t */\r\n\tall():ArrayPromise<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn Promise.all(this._source);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a Promise that is resolved or rejected when any of the provided Promises are resolved\r\n\t * or rejected.\r\n\t * @returns {PromiseBase<any>} A new Promise.\r\n\t */\r\n\trace():PromiseBase<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn Promise.race(this._source);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a promise that is fulfilled with array of provided promises when all provided promises have resolved (fulfill or reject).\r\n\t * Unlike .all this method waits for all rejections as well as fulfillment.\r\n\t * @returns {PromiseBase<PromiseLike<any>[]>}\r\n\t */\r\n\twaitAll():ArrayPromise<PromiseLike<T>>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn Promise.waitAll(this._source);\r\n\t}\r\n\r\n\t/**\r\n\t * Waits for all the values to resolve and then applies a transform.\r\n\t * @param transform\r\n\t * @returns {PromiseBase<Array<any>>}\r\n\t */\r\n\tmap<U>(transform:(value:T)=>U):ArrayPromise<U>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn new ArrayPromise<U>(resolve=>\r\n\t\t{\r\n\t\t\tthis.all()\r\n\t\t\t\t.thenThis((result:T[])=>resolve(result.map(transform)));\r\n\t\t}, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Applies a transform to each promise and defers the result.\r\n\t * Unlike map, this doesn't wait for all promises to resolve, ultimately improving the async nature of the request.\r\n\t * @param transform\r\n\t * @returns {PromiseCollection<U>}\r\n\t */\r\n\r\n\tpipe<U>(transform:(value:T)=>U|PromiseLike<U>):PromiseCollection<U>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn new PromiseCollection<U>(this._source.map(p=>handleSyncIfPossible(p, transform)));\r\n\t}\r\n\r\n\t/**\r\n\t * Behaves like array reduce.\r\n\t * Creates the promise chain necessary to produce the desired result.\r\n\t * @param reduction\r\n\t * @param initialValue\r\n\t * @returns {PromiseBase<PromiseLike<any>>}\r\n\t */\r\n\treduce<U>(\r\n\t\treduction:(previousValue:U, currentValue:T, i?:number, array?:PromiseLike<T>[]) => U,\r\n\t\tinitialValue?:U|PromiseLike<U>):PromiseBase<U>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn Promise.wrap(this._source\r\n\t\t\t.reduce(\r\n\t\t\t\t(\r\n\t\t\t\t\tprevious:PromiseLike<U>,\r\n\t\t\t\t\tcurrent:PromiseLike<T>,\r\n\t\t\t\t\ti:number,\r\n\t\t\t\t\tarray:PromiseLike<T>[]) =>\r\n\t\t\t\t\thandleSyncIfPossible(previous,\r\n\t\t\t\t\t\tp=>handleSyncIfPossible(current, c=>reduction(p, c, i, array))),\r\n\r\n\t\t\t\tisPromise(initialValue)\r\n\t\t\t\t\t? initialValue\r\n\t\t\t\t\t: new Fulfilled(initialValue)));\r\n\t}\r\n}\r\n\r\nmodule pools\r\n{\r\n\r\n\t// export module pending\r\n\t// {\r\n\t//\r\n\t//\r\n\t// \tvar pool:ObjectPool<Promise<any>>;\r\n\t//\r\n\t// \tfunction getPool()\r\n\t// \t{\r\n\t// \t\treturn pool || (pool = new ObjectPool<Promise<any>>(40, factory, c=>c.dispose()));\r\n\t// \t}\r\n\t//\r\n\t// \tfunction factory():Promise<any>\r\n\t// \t{\r\n\t// \t\treturn new Promise();\r\n\t// \t}\r\n\t//\r\n\t// \texport function get():Promise<any>\r\n\t// \t{\r\n\t// \t\tvar p:any = getPool().take();\r\n\t// \t\tp.__wasDisposed = false;\r\n\t// \t\tp._state = Promise.State.Pending;\r\n\t// \t\treturn p;\r\n\t// \t}\r\n\t//\r\n\t// \texport function recycle<T>(c:Promise<T>):void\r\n\t// \t{\r\n\t// \t\tif(c) getPool().add(c);\r\n\t// \t}\r\n\t//\r\n\t// }\r\n\t//\r\n\t// export function recycle<T>(c:PromiseBase<T>):void\r\n\t// {\r\n\t// \tif(!c) return;\r\n\t// \tif(c instanceof Promise && c.constructor==Promise) pending.recycle(c);\r\n\t// \telse c.dispose();\r\n\t// }\r\n\r\n\r\n\texport module PromiseCallbacks\r\n\t{\r\n\r\n\t\tvar pool:ObjectPool<IPromiseCallbacks<any>>;\r\n\r\n\t\tfunction getPool()\r\n\t\t{\r\n\t\t\treturn pool\r\n\t\t\t\t|| (pool = new ObjectPool<IPromiseCallbacks<any>>(40, factory, c=>\r\n\t\t\t\t{\r\n\t\t\t\t\tc.onFulfilled = null;\r\n\t\t\t\t\tc.onRejected = null;\r\n\t\t\t\t\tc.promise = null;\r\n\t\t\t\t}));\r\n\t\t}\r\n\r\n\t\tfunction factory():IPromiseCallbacks<any>\r\n\t\t{\r\n\t\t\treturn {\r\n\t\t\t\tonFulfilled: null,\r\n\t\t\t\tonRejected: null,\r\n\t\t\t\tpromise: null\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\texport function init<T>(\r\n\t\t\tonFulfilled:Promise.Fulfill<T,any>,\r\n\t\t\tonRejected?:Promise.Reject<any>,\r\n\t\t\tpromise?:Promise<any>):IPromiseCallbacks<T>\r\n\t\t{\r\n\r\n\t\t\tvar c = getPool().take();\r\n\t\t\tc.onFulfilled = onFulfilled;\r\n\t\t\tc.onRejected = onRejected;\r\n\t\t\tc.promise = promise;\r\n\t\t\treturn c;\r\n\t\t}\r\n\r\n\t\texport function recycle<T>(c:IPromiseCallbacks<T>):void\r\n\t\t{\r\n\t\t\tgetPool().add(c);\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\n\r\nexport module Promise\r\n{\r\n\r\n\t/**\r\n\t * The state of a promise.\r\n\t * https://github.com/domenic/promises-unwrapping/blob/master/docs/states-and-fates.md\r\n\t * If a promise is disposed the value will be undefined which will also evaluate (promise.state)==false.\r\n\t */\r\n\texport enum State {\r\n\t\tPending   = 0,\r\n\t\tFulfilled = 1,\r\n\t\tRejected  = -1\r\n\t}\r\n\tObject.freeze(State);\r\n\r\n\texport type Resolution<TResult> = PromiseLike<TResult>|TResult|void;\r\n\r\n\texport interface Fulfill<T, TResult>\r\n\t{\r\n\t\t(value:T):Resolution<TResult>\r\n\t}\r\n\r\n\texport interface Reject<TResult>\r\n\t{\r\n\t\t(err?:any):Resolution<TResult>\r\n\t}\r\n\r\n\texport interface Then<T,TResult>\r\n\t{\r\n\t\t(\r\n\t\t\tonFulfilled:Fulfill<T,TResult>,\r\n\t\t\tonRejected?:Reject<TResult>):PromiseLike<TResult>\r\n\t}\r\n\r\n\texport interface Executor<T>\r\n\t{\r\n\t\t(\r\n\t\t\tresolve:(value?:T | PromiseLike<T>) => void,\r\n\t\t\treject:(reason?:any) => void):void;\r\n\t}\r\n\r\n\t//noinspection JSUnusedGlobalSymbols\r\n\texport interface Factory\r\n\t{\r\n\t\t<T>(executor:Executor<T>):PromiseLike<T>;\r\n\t}\r\n\r\n\texport function factory<T>(e:Executor<T>):Promise<T>\r\n\t{\r\n\t\treturn new Promise(e);\r\n\t}\r\n\r\n\t/**\r\n\t * Takes a set of promises and returns a PromiseCollection.\r\n\t * @param promises\r\n\t */\r\n\texport function group<T>(promises:PromiseLike<T>[]):PromiseCollection<T>\r\n\texport function group<T>(\r\n\t\tpromise:PromiseLike<T>,\r\n\t\t...rest:PromiseLike<T>[]):PromiseCollection<T>\r\n\texport function group(\r\n\t\tfirst:PromiseLike<any>|PromiseLike<any>[],\r\n\t\t...rest:PromiseLike<any>[]):PromiseCollection<any>\r\n\t{\r\n\r\n\t\tif(!first && !rest.length) throw new ArgumentNullException(\"promises\");\r\n\t\treturn new PromiseCollection((Array.isArray(first) ? first : [first]).concat(rest));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a promise that is fulfilled with an array containing the fulfillment value of each promise, or is rejected with the same rejection reason as the first promise to be rejected.\r\n\t */\r\n\texport function all<T>(promises:PromiseLike<T>[]):ArrayPromise<T>\r\n\texport function all<T>(promise:PromiseLike<T>, ...rest:PromiseLike<T>[]):ArrayPromise<T>\r\n\texport function all(\r\n\t\tfirst:PromiseLike<any>|PromiseLike<any>[],\r\n\t\t...rest:PromiseLike<any>[]):ArrayPromise<any>\r\n\t{\r\n\t\tif(!first && !rest.length) throw new ArgumentNullException(\"promises\");\r\n\t\tvar promises = (Array.isArray(first) ? first : [first]).concat(rest); // yay a copy!\r\n\t\tif(!promises.length || promises.every(v=>!v)) return new ArrayPromise<any>(\r\n\t\t\tr=>r(promises), true); // it's a new empty, reuse it. :|\r\n\r\n\t\t// Eliminate deferred and take the parent since all .then calls happen on next cycle anyway.\r\n\t\treturn new ArrayPromise<any>((resolve, reject)=>\r\n\t\t{\r\n\t\t\tlet result:any[] = [];\r\n\t\t\tlet len = promises.length;\r\n\t\t\tresult.length = len;\r\n\t\t\t// Using a set instead of -- a number is more reliable if just in case one of the provided promises resolves twice.\r\n\t\t\tlet remaining = new Set(promises.map((v, i)=>i)); // get all the indexes...\r\n\r\n\t\t\tlet cleanup = ()=>\r\n\t\t\t{\r\n\t\t\t\treject = null;\r\n\t\t\t\tresolve = null;\r\n\t\t\t\tpromises.length = 0;\r\n\t\t\t\tpromises = null;\r\n\t\t\t\tremaining.dispose();\r\n\t\t\t\tremaining = null;\r\n\t\t\t};\r\n\r\n\t\t\tlet checkIfShouldResolve = ()=>\r\n\t\t\t{\r\n\t\t\t\tlet r = resolve;\r\n\t\t\t\tif(r && !remaining.count)\r\n\t\t\t\t{\r\n\t\t\t\t\tcleanup();\r\n\t\t\t\t\tr(result);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tlet onFulfill = (v:any, i:number)=>\r\n\t\t\t{\r\n\t\t\t\tif(resolve)\r\n\t\t\t\t{\r\n\t\t\t\t\tresult[i] = v;\r\n\t\t\t\t\tremaining.remove(i);\r\n\t\t\t\t\tcheckIfShouldResolve();\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tlet onReject = (e?:any)=>\r\n\t\t\t{\r\n\t\t\t\tlet r = reject;\r\n\t\t\t\tif(r)\r\n\t\t\t\t{\r\n\t\t\t\t\tcleanup();\r\n\t\t\t\t\tr(e);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tfor(let i = 0; remaining && i<len; i++)\r\n\t\t\t{\r\n\t\t\t\tlet p = promises[i];\r\n\t\t\t\tif(p) p.then(v=>onFulfill(v, i), onReject);\r\n\t\t\t\telse remaining.remove(i);\r\n\t\t\t\tcheckIfShouldResolve();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a promise that is fulfilled with array of provided promises when all provided promises have resolved (fulfill or reject).\r\n\t * Unlike .all this method waits for all rejections as well as fulfillment.\r\n\t */\r\n\texport function waitAll<T>(promises:PromiseLike<T>[]):ArrayPromise<PromiseLike<T>>\r\n\texport function waitAll<T>(\r\n\t\tpromise:PromiseLike<T>,\r\n\t\t...rest:PromiseLike<T>[]):ArrayPromise<PromiseLike<T>>\r\n\texport function waitAll(\r\n\t\tfirst:PromiseLike<any>|PromiseLike<any>[],\r\n\t\t...rest:PromiseLike<any>[]):ArrayPromise<PromiseLike<any>>\r\n\t{\r\n\t\tif(!first && !rest.length) throw new ArgumentNullException(\"promises\");\r\n\t\tvar promises = (Array.isArray(first) ? first : [first]).concat(rest); // yay a copy!\r\n\t\tif(!promises.length || promises.every(v=>!v)) return new ArrayPromise<any>(\r\n\t\t\tr=>r(promises), true); // it's a new empty, reuse it. :|\r\n\r\n\r\n\t\t// Eliminate deferred and take the parent since all .then calls happen on next cycle anyway.\r\n\t\treturn new ArrayPromise<any>((resolve, reject)=>\r\n\t\t{\r\n\t\t\tlet len = promises.length;\r\n\r\n\t\t\t// Using a set instead of -- a number is more reliable if just in case one of the provided promises resolves twice.\r\n\t\t\tlet remaining = new Set(promises.map((v, i)=>i)); // get all the indexes...\r\n\r\n\t\t\tlet cleanup = ()=>\r\n\t\t\t{\r\n\t\t\t\treject = null;\r\n\t\t\t\tresolve = null;\r\n\t\t\t\tremaining.dispose();\r\n\t\t\t\tremaining = null;\r\n\t\t\t};\r\n\r\n\t\t\tlet checkIfShouldResolve = ()=>\r\n\t\t\t{\r\n\t\t\t\tlet r = resolve;\r\n\t\t\t\tif(r && !remaining.count)\r\n\t\t\t\t{\r\n\t\t\t\t\tcleanup();\r\n\t\t\t\t\tr(promises);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tlet onResolved = (i:number)=>\r\n\t\t\t{\r\n\t\t\t\tif(remaining)\r\n\t\t\t\t{\r\n\t\t\t\t\tremaining.remove(i);\r\n\t\t\t\t\tcheckIfShouldResolve();\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tfor(let i = 0; remaining && i<len; i++)\r\n\t\t\t{\r\n\t\t\t\tlet p = promises[i];\r\n\t\t\t\tif(p) p.then(v=>onResolved(i), e=>onResolved(i));\r\n\t\t\t\telse onResolved(i);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a Promise that is resolved or rejected when any of the provided Promises are resolved\r\n\t * or rejected.\r\n\t * @param promises An array of Promises.\r\n\t * @returns A new Promise.\r\n\t */\r\n\texport function race<T>(promises:PromiseLike<T>[]):PromiseBase<T>\r\n\texport function race<T>(promise:PromiseLike<T>, ...rest:PromiseLike<T>[]):PromiseBase<T>\r\n\texport function race(\r\n\t\tfirst:PromiseLike<any>|PromiseLike<any>[],\r\n\t\t...rest:PromiseLike<any>[]):PromiseBase<any>\r\n\t{\r\n\t\tvar promises = first && (Array.isArray(first) ? first : [first]).concat(rest); // yay a copy?\r\n\t\tif(!promises || !promises.length || !(promises = promises.filter(v=>v!=null)).length)\r\n\t\t\tthrow new ArgumentException(\"Nothing to wait for.\");\r\n\r\n\t\tvar len = promises.length;\r\n\r\n\t\t// Only one?  Nothing to race.\r\n\t\tif(len==1) return wrap(promises[0]);\r\n\r\n\t\t// Look for already resolved promises and the first one wins.\r\n\t\tfor(let i = 0; i<len; i++)\r\n\t\t{\r\n\t\t\tvar p:any = promises[i];\r\n\t\t\tif(p instanceof PromiseBase && p.isSettled) return p;\r\n\t\t}\r\n\r\n\t\treturn new Promise((resolve, reject)=>\r\n\t\t{\r\n\t\t\tlet cleanup = ()=>\r\n\t\t\t{\r\n\t\t\t\treject = null;\r\n\t\t\t\tresolve = null;\r\n\t\t\t\tpromises.length = 0;\r\n\t\t\t\tpromises = null;\r\n\t\t\t};\r\n\r\n\t\t\tlet onResolve = (r:(x:any)=>void, v:any)=>\r\n\t\t\t{\r\n\t\t\t\tif(r)\r\n\t\t\t\t{\r\n\t\t\t\t\tcleanup();\r\n\t\t\t\t\tr(v);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tlet onFulfill = (v:any)=> onResolve(resolve, v);\r\n\t\t\tlet onReject = (e?:any)=> onResolve(reject, e);\r\n\r\n\t\t\tfor(let p of promises)\r\n\t\t\t{\r\n\t\t\t\tif(!resolve) break;\r\n\t\t\t\tp.then(onFulfill, onReject);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t// // race<T>(values: Iterable<T | PromiseLike<T>>): Promise<T>;\r\n\r\n\t/**\r\n\t * Creates a new resolved promise .\r\n\t * @returns A resolved promise.\r\n\t */\r\n\texport function resolve():PromiseBase<void>\r\n\r\n\t/**\r\n\t * Creates a new resolved promise for the provided value.\r\n\t * @param value A value or promise.\r\n\t * @returns A promise whose internal state matches the provided promise.\r\n\t */\r\n\texport function resolve<T>(value:T | PromiseLike<T>):PromiseBase<T>;\r\n\texport function resolve(value?:any):PromiseBase<any>\r\n\t{\r\n\r\n\t\treturn isPromise(value) ? wrap(value) : new Fulfilled(value);\r\n\t}\r\n\r\n\t/**\r\n\t * Syntactic shortcut for avoiding 'new'.\r\n\t * @param resolver\r\n\t * @param forceSynchronous\r\n\t * @returns {Promise}\r\n\t */\r\n\texport function using<T>(\r\n\t\tresolver:Promise.Executor<T>,\r\n\t\tforceSynchronous:boolean = false):PromiseBase<T>\r\n\t{\r\n\t\treturn new Promise<T>(resolver, forceSynchronous);\r\n\t}\r\n\r\n\t/**\r\n\t * Takes a set of values or promises and returns a PromiseCollection.\r\n\t * Similar to 'group' but calls resolve on each entry.\r\n\t * @param resolutions\r\n\t */\r\n\texport function resolveAll<T>(resolutions:Array<T | PromiseLike<T>>):PromiseCollection<T>;\r\n\texport function resolveAll<T>(\r\n\t\tpromise:T | PromiseLike<T>,\r\n\t\t...rest:Array<T | PromiseLike<T>>):PromiseCollection<T>\r\n\texport function resolveAll(\r\n\t\tfirst:any | PromiseLike<any>|Array<any | PromiseLike<any>>,\r\n\t\t...rest:Array<any | PromiseLike<any>>):PromiseCollection<any>\r\n\t{\r\n\t\tif(!first && !rest.length) throw new ArgumentNullException(\"resolutions\");\r\n\t\treturn new PromiseCollection(\r\n\t\t\t(Array.isArray(first) ? first : [first])\r\n\t\t\t\t.concat(rest)\r\n\t\t\t\t.map((v:any)=>resolve(v)));\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a PromiseCollection containing promises that will resolve on the next tick using the transform function.\r\n\t * This utility function does not chain promises together to create the result,\r\n\t * it only uses one promise per transform.\r\n\t * @param source\r\n\t * @param transform\r\n\t * @returns {PromiseCollection<T>}\r\n\t */\r\n\texport function map<T,U>(source:T[], transform:(value:T)=>U):PromiseCollection<U>\r\n\t{\r\n\t\treturn new PromiseCollection(source.map(d=>new Promise<U>((r, j)=>\r\n\t\t{\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tr(transform(d));\r\n\t\t\t}\r\n\t\t\tcatch(ex)\r\n\t\t\t{\r\n\t\t\t\tj(ex);\r\n\t\t\t}\r\n\t\t})));\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new rejected promise for the provided reason.\r\n\t * @param reason The reason the promise was rejected.\r\n\t * @returns A new rejected Promise.\r\n\t */\r\n\texport function reject<T>(reason:T):PromiseBase<T>\r\n\t{\r\n\t\treturn new Rejected<T>(reason);\r\n\t}\r\n\r\n\t/**\r\n\t * Takes any Promise-Like object and ensures an extended version of it from this module.\r\n\t * @param target The Promise-Like object\r\n\t * @returns A new target that simply extends the target.\r\n\t */\r\n\texport function wrap<T>(target:T|PromiseLike<T>):PromiseBase<T>\r\n\t{\r\n\t\tif(!target) throw new ArgumentNullException(TARGET);\r\n\t\treturn isPromise(target)\r\n\t\t\t? (target instanceof PromiseBase ? target : new PromiseWrapper(target))\r\n\t\t\t: new Fulfilled<T>(target);\r\n\t}\r\n\r\n\t/**\r\n\t * A function that acts like a 'then' method (aka then-able) can be extended by providing a function that takes an onFulfill and onReject.\r\n\t * @param then\r\n\t * @returns {PromiseWrapper<T>}\r\n\t */\r\n\texport function createFrom<T,TResult>(then:Then<T,TResult>):PromiseBase<T>\r\n\t{\r\n\t\tif(!then) throw new ArgumentNullException(THEN);\r\n\t\treturn new PromiseWrapper({then: then});\r\n\t}\r\n\r\n}\r\n\r\n\r\ninterface IPromiseCallbacks<T>\r\n{\r\n\tonFulfilled:Promise.Fulfill<T,any>;\r\n\tonRejected:Promise.Reject<any>;\r\n\tpromise?:Promise<any>;\r\n}\r\n\r\nexport default Promise;"]}