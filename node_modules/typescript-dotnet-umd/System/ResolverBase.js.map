{"version":3,"sources":["System/ResolverBase.js","System/ResolverBase.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","DisposableBase_1","ArgumentNullException_1","extends_1","__extends","ResolverBase","_super","_valueFactory","_trapExceptions","_allowReset","call","this","ArgumentNullException","_isValueCreated","prototype","getError","_error","Object","defineProperty","get","enumerable","configurable","getValue","_","throwIfDisposed","Error","c","_value","ex","_onDispose","tryReset","DisposableBase","value"],"mappings":";;;;CAIA,SAAWA,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QAAoBG,UAANF,IAAiBF,OAAOC,QAAUC,OAElD,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,UAAW,8BAA+B,qCAAsC,cAAeN,IAEvH,SAAUI,EAASF,GAClB,YCPJ,IAAAM,GAAAJ,EAA6B,+BAE7BK,EAAAL,EAAoC,sCACpCM,EAAAN,EAA4B,cACtBO,EAAYD,EAAAA,WAQlBE,EAAA,SAAAC,GAMC,QAAAD,GACWE,EACFC,EACAC,GAGR,GADAH,EAAAI,KAAAC,MAJUA,KAAAJ,cAAAA,EACFI,KAAAH,gBAAAA,EACAG,KAAAF,YAAAA,GAGJF,EAAe,KAAM,IAAIL,GAAAU,sBAAsB,eACnDD,MAAKE,iBAAkB,EAqFzB,MAlG8CT,GAAAC,EAAAC,GAkBnCD,EAAAS,UAAAC,SAAV,WAEC,MAAOJ,MAAKK,QAGbC,OAAAC,eAAIb,EAAAS,UAAA,SDROK,ICQX,WAEC,MAAOR,MAAKI,YDPFK,YAAY,EACZC,cAAc,ICSzBhB,EAAAS,UAAAQ,SAAA,WAGC,GAAMC,GAAIZ,IAIV,IAFAY,EAAEC,kBAEqB,OAApBD,EAAEV,gBACJ,KAAM,IAAIY,OAAM,sBAEjB,KAAIF,EAAEV,iBAAmBU,EAAEhB,cAC3B,CACCgB,EAAEV,gBAAkB,IACpB,KAEC,GAAIa,GAAC,MACL,KAAIH,EAAEV,kBAAoBa,EAAIH,EAAEhB,eAChC,CACCgB,EAAEV,gBAAkB,KAChBF,KAAKF,cAAaE,KAAKJ,cAAgB,KAC3C,IAAIX,GAAI8B,GAGR,OAFAH,GAAEI,OAAS/B,EACX2B,EAAEP,OAAS,OACJpB,GAGT,MAAMgC,GAGL,GADAL,EAAEP,OAASY,GACPL,EAAEf,gBAAiB,KAAMoB,GDZjB,QCgBZL,EAAEV,iBAAkB,GAMtB,MAAOU,GAAEI,QAIVV,OAAAC,eAAIb,EAAAS,UAAA,YDnBOK,ICmBX,WAEC,MAAOR,MAAKF,eAAiBE,KAAKJ,eDlBxBa,YAAY,EACZC,cAAc,ICoBfhB,EAAAS,UAAAe,WAAV,WAEClB,KAAKJ,cAAgB,KACrBI,KAAKgB,OAAS,KACdhB,KAAKE,gBAAkB,MAGxBR,EAAAS,UAAAgB,SAAA,WAEC,GAAMP,GAAIZ,IAEV,OAAIY,GAAEhB,eAILgB,EAAEV,iBAAkB,EACpBU,EAAEI,OAAS,KACXJ,EAAEP,OAAS,QACJ,IANA,GAUVX,GAlG8CJ,EAAA8B,eAAxBpC,GAAAU,aAAYA,EAoGlCY,OAAAC,eAAAvB,EAAA,cAAAqC,OAAA,IDtBIrC,EAAAA,WCsBWU","file":"System/ResolverBase.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", \"./Disposable/DisposableBase\", \"./Exceptions/ArgumentNullException\", \"../extends\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    var DisposableBase_1 = require(\"./Disposable/DisposableBase\");\n    var ArgumentNullException_1 = require(\"./Exceptions/ArgumentNullException\");\n    var extends_1 = require(\"../extends\");\n    var __extends = extends_1.default;\n    var ResolverBase = (function (_super) {\n        __extends(ResolverBase, _super);\n        function ResolverBase(_valueFactory, _trapExceptions, _allowReset) {\n            _super.call(this);\n            this._valueFactory = _valueFactory;\n            this._trapExceptions = _trapExceptions;\n            this._allowReset = _allowReset;\n            if (!_valueFactory)\n                throw new ArgumentNullException_1.ArgumentNullException(\"valueFactory\");\n            this._isValueCreated = false;\n        }\n        ResolverBase.prototype.getError = function () {\n            return this._error;\n        };\n        Object.defineProperty(ResolverBase.prototype, \"error\", {\n            get: function () {\n                return this.getError();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        ResolverBase.prototype.getValue = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            if (_._isValueCreated === null)\n                throw new Error(\"Recursion detected.\");\n            if (!_._isValueCreated && _._valueFactory) {\n                _._isValueCreated = null;\n                try {\n                    var c = void 0;\n                    if (!_._isValueCreated && (c = _._valueFactory)) {\n                        _._isValueCreated = null;\n                        if (!this._allowReset)\n                            this._valueFactory = null;\n                        var v = c();\n                        _._value = v;\n                        _._error = void 0;\n                        return v;\n                    }\n                }\n                catch (ex) {\n                    _._error = ex;\n                    if (!_._trapExceptions)\n                        throw ex;\n                }\n                finally {\n                    _._isValueCreated = true;\n                }\n            }\n            return _._value;\n        };\n        Object.defineProperty(ResolverBase.prototype, \"canReset\", {\n            get: function () {\n                return this._allowReset && !!this._valueFactory;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        ResolverBase.prototype._onDispose = function () {\n            this._valueFactory = null;\n            this._value = null;\n            this._isValueCreated = null;\n        };\n        ResolverBase.prototype.tryReset = function () {\n            var _ = this;\n            if (!_._valueFactory)\n                return false;\n            else {\n                _._isValueCreated = false;\n                _._value = null;\n                _._error = void 0;\n                return true;\n            }\n        };\n        return ResolverBase;\n    }(DisposableBase_1.DisposableBase));\n    exports.ResolverBase = ResolverBase;\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = ResolverBase;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {DisposableBase} from \"./Disposable/DisposableBase\";\r\nimport {Func} from \"./FunctionTypes\";\r\nimport {ArgumentNullException} from \"./Exceptions/ArgumentNullException\";\r\nimport __extendsImport from \"../extends\";\r\nconst __extends = __extendsImport;\r\n\r\n/**\r\n * The ResolverBase class handles resolving a factory method and detects recursion.\r\n * Since JS does not have a synchronization mechanism (lock or otherwise)\r\n * we have to prevent getValue from double triggering the value factory (optimistic concurrency)\r\n * or returning return a value that is intermediate between resolving and resolved.\r\n */\r\nexport abstract class ResolverBase<T> extends DisposableBase\r\n{\r\n\r\n\tprotected _isValueCreated:boolean;\r\n\tprotected _value:T;\r\n\r\n\tconstructor(\r\n\t\tprotected _valueFactory:Func<T>,\r\n\t\tprivate _trapExceptions:boolean,\r\n\t\tprivate _allowReset?:boolean)\r\n\t{\r\n\t\tsuper();\r\n\t\tif(!_valueFactory) throw new ArgumentNullException(\"valueFactory\");\r\n\t\tthis._isValueCreated = false;\r\n\t}\r\n\r\n\tprotected _error:any;\r\n\r\n\tprotected getError():any\r\n\t{\r\n\t\treturn this._error;\r\n\t}\r\n\r\n\tget error():any\r\n\t{\r\n\t\treturn this.getError();\r\n\t}\r\n\r\n\tgetValue():T\r\n\t{\r\n\r\n\t\tconst _ = this;\r\n\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tif(_._isValueCreated===null)\r\n\t\t\tthrow new Error(\"Recursion detected.\");\r\n\r\n\t\tif(!_._isValueCreated && _._valueFactory)\r\n\t\t{\r\n\t\t\t_._isValueCreated = null; // Mark this as 'resolving'.\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tlet c:Func<T>;\r\n\t\t\t\tif(!_._isValueCreated && (c = _._valueFactory))\r\n\t\t\t\t{\r\n\t\t\t\t\t_._isValueCreated = null; // Mark this as 'resolving'.\r\n\t\t\t\t\tif(!this._allowReset) this._valueFactory = null;\r\n\t\t\t\t\tvar v = c();\r\n\t\t\t\t\t_._value = v;\r\n\t\t\t\t\t_._error = void 0;\r\n\t\t\t\t\treturn v;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tcatch(ex)\r\n\t\t\t{\r\n\t\t\t\t_._error = ex;\r\n\t\t\t\tif(!_._trapExceptions) throw ex;\r\n\t\t\t}\r\n\t\t\tfinally\r\n\t\t\t{\r\n\t\t\t\t_._isValueCreated = true;\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\r\n\t\treturn _._value;\r\n\r\n\t}\r\n\r\n\tget canReset():boolean\r\n\t{\r\n\t\treturn this._allowReset && !!this._valueFactory;\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tthis._valueFactory = null;\r\n\t\tthis._value = null;\r\n\t\tthis._isValueCreated = null;\r\n\t}\r\n\r\n\ttryReset():boolean\r\n\t{\r\n\t\tconst _ = this;\r\n\r\n\t\tif(!_._valueFactory)\r\n\t\t\treturn false;\r\n\t\telse\r\n\t\t{\r\n\t\t\t_._isValueCreated = false;\r\n\t\t\t_._value = null;\r\n\t\t\t_._error = void 0;\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\nexport default ResolverBase;"]}