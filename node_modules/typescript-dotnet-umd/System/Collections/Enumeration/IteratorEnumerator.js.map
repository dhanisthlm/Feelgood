{"version":3,"sources":["System/Collections/Enumeration/IteratorEnumerator.js","System/Collections/Enumeration/IteratorEnumerator.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","SimpleEnumerableBase_1","extends_1","__extends","VOID0","IteratorEnumerator","_super","_iterator","_isEndless","call","this","prototype","canMoveNext","moveNext","value","_","i","r","arguments","length","next","_current","done","dispose","getIsEndless","SimpleEnumerableBase","Object","defineProperty"],"mappings":";;;;CAIA,SAAWA,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QAAoBG,UAANF,IAAiBF,OAAOC,QAAUC,OAElD,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,UAAW,yBAA0B,oBAAqBN,IAElF,SAAUI,EAASF,GAClB,YCLJ,IAAAM,GAAAJ,EAAmC,0BACnCK,EAAAL,EAA4B,oBACtBM,EAAYD,EAAAA,WAEZE,EAAY,OAQlBC,EAAA,SAAAC,GAMC,QAAAD,GAAoBE,EAAgCC,GAEnDF,EAAAG,KAAAC,MAFmBA,KAAAH,UAAAA,EAAgCG,KAAAF,WAAAA,EAkCrD,MAxC2CL,GAAAE,EAAAC,GAWhCD,EAAAM,UAAAC,YAAV,WAEC,MAAuB,OAAhBF,KAAKH,WAGbF,EAAAM,UAAAE,SAAA,SAASC,GAER,GAAMC,GAAIL,KACNM,EAAID,EAAER,SACV,IAAGS,EACH,CACC,GAAIC,GAAIC,UAAUC,OAASH,EAAEI,KAAKN,GAASE,EAAEI,MAE7C,IADAL,EAAEM,SAAWJ,EAAEH,OACZG,EAAEK,KACA,OAAO,CADDP,GAAEQ,UAGd,OAAO,GAGRlB,EAAAM,UAAAY,QAAA,WAECjB,EAAAK,UAAMY,QAAOd,KAAAC,MACbA,KAAKH,UAAYH,GAGRC,EAAAM,UAAAa,aAAV,WAEC,MAAOd,MAAKF,YAAcF,EAAAK,UAAMa,aAAYf,KAAAC,OAE9CL,GAxC2CJ,EAAAwB,qBAA9B9B,GAAAU,mBAAkBA,EA0C/BqB,OAAAC,eAAAhC,EAAA,cAAAmB,OAAA,IDVInB,EAAAA,WCUWU","file":"System/Collections/Enumeration/IteratorEnumerator.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", \"./SimpleEnumerableBase\", \"../../../extends\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    var SimpleEnumerableBase_1 = require(\"./SimpleEnumerableBase\");\n    var extends_1 = require(\"../../../extends\");\n    var __extends = extends_1.default;\n    var VOID0 = void 0;\n    var IteratorEnumerator = (function (_super) {\n        __extends(IteratorEnumerator, _super);\n        function IteratorEnumerator(_iterator, _isEndless) {\n            _super.call(this);\n            this._iterator = _iterator;\n            this._isEndless = _isEndless;\n        }\n        IteratorEnumerator.prototype.canMoveNext = function () {\n            return this._iterator != null;\n        };\n        IteratorEnumerator.prototype.moveNext = function (value) {\n            var _ = this;\n            var i = _._iterator;\n            if (i) {\n                var r = arguments.length ? i.next(value) : i.next();\n                _._current = r.value;\n                if (r.done)\n                    _.dispose();\n                else\n                    return true;\n            }\n            return false;\n        };\n        IteratorEnumerator.prototype.dispose = function () {\n            _super.prototype.dispose.call(this);\n            this._iterator = VOID0;\n        };\n        IteratorEnumerator.prototype.getIsEndless = function () {\n            return this._isEndless && _super.prototype.getIsEndless.call(this);\n        };\n        return IteratorEnumerator;\n    }(SimpleEnumerableBase_1.SimpleEnumerableBase));\n    exports.IteratorEnumerator = IteratorEnumerator;\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = IteratorEnumerator;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n\r\nimport {IIterator} from \"./IIterator\";\r\nimport {SimpleEnumerableBase} from \"./SimpleEnumerableBase\";\r\nimport __extendsImport from \"../../../extends\";\r\nconst __extends = __extendsImport;\r\n\r\nconst VOID0:any = void 0;\r\n\r\n/**\r\n * A simplified stripped down enumerator that until disposed will infinitely return the provided factory.\r\n * This is analogous to a 'generator' and has a compatible interface.\r\n *\r\n *\r\n */\r\nexport class IteratorEnumerator<T> extends SimpleEnumerableBase<T>\r\n{\r\n\t/**\r\n\t * @param _iterator\r\n\t * @param _isEndless true and false are explicit where as undefined means 'unknown'.\r\n\t */\r\n\tconstructor(private _iterator:IIterator<T>, private _isEndless?:boolean)\r\n\t{\r\n\t\tsuper();\r\n\t}\r\n\r\n\tprotected canMoveNext():boolean\r\n\t{\r\n\t\treturn this._iterator!=null;\r\n\t}\r\n\r\n\tmoveNext(value?:any):boolean\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tvar i = _._iterator;\r\n\t\tif(i)\r\n\t\t{\r\n\t\t\tvar r = arguments.length ? i.next(value) : i.next();\r\n\t\t\t_._current = r.value;\r\n\t\t\tif(r.done) _.dispose();\r\n\t\t\telse return true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tdispose():void\r\n\t{\r\n\t\tsuper.dispose();\r\n\t\tthis._iterator = VOID0;\r\n\t}\r\n\r\n\tprotected getIsEndless():boolean\r\n\t{\r\n\t\treturn this._isEndless && super.getIsEndless();\r\n\t}\r\n}\r\n\r\nexport default IteratorEnumerator;"]}