{"version":3,"sources":["System/Collections/Enumeration/IndexEnumerator.js","System/Collections/Enumeration/IndexEnumerator.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","EnumeratorBase_1","extends_1","__extends","IndexEnumerator","_super","sourceFactory","source","call","this","len","length","Error","isFinite","step","pointer","Math","floor","yielder","isNaN","yieldBreak","current","yieldReturn","_isEndless","EnumeratorBase","Object","defineProperty","value"],"mappings":";;;;CAIA,SAAWA,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QAAoBG,UAANF,IAAiBF,OAAOC,QAAUC,OAElD,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,UAAW,mBAAoB,oBAAqBN,IAE5E,SAAUI,EAASF,GAClB,YCPJ,IAAAM,GAAAJ,EAA6B,oBAC7BK,EAAAL,EAA4B,oBACtBM,EAAYD,EAAAA,WAElBE,EAAA,SAAAC,GAGC,QAAAD,GACCE,GAGA,GAAIC,EACJF,GAAAG,KAAAC,KACC,WAGC,GADAF,EAASD,IACNC,GAAUA,EAAOA,OACpB,CACC,GAAIG,GAAMH,EAAOI,MACjB,IAAO,EAAJD,EACF,KAAM,IAAIE,OAAM,iCAEjB,KAAIC,SAASH,GACZ,KAAM,IAAIE,OAAM,4BAEjB,IAAGF,GAAqB,IAAdH,EAAOO,KAChB,KAAM,IAAIF,OAAM,0CACjB,IAAIG,GAAUR,EAAOQ,OACrB,IAAIA,GAEC,GAAGA,GAASC,KAAKC,MAAMF,GAC3B,KAAM,IAAIH,OAAM,0CAA4CG,EAAU,sBAFtEA,GAAU,CAGXR,GAAOQ,QAAUA,CAEjB,IAAID,GAAOP,EAAOO,IAClB,IAAIA,GAEC,GAAGA,GAAME,KAAKC,MAAMH,GACxB,KAAM,IAAIF,OAAM,uCAAyCE,EAAO,sBAFhEA,GAAO,CAGRP,GAAOO,KAAOA,IAIhB,SAACI,GAEA,GAAIR,GAAOH,GAAUA,EAAOA,OAAUA,EAAOI,OAAS,CACtD,KAAID,GAAOS,MAAMT,GAChB,MAAOQ,GAAQE,YAChB,IAAIC,GAAUd,EAAOQ,OAErB,OADAR,GAAOQ,SAAWR,EAAOO,KACTJ,EAARW,GAAeA,GAAS,EAC7BH,EAAQI,YAAYf,EAAOA,OAAOc,IAClCH,EAAQE,cAGZ,WAEIb,IAEFA,EAAOA,OAAS,QAInBE,KAAKc,YAAa,EAEpB,MA7DwCpB,GAAAC,EAAAC,GA6DxCD,GA7DwCH,EAAAuB,eAA3B7B,GAAAS,gBAAeA,EA+D5BqB,OAAAC,eAAA/B,EAAA,cAAAgC,OAAA,IDTIhC,EAAAA,WCSWS","file":"System/Collections/Enumeration/IndexEnumerator.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", \"./EnumeratorBase\", \"../../../extends\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    var EnumeratorBase_1 = require(\"./EnumeratorBase\");\n    var extends_1 = require(\"../../../extends\");\n    var __extends = extends_1.default;\n    var IndexEnumerator = (function (_super) {\n        __extends(IndexEnumerator, _super);\n        function IndexEnumerator(sourceFactory) {\n            var source;\n            _super.call(this, function () {\n                source = sourceFactory();\n                if (source && source.source) {\n                    var len = source.length;\n                    if (len < 0)\n                        throw new Error(\"length must be zero or greater\");\n                    if (!isFinite(len))\n                        throw new Error(\"length must finite number\");\n                    if (len && source.step === 0)\n                        throw new Error(\"Invalid IndexEnumerator step value (0).\");\n                    var pointer = source.pointer;\n                    if (!pointer)\n                        pointer = 0;\n                    else if (pointer != Math.floor(pointer))\n                        throw new Error(\"Invalid IndexEnumerator pointer value (\" + pointer + \") has decimal.\");\n                    source.pointer = pointer;\n                    var step = source.step;\n                    if (!step)\n                        step = 1;\n                    else if (step != Math.floor(step))\n                        throw new Error(\"Invalid IndexEnumerator step value (\" + step + \") has decimal.\");\n                    source.step = step;\n                }\n            }, function (yielder) {\n                var len = (source && source.source) ? source.length : 0;\n                if (!len || isNaN(len))\n                    return yielder.yieldBreak();\n                var current = source.pointer;\n                source.pointer += source.step;\n                return (current < len && current >= 0)\n                    ? yielder.yieldReturn(source.source[current])\n                    : yielder.yieldBreak();\n            }, function () {\n                if (source) {\n                    source.source = null;\n                }\n            });\n            this._isEndless = false;\n        }\n        return IndexEnumerator;\n    }(EnumeratorBase_1.EnumeratorBase));\n    exports.IndexEnumerator = IndexEnumerator;\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = IndexEnumerator;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {EnumeratorBase} from \"./EnumeratorBase\";\r\nimport __extendsImport from \"../../../extends\";\r\nconst __extends = __extendsImport;\r\n\r\nexport class IndexEnumerator<T> extends EnumeratorBase<T>\r\n{\r\n\r\n\tconstructor(\r\n\t\tsourceFactory:() => { source: { [index: number]: T }; pointer?: number; length: number; step?: number })\r\n\t{\r\n\r\n\t\tvar source:{ source: { [index: number]: T }; pointer?: number; length: number; step?: number };\r\n\t\tsuper(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tsource = sourceFactory();\r\n\t\t\t\tif(source && source.source)\r\n\t\t\t\t{\r\n\t\t\t\t\tvar len = source.length;\r\n\t\t\t\t\tif(len<0) // Null is allowed but will exit immediately.\r\n\t\t\t\t\t\tthrow new Error(\"length must be zero or greater\");\r\n\r\n\t\t\t\t\tif(!isFinite(len))\r\n\t\t\t\t\t\tthrow new Error(\"length must finite number\");\r\n\r\n\t\t\t\t\tif(len && source.step===0)\r\n\t\t\t\t\t\tthrow new Error(\"Invalid IndexEnumerator step value (0).\");\r\n\t\t\t\t\tvar pointer = source.pointer;\r\n\t\t\t\t\tif(!pointer)\r\n\t\t\t\t\t\tpointer = 0;\r\n\t\t\t\t\telse if(pointer!=Math.floor(pointer))\r\n\t\t\t\t\t\tthrow new Error(\"Invalid IndexEnumerator pointer value (\" + pointer + \") has decimal.\");\r\n\t\t\t\t\tsource.pointer = pointer;\r\n\r\n\t\t\t\t\tvar step = source.step;\r\n\t\t\t\t\tif(!step)\r\n\t\t\t\t\t\tstep = 1;\r\n\t\t\t\t\telse if(step!=Math.floor(step))\r\n\t\t\t\t\t\tthrow new Error(\"Invalid IndexEnumerator step value (\" + step + \") has decimal.\");\r\n\t\t\t\t\tsource.step = step;\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t(yielder)=>\r\n\t\t\t{\r\n\t\t\t\tvar len = (source && source.source) ? source.length : 0;\r\n\t\t\t\tif(!len || isNaN(len))\r\n\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\tvar current = source.pointer;\r\n\t\t\t\tsource.pointer += source.step;\r\n\t\t\t\treturn (current<len && current>=0)\r\n\t\t\t\t\t? yielder.yieldReturn(source.source[current])\r\n\t\t\t\t\t: yielder.yieldBreak();\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tif(source)\r\n\t\t\t\t{\r\n\t\t\t\t\tsource.source = null;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\t\tthis._isEndless = false;\r\n\t}\r\n}\r\n\r\nexport default IndexEnumerator;"]}