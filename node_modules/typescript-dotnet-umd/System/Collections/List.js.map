{"version":3,"sources":["System/Collections/List.js","System/Collections/List.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","Compare_1","Utility_1","Enumerator_1","Types_1","ArrayEnumerator_1","CollectionBase_1","extends_1","__extends","List","_super","source","equalityComparer","areEqual","call","this","_","Array","isArray","_source","slice","_importEntries","prototype","getCount","length","_addInternal","entry","push","_removeInternal","max","Infinity","remove","_equalityComparer","_clearInternal","len","entries","Type","isArrayLike","s","first","i","get","index","set","value","_onModified","indexOf","item","insert","splice","removeAt","removeIndex","contains","copyTo","target","getEnumerator","ArrayEnumerator","forEach","action","useCopy","CollectionBase","Object","defineProperty"],"mappings":"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","file":"System/Collections/List.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", \"../Compare\", \"./Array/Utility\", \"./Enumeration/Enumerator\", \"../Types\", \"./Enumeration/ArrayEnumerator\", \"./CollectionBase\", \"../../extends\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    var Compare_1 = require(\"../Compare\");\n    var Utility_1 = require(\"./Array/Utility\");\n    var Enumerator_1 = require(\"./Enumeration/Enumerator\");\n    var Types_1 = require(\"../Types\");\n    var ArrayEnumerator_1 = require(\"./Enumeration/ArrayEnumerator\");\n    var CollectionBase_1 = require(\"./CollectionBase\");\n    var extends_1 = require(\"../../extends\");\n    var __extends = extends_1.default;\n    var List = (function (_super) {\n        __extends(List, _super);\n        function List(source, equalityComparer) {\n            if (equalityComparer === void 0) { equalityComparer = Compare_1.areEqual; }\n            _super.call(this, null, equalityComparer);\n            var _ = this;\n            if (Array.isArray(source)) {\n                _._source = source.slice();\n            }\n            else {\n                _._source = [];\n                _._importEntries(source);\n            }\n        }\n        List.prototype.getCount = function () {\n            return this._source.length;\n        };\n        List.prototype._addInternal = function (entry) {\n            this._source.push(entry);\n            return true;\n        };\n        List.prototype._removeInternal = function (entry, max) {\n            if (max === void 0) { max = Infinity; }\n            return Utility_1.remove(this._source, entry, max, this._equalityComparer);\n        };\n        List.prototype._clearInternal = function () {\n            var len = this._source.length;\n            this._source.length = 0;\n            return len;\n        };\n        List.prototype._importEntries = function (entries) {\n            if (Types_1.Type.isArrayLike(entries)) {\n                var len = entries.length;\n                if (!len)\n                    return 0;\n                var s = this._source;\n                var first = s.length;\n                s.length += len;\n                for (var i = 0; i < len; i++) {\n                    s[i + first] = entries[i];\n                }\n                return len;\n            }\n            else {\n                return _super.prototype._importEntries.call(this, entries);\n            }\n        };\n        List.prototype.get = function (index) {\n            return this._source[index];\n        };\n        List.prototype.set = function (index, value) {\n            var s = this._source;\n            if (index < s.length && Compare_1.areEqual(value, s[index]))\n                return false;\n            s[index] = value;\n            this._onModified();\n            return true;\n        };\n        List.prototype.indexOf = function (item) {\n            return Utility_1.indexOf(this._source, item, this._equalityComparer);\n        };\n        List.prototype.insert = function (index, value) {\n            var s = this._source;\n            if (index < s.length) {\n                this._source.splice(index, 0, value);\n            }\n            else {\n                this._source[index] = value;\n            }\n            this._onModified();\n        };\n        List.prototype.removeAt = function (index) {\n            if (Utility_1.removeIndex(this._source, index)) {\n                this._onModified();\n                return true;\n            }\n            return false;\n        };\n        List.prototype.contains = function (item) {\n            return Utility_1.contains(this._source, item, this._equalityComparer);\n        };\n        List.prototype.copyTo = function (target, index) {\n            return Utility_1.copyTo(this._source, target, 0, index);\n        };\n        List.prototype.getEnumerator = function () {\n            return new ArrayEnumerator_1.ArrayEnumerator(this._source);\n        };\n        List.prototype.forEach = function (action, useCopy) {\n            var s = this._source;\n            return Enumerator_1.forEach(useCopy ? s.slice() : s, action);\n        };\n        return List;\n    }(CollectionBase_1.CollectionBase));\n    exports.List = List;\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = List;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n\r\nimport {areEqual} from \"../Compare\";\r\nimport {remove, indexOf, contains, copyTo, removeIndex} from \"./Array/Utility\";\r\nimport {forEach} from \"./Enumeration/Enumerator\";\r\nimport {Type} from \"../Types\";\r\nimport {ArrayEnumerator} from \"./Enumeration/ArrayEnumerator\";\r\nimport {CollectionBase} from \"./CollectionBase\";\r\nimport {Predicate, Action, EqualityComparison} from \"../FunctionTypes\";\r\nimport {IEnumerator} from \"./Enumeration/IEnumerator\";\r\nimport {IList} from \"./IList\";\r\nimport {IEnumerateEach} from \"./Enumeration/IEnumerateEach\";\r\nimport {IEnumerableOrArray} from \"./IEnumerableOrArray\";\r\nimport {IArray} from \"./Array/IArray\";\r\nimport __extendsImport from \"../../extends\";\r\nconst __extends = __extendsImport;\r\n\r\nexport class List<T>\r\nextends CollectionBase<T> implements IList<T>, IEnumerateEach<T>\r\n{\r\n\r\n\tprotected _source:T[];\r\n\r\n\tconstructor(\r\n\t\tsource?:IEnumerableOrArray<T>,\r\n\t\tequalityComparer:EqualityComparison<T> = areEqual)\r\n\t{\r\n\t\tsuper(null, equalityComparer);\r\n\t\tconst _ = this;\r\n\t\tif(Array.isArray(source))\r\n\t\t{\r\n\t\t\t_._source = source.slice();\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t_._source = [];\r\n\t\t\t_._importEntries(source);\r\n\t\t}\r\n\t}\r\n\r\n\tprotected getCount():number\r\n\t{\r\n\t\treturn this._source.length;\r\n\t}\r\n\r\n\tprotected _addInternal(entry:T):boolean\r\n\t{\r\n\t\tthis._source.push(entry);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tprotected _removeInternal(entry:T, max:number = Infinity):number\r\n\t{\r\n\t\treturn remove(\r\n\t\t\tthis._source, entry, max,\r\n\t\t\tthis._equalityComparer);\r\n\t}\r\n\r\n\tprotected _clearInternal():number\r\n\t{\r\n\t\tvar len = this._source.length;\r\n\t\tthis._source.length = 0;\r\n\t\treturn len;\r\n\t}\r\n\r\n\tprotected _importEntries(entries:IEnumerableOrArray<T>):number\r\n\t{\r\n\t\tif(Type.isArrayLike(entries))\r\n\t\t{\r\n\t\t\tvar len = entries.length;\r\n\t\t\tif(!len) return 0;\r\n\t\t\tvar s = this._source;\r\n\r\n\t\t\tvar first = s.length;\r\n\t\t\ts.length += len;\r\n\t\t\tfor(let i = 0; i<len; i++)\r\n\t\t\t{\r\n\t\t\t\ts[i + first] = entries[i];\r\n\t\t\t}\r\n\r\n\t\t\treturn len;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\treturn super._importEntries(entries);\r\n\t\t}\r\n\t}\r\n\r\n\tget(index:number):T\r\n\t{\r\n\t\treturn this._source[index];\r\n\t}\r\n\r\n\tset(index:number, value:T):boolean\r\n\t{\r\n\t\tvar s = this._source;\r\n\t\tif(index<s.length && areEqual(value, s[index]))\r\n\t\t\treturn false;\r\n\r\n\t\ts[index] = value;\r\n\t\tthis._onModified();\r\n\t\treturn true;\r\n\t}\r\n\r\n\tindexOf(item:T):number\r\n\t{\r\n\t\treturn indexOf(\r\n\t\t\tthis._source, item,\r\n\t\t\tthis._equalityComparer);\r\n\t}\r\n\r\n\tinsert(index:number, value:T):void\r\n\t{\r\n\t\tvar s = this._source;\r\n\t\tif(index<s.length)\r\n\t\t{\r\n\t\t\tthis._source.splice(index, 0, value);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis._source[index] = value;\r\n\t\t}\r\n\t\tthis._onModified();\r\n\t}\r\n\r\n\tremoveAt(index:number):boolean\r\n\t{\r\n\t\tif(removeIndex(this._source, index))\r\n\t\t{\r\n\t\t\tthis._onModified();\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tcontains(item:T):boolean\r\n\t{\r\n\t\treturn contains(\r\n\t\t\tthis._source, item,\r\n\t\t\tthis._equalityComparer);\r\n\t}\r\n\r\n\tcopyTo<TTarget extends IArray<any>>(target:TTarget, index?:number):TTarget\r\n\t{\r\n\t\treturn copyTo(this._source, target, 0, index);\r\n\t}\r\n\r\n\tgetEnumerator():IEnumerator<T>\r\n\t{\r\n\t\treturn new ArrayEnumerator(this._source);\r\n\t}\r\n\r\n\tforEach(action:Predicate<T>|Action<T>, useCopy?:boolean):number\r\n\t{\r\n\t\tvar s = this._source;\r\n\t\treturn forEach(useCopy ? s.slice() : s, action);\r\n\t}\r\n\r\n}\r\n\r\nexport default List;"]}