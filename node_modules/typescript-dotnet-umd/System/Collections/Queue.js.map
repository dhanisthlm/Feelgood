{"version":3,"sources":["System/Collections/Queue.js","System/Collections/Queue.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","assertZeroOrGreater","value","property","ArgumentOutOfRangeException_1","ArgumentOutOfRangeException","assertIntegerZeroOrGreater","Integer_1","Integer","assert","Compare_1","AU","Types_1","EnumeratorBase_1","NotImplementedException_1","InvalidOperationException_1","CollectionBase_1","extends_1","__extends","MINIMUM_GROW","SHRINK_THRESHOLD","GROW_FACTOR_HALF","DEFAULT_CAPACITY","emptyArray","Queue","_super","source","equalityComparer","areEqual","call","this","_","_head","_tail","_size","Type","isNumber","capacity","_array","initialize","se","isArrayLike","length","_importEntries","_capacity","prototype","getCount","_addInternal","item","array","size","len","newCapacity","setCapacity","tail","_removeInternal","max","NotImplementedException","_clearInternal","head","clear","trimExcess","_onDispose","dump","Infinity","result","isFinite","push","_dequeueInternal","_signalModification","forEach","action","_version","newArray","copyTo","enqueue","add","throwIfEmpty","removed","_incrementModified","InvalidOperationException","dequeue","assertModifiable","modified","tryDequeue","out","d","_getElement","index","peek","threshold","Math","floor","isNaN","getEnumerator","version","EnumeratorBase","yielder","assertVersion","yieldBreak","yieldReturn","CollectionBase","Object","defineProperty"],"mappings":"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","file":"System/Collections/Queue.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Based Upon: http://referencesource.microsoft.com/#System/CompMod/system/collections/generic/queue.cs\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", \"../Compare\", \"./Array/Utility\", \"../Types\", \"../Integer\", \"./Enumeration/EnumeratorBase\", \"../Exceptions/NotImplementedException\", \"../Exceptions/InvalidOperationException\", \"../Exceptions/ArgumentOutOfRangeException\", \"./CollectionBase\", \"../../extends\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    var Compare_1 = require(\"../Compare\");\n    var AU = require(\"./Array/Utility\");\n    var Types_1 = require(\"../Types\");\n    var Integer_1 = require(\"../Integer\");\n    var EnumeratorBase_1 = require(\"./Enumeration/EnumeratorBase\");\n    var NotImplementedException_1 = require(\"../Exceptions/NotImplementedException\");\n    var InvalidOperationException_1 = require(\"../Exceptions/InvalidOperationException\");\n    var ArgumentOutOfRangeException_1 = require(\"../Exceptions/ArgumentOutOfRangeException\");\n    var CollectionBase_1 = require(\"./CollectionBase\");\n    var extends_1 = require(\"../../extends\");\n    var __extends = extends_1.default;\n    var MINIMUM_GROW = 4;\n    var SHRINK_THRESHOLD = 32;\n    var GROW_FACTOR_HALF = 100;\n    var DEFAULT_CAPACITY = MINIMUM_GROW;\n    var emptyArray = [];\n    var Queue = (function (_super) {\n        __extends(Queue, _super);\n        function Queue(source, equalityComparer) {\n            if (equalityComparer === void 0) { equalityComparer = Compare_1.areEqual; }\n            _super.call(this, null, equalityComparer);\n            var _ = this;\n            _._head = 0;\n            _._tail = 0;\n            _._size = 0;\n            if (!source)\n                _._array = emptyArray;\n            else {\n                if (Types_1.Type.isNumber(source)) {\n                    var capacity = source;\n                    assertIntegerZeroOrGreater(capacity, \"capacity\");\n                    _._array = capacity\n                        ? AU.initialize(capacity)\n                        : emptyArray;\n                }\n                else {\n                    var se = source;\n                    _._array = AU.initialize(Types_1.Type.isArrayLike(se)\n                        ? se.length\n                        : DEFAULT_CAPACITY);\n                    _._importEntries(se);\n                }\n            }\n            _._capacity = _._array.length;\n        }\n        Queue.prototype.getCount = function () {\n            return this._size;\n        };\n        Queue.prototype._addInternal = function (item) {\n            var _ = this, array = _._array, size = _._size, len = _._capacity;\n            if (size == len) {\n                var newCapacity = len * GROW_FACTOR_HALF;\n                if (newCapacity < len + MINIMUM_GROW)\n                    newCapacity = len + MINIMUM_GROW;\n                _.setCapacity(newCapacity);\n                array = _._array;\n                len = _._capacity;\n            }\n            var tail = _._tail;\n            array[tail] = item;\n            _._tail = (tail + 1) % len;\n            _._size = size + 1;\n            return true;\n        };\n        Queue.prototype._removeInternal = function (item, max) {\n            throw new NotImplementedException_1.NotImplementedException(\"ICollection\\<T\\>.remove is not implemented in Queue\\<T\\>\" +\n                \" since it would require destroying the underlying array to remove the item.\");\n        };\n        Queue.prototype._clearInternal = function () {\n            var _ = this, array = _._array, head = _._head, tail = _._tail, size = _._size;\n            if (head < tail)\n                AU.clear(array, head, tail);\n            else {\n                AU.clear(array, head);\n                AU.clear(array, 0, tail);\n            }\n            _._head = 0;\n            _._tail = 0;\n            _._size = 0;\n            _.trimExcess();\n            return size;\n        };\n        Queue.prototype._onDispose = function () {\n            _super.prototype._onDispose.call(this);\n            var _ = this;\n            if (_._array != emptyArray) {\n                _._array.length = _._capacity = 0;\n                _._array = emptyArray;\n            }\n        };\n        Queue.prototype.dump = function (max) {\n            if (max === void 0) { max = Infinity; }\n            var _ = this, result = [];\n            if (isFinite(max)) {\n                Integer_1.Integer.assertZeroOrGreater(max);\n                if (max !== 0) {\n                    while (max-- && _._size) {\n                        result.push(_._dequeueInternal());\n                    }\n                }\n            }\n            else {\n                while (_._size) {\n                    result.push(_._dequeueInternal());\n                }\n            }\n            _.trimExcess();\n            _._signalModification();\n            return result;\n        };\n        Queue.prototype.forEach = function (action) {\n            return _super.prototype.forEach.call(this, action, true);\n        };\n        Queue.prototype.setCapacity = function (capacity) {\n            assertIntegerZeroOrGreater(capacity, \"capacity\");\n            var _ = this, array = _._array, len = _._capacity;\n            if (capacity == len)\n                return;\n            var head = _._head, tail = _._tail, size = _._size;\n            if (array != emptyArray && capacity > len && head < tail) {\n                array.length = _._capacity = capacity;\n                _._version++;\n                return;\n            }\n            var newArray = AU.initialize(capacity);\n            if (size > 0) {\n                if (head < tail) {\n                    AU.copyTo(array, newArray, head, 0, size);\n                }\n                else {\n                    AU.copyTo(array, newArray, head, 0, len - head);\n                    AU.copyTo(array, newArray, 0, len - head, tail);\n                }\n            }\n            _._array = newArray;\n            _._capacity = capacity;\n            _._head = 0;\n            _._tail = (size == capacity) ? 0 : size;\n            _._signalModification(true);\n        };\n        Queue.prototype.enqueue = function (item) {\n            this.add(item);\n        };\n        Queue.prototype._dequeueInternal = function (throwIfEmpty) {\n            if (throwIfEmpty === void 0) { throwIfEmpty = false; }\n            var _ = this;\n            if (_._size == 0) {\n                if (throwIfEmpty)\n                    throw new InvalidOperationException_1.InvalidOperationException(\"Cannot dequeue an empty queue.\");\n                return void 0;\n            }\n            var array = _._array, head = _._head;\n            var removed = _._array[head];\n            array[head] = null;\n            _._head = (head + 1) % _._capacity;\n            _._size--;\n            _._incrementModified();\n            return removed;\n        };\n        Queue.prototype.dequeue = function (throwIfEmpty) {\n            if (throwIfEmpty === void 0) { throwIfEmpty = false; }\n            var _ = this;\n            _.assertModifiable();\n            var modified = !!_._size;\n            var v = this._dequeueInternal(throwIfEmpty);\n            if (modified && _._size < _._capacity / 2)\n                _.trimExcess(SHRINK_THRESHOLD);\n            _._signalModification();\n            return v;\n        };\n        Queue.prototype.tryDequeue = function (out) {\n            if (!this._size)\n                return false;\n            var d = this.dequeue();\n            if (out)\n                out(d);\n            return true;\n        };\n        Queue.prototype._getElement = function (index) {\n            assertIntegerZeroOrGreater(index, \"index\");\n            var _ = this;\n            return _._array[(_._head + index) % _._capacity];\n        };\n        Queue.prototype.peek = function () {\n            if (this._size == 0)\n                throw new InvalidOperationException_1.InvalidOperationException(\"Cannot call peek on an empty queue.\");\n            return this._array[this._head];\n        };\n        Queue.prototype.trimExcess = function (threshold) {\n            var _ = this;\n            var size = _._size;\n            if (size < Math.floor(_._capacity * 0.9) && (isNaN(threshold) || threshold < size))\n                _.setCapacity(size);\n        };\n        Queue.prototype.getEnumerator = function () {\n            var _ = this;\n            var index;\n            var version;\n            return new EnumeratorBase_1.EnumeratorBase(function () {\n                version = _._version;\n                index = 0;\n            }, function (yielder) {\n                _.assertVersion(version);\n                if (index == _._size)\n                    return yielder.yieldBreak();\n                return yielder.yieldReturn(_._getElement(index++));\n            });\n        };\n        return Queue;\n    }(CollectionBase_1.CollectionBase));\n    exports.Queue = Queue;\n    function assertZeroOrGreater(value, property) {\n        if (value < 0)\n            throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException(property, value, \"Must be greater than zero\");\n    }\n    function assertIntegerZeroOrGreater(value, property) {\n        Integer_1.Integer.assert(value, property);\n        assertZeroOrGreater(value, property);\n    }\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = Queue;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Based Upon: http://referencesource.microsoft.com/#System/CompMod/system/collections/generic/queue.cs\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {areEqual} from \"../Compare\";\r\nimport * as AU from \"./Array/Utility\";\r\nimport {Type} from \"../Types\";\r\nimport {Integer} from \"../Integer\";\r\nimport {EnumeratorBase} from \"./Enumeration/EnumeratorBase\";\r\nimport {NotImplementedException} from \"../Exceptions/NotImplementedException\";\r\nimport {InvalidOperationException} from \"../Exceptions/InvalidOperationException\";\r\nimport {ArgumentOutOfRangeException} from \"../Exceptions/ArgumentOutOfRangeException\";\r\nimport {CollectionBase} from \"./CollectionBase\";\r\nimport {EqualityComparison, Predicate, Action} from \"../FunctionTypes\";\r\nimport {IEnumerator} from \"./Enumeration/IEnumerator\";\r\nimport {IEnumerableOrArray} from \"./IEnumerableOrArray\";\r\nimport __extendsImport from \"../../extends\";\r\nconst __extends = __extendsImport;\r\n\r\nconst MINIMUM_GROW:number = 4;\r\nconst SHRINK_THRESHOLD:number = 32; // Unused?\r\n// var GROW_FACTOR: number = 200;  // double each time\r\nconst GROW_FACTOR_HALF:number = 100;\r\nconst DEFAULT_CAPACITY:number = MINIMUM_GROW;\r\nvar emptyArray:any[] = [];\r\n\r\nexport class Queue<T>\r\nextends CollectionBase<T>\r\n{\r\n\r\n\tprivate _array:T[];\r\n\tprivate _head:number;       // First valid element in the queue\r\n\tprivate _tail:number;       // Last valid element in the queue\r\n\tprivate _size:number;       // Number of elements.\r\n\tprivate _capacity:number;   // Maps to _array.length;\r\n\r\n\tconstructor(\r\n\t\tsource?:IEnumerableOrArray<T> | number,\r\n\t\tequalityComparer:EqualityComparison<T> = areEqual)\r\n\t{\r\n\t\tsuper(null, equalityComparer);\r\n\t\tconst _ = this;\r\n\t\t_._head = 0;\r\n\t\t_._tail = 0;\r\n\t\t_._size = 0;\r\n\r\n\t\tif(!source)\r\n\t\t\t_._array = emptyArray;\r\n\t\telse\r\n\t\t{\r\n\t\t\tif(Type.isNumber(source))\r\n\t\t\t{\r\n\t\t\t\tvar capacity = <number>source;\r\n\t\t\t\tassertIntegerZeroOrGreater(capacity, \"capacity\");\r\n\r\n\t\t\t\t_._array = capacity\r\n\t\t\t\t\t? AU.initialize<T>(capacity)\r\n\t\t\t\t\t: emptyArray;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tvar se = <IEnumerableOrArray<T>> source;\r\n\t\t\t\t_._array = AU.initialize<T>(\r\n\t\t\t\t\tType.isArrayLike(se)\r\n\t\t\t\t\t\t? se.length\r\n\t\t\t\t\t\t: DEFAULT_CAPACITY\r\n\t\t\t\t);\r\n\r\n\t\t\t\t_._importEntries(se);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t_._capacity = _._array.length;\r\n\t}\r\n\r\n\tprotected getCount():number\r\n\t{\r\n\t\treturn this._size;\r\n\t}\r\n\r\n\tprotected _addInternal(item:T):boolean\r\n\t{\r\n\t\tvar _ = this, array = _._array, size = _._size, len = _._capacity;\r\n\t\tif(size==len)\r\n\t\t{\r\n\t\t\tvar newCapacity = len*GROW_FACTOR_HALF;\r\n\t\t\tif(newCapacity<len + MINIMUM_GROW)\r\n\t\t\t\tnewCapacity = len + MINIMUM_GROW;\r\n\r\n\t\t\t_.setCapacity(newCapacity);\r\n\t\t\tarray = _._array;\r\n\t\t\tlen = _._capacity;\r\n\t\t}\r\n\r\n\t\tvar tail = _._tail;\r\n\t\tarray[tail] = item;\r\n\t\t_._tail = (tail + 1)%len;\r\n\t\t_._size = size + 1;\r\n\t\treturn true;\r\n\t}\r\n\r\n\tprotected _removeInternal(item:T, max?:number):number\r\n\t{\r\n\t\tthrow new NotImplementedException(\r\n\t\t\t\"ICollection\\<T\\>.remove is not implemented in Queue\\<T\\>\" +\r\n\t\t\t\" since it would require destroying the underlying array to remove the item.\"\r\n\t\t);\r\n\t}\r\n\r\n\tprotected _clearInternal():number\r\n\t{\r\n\t\tvar _ = this, array = _._array, head = _._head, tail = _._tail, size = _._size;\r\n\t\tif(head<tail)\r\n\t\t\tAU.clear(array, head, tail);\r\n\t\telse\r\n\t\t{\r\n\t\t\tAU.clear(array, head);\r\n\t\t\tAU.clear(array, 0, tail);\r\n\t\t}\r\n\r\n\t\t_._head = 0;\r\n\t\t_._tail = 0;\r\n\t\t_._size = 0;\r\n\r\n\t\t_.trimExcess();\r\n\r\n\t\treturn size;\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tconst _ = this;\r\n\t\tif(_._array!=emptyArray)\r\n\t\t{\r\n\t\t\t_._array.length = _._capacity = 0;\r\n\t\t\t_._array = emptyArray;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Dequeues entries into an array.\r\n\t */\r\n\tdump(max:number = Infinity):T[]\r\n\t{\r\n\t\tvar _ = this, result:T[] = [];\r\n\r\n\t\tif(isFinite(max))\r\n\t\t{\r\n\t\t\tInteger.assertZeroOrGreater(max);\r\n\t\t\tif(max!==0)\r\n\t\t\t{\r\n\t\t\t\twhile(max-- && _._size)\r\n\t\t\t\t{\r\n\t\t\t\t\tresult.push(_._dequeueInternal());\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\twhile(_._size)\r\n\t\t\t{\r\n\t\t\t\tresult.push(_._dequeueInternal());\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t_.trimExcess();\r\n\t\t_._signalModification();\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tforEach(action:Predicate<T> | Action<T>):number\r\n\t{\r\n\t\treturn super.forEach(action, true);\r\n\t}\r\n\r\n\tsetCapacity(capacity:number):void\r\n\t{\r\n\r\n\t\tassertIntegerZeroOrGreater(capacity, \"capacity\");\r\n\r\n\t\tvar _ = this, array = _._array, len = _._capacity;\r\n\r\n\t\tif(capacity==len)\r\n\t\t\treturn;\r\n\r\n\t\tvar head = _._head, tail = _._tail, size = _._size;\r\n\r\n\t\t// Special case where we can simply extend the length of the array. (JavaScript only)\r\n\t\tif(array!=emptyArray && capacity>len && head<tail)\r\n\t\t{\r\n\t\t\tarray.length = _._capacity = capacity;\r\n\t\t\t_._version++;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// We create a new array because modifying an existing one could be slow.\r\n\t\tvar newArray:T[] = AU.initialize<T>(capacity);\r\n\t\tif(size>0)\r\n\t\t{\r\n\t\t\tif(head<tail)\r\n\t\t\t{\r\n\t\t\t\tAU.copyTo(array, newArray, head, 0, size);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tAU.copyTo(array, newArray, head, 0, len - head);\r\n\t\t\t\tAU.copyTo(array, newArray, 0, len - head, tail);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t_._array = newArray;\r\n\t\t_._capacity = capacity;\r\n\t\t_._head = 0;\r\n\t\t_._tail = (size==capacity) ? 0 : size;\r\n\r\n\t\t_._signalModification(true);\r\n\t}\r\n\r\n\tenqueue(item:T):void\r\n\t{\r\n\t\tthis.add(item);\r\n\t}\r\n\r\n\r\n\tprotected _dequeueInternal(throwIfEmpty:boolean = false):T\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tif(_._size==0)\r\n\t\t{\r\n\t\t\tif(throwIfEmpty)\r\n\t\t\t\tthrow new InvalidOperationException(\"Cannot dequeue an empty queue.\");\r\n\t\t\treturn void 0;\r\n\t\t}\r\n\r\n\t\tvar array = _._array, head = _._head;\r\n\r\n\t\tvar removed = _._array[head];\r\n\t\tarray[head] = null;\r\n\t\t_._head = (head + 1)%_._capacity;\r\n\r\n\t\t_._size--;\r\n\r\n\t\t_._incrementModified();\r\n\r\n\t\treturn removed;\r\n\t}\r\n\r\n\tdequeue(throwIfEmpty:boolean = false):T\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.assertModifiable();\r\n\r\n\t\t// A single dequeue shouldn't need update recursion tracking...\r\n\t\tvar modified = !!_._size;\r\n\t\tvar v = this._dequeueInternal(throwIfEmpty);\r\n\r\n\t\t// This may preemptively trigger the _onModified.\r\n\t\tif(modified && _._size<_._capacity/2)\r\n\t\t\t_.trimExcess(SHRINK_THRESHOLD);\r\n\r\n\t\t_._signalModification();\r\n\t\treturn v;\r\n\t}\r\n\r\n\r\n\ttryDequeue(out:(value:T)=>void):boolean\r\n\t{\r\n\t\tif(!this._size) return false;\r\n\t\tvar d = this.dequeue();\r\n\t\tif(out) out(d);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tprivate _getElement(index:number):T\r\n\t{\r\n\t\tassertIntegerZeroOrGreater(index, \"index\");\r\n\r\n\t\tconst _ = this;\r\n\t\treturn _._array[(_._head + index)%_._capacity];\r\n\t}\r\n\r\n\tpeek():T\r\n\t{\r\n\t\tif(this._size==0)\r\n\t\t\tthrow new InvalidOperationException(\"Cannot call peek on an empty queue.\");\r\n\r\n\t\treturn this._array[this._head];\r\n\t}\r\n\r\n\ttrimExcess(threshold?:number):void\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tvar size = _._size;\r\n\t\tif(size<Math.floor(_._capacity*0.9) && (isNaN(threshold) || threshold<size))\r\n\t\t\t_.setCapacity(size);\r\n\t}\r\n\r\n\tgetEnumerator():IEnumerator<T>\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tvar index:number;\r\n\t\tvar version:number;\r\n\t\treturn new EnumeratorBase<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tversion = _._version;\r\n\t\t\t\tindex = 0;\r\n\t\t\t},\r\n\t\t\t(yielder)=>\r\n\t\t\t{\r\n\t\t\t\t_.assertVersion(version);\r\n\r\n\t\t\t\tif(index==_._size)\r\n\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\treturn yielder.yieldReturn(_._getElement(index++));\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n}\r\n\r\nfunction assertZeroOrGreater(value:number, property:string):void\r\n{\r\n\tif(value<0)\r\n\t\tthrow new ArgumentOutOfRangeException(property, value, \"Must be greater than zero\");\r\n\r\n}\r\n\r\nfunction assertIntegerZeroOrGreater(value:number, property:string):void\r\n{\r\n\tInteger.assert(value, property);\r\n\tassertZeroOrGreater(value, property);\r\n}\r\n\r\nexport default Queue;\r\n"]}