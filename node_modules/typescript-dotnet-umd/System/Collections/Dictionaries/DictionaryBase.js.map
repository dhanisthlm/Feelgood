{"version":3,"sources":["System/Collections/Dictionaries/DictionaryBase.js","System/Collections/Dictionaries/DictionaryBase.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","Compare_1","Enumerator_1","CollectionBase_1","EnumeratorBase_1","ArgumentNullException_1","InvalidOperationException_1","KeyValueExtract_1","extends_1","__extends","VOID0","DictionaryBase","_super","source","call","this","prototype","_onValueModified","key","value","old","_addInternal","item","_this","ArgumentNullException","extractKeyValue","addByKeyValue","_clearInternal","_","count","_i","_a","keys","length","removeByKey","contains","getCount","getValue","areEqual","_removeInternal","Object","defineProperty","get","getKeys","enumerable","configurable","getValues","InvalidOperationException","containsKey","ex","data","setValue","assertModifiable","changed","_setValueInternal","_signalModification","_getEntry","containsValue","e","getEnumerator","equal","moveNext","current","dispose","removeByValue","importEntries","pairs","_importEntries","forEach","pair","ver","len","i","EnumeratorBase","_version","yielder","assertVersion","yieldReturn","yieldBreak","CollectionBase"],"mappings":"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","file":"System/Collections/Dictionaries/DictionaryBase.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n(function (factory) {\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define([\"require\", \"exports\", \"../../Compare\", \"../Enumeration/Enumerator\", \"../CollectionBase\", \"../Enumeration/EnumeratorBase\", \"../../Exceptions/ArgumentNullException\", \"../../Exceptions/InvalidOperationException\", \"../../KeyValueExtract\", \"../../../extends\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    var Compare_1 = require(\"../../Compare\");\n    var Enumerator_1 = require(\"../Enumeration/Enumerator\");\n    var CollectionBase_1 = require(\"../CollectionBase\");\n    var EnumeratorBase_1 = require(\"../Enumeration/EnumeratorBase\");\n    var ArgumentNullException_1 = require(\"../../Exceptions/ArgumentNullException\");\n    var InvalidOperationException_1 = require(\"../../Exceptions/InvalidOperationException\");\n    var KeyValueExtract_1 = require(\"../../KeyValueExtract\");\n    var extends_1 = require(\"../../../extends\");\n    var __extends = extends_1.default;\n    var VOID0 = void (0);\n    var DictionaryBase = (function (_super) {\n        __extends(DictionaryBase, _super);\n        function DictionaryBase(source) {\n            _super.call(this, source);\n        }\n        DictionaryBase.prototype._onValueModified = function (key, value, old) {\n        };\n        DictionaryBase.prototype._addInternal = function (item) {\n            var _this = this;\n            if (!item)\n                throw new ArgumentNullException_1.ArgumentNullException('item', 'Dictionaries must use a valid key/value pair. \\'' + item + '\\' is not allowed.');\n            return KeyValueExtract_1.extractKeyValue(item, function (key, value) { return _this.addByKeyValue(key, value); });\n        };\n        DictionaryBase.prototype._clearInternal = function () {\n            var _ = this, count = 0;\n            for (var _i = 0, _a = _.keys; _i < _a.length; _i++) {\n                var key = _a[_i];\n                if (_.removeByKey(key))\n                    count++;\n            }\n            return count;\n        };\n        DictionaryBase.prototype.contains = function (item) {\n            var _this = this;\n            if (!item || !this.getCount())\n                return false;\n            return KeyValueExtract_1.extractKeyValue(item, function (key, value) {\n                var v = _this.getValue(key);\n                return Compare_1.areEqual(value, v);\n            });\n        };\n        DictionaryBase.prototype._removeInternal = function (item) {\n            var _this = this;\n            if (!item)\n                return 0;\n            return KeyValueExtract_1.extractKeyValue(item, function (key, value) {\n                var v = _this.getValue(key);\n                return (Compare_1.areEqual(value, v) && _this.removeByKey(key))\n                    ? 1 : 0;\n            });\n        };\n        Object.defineProperty(DictionaryBase.prototype, \"keys\", {\n            get: function () { return this.getKeys(); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DictionaryBase.prototype, \"values\", {\n            get: function () { return this.getValues(); },\n            enumerable: true,\n            configurable: true\n        });\n        DictionaryBase.prototype.addByKeyValue = function (key, value) {\n            if (value === VOID0)\n                throw new InvalidOperationException_1.InvalidOperationException(\"Cannot add 'undefined' as a value.\");\n            var _ = this;\n            if (_.containsKey(key)) {\n                var ex = new InvalidOperationException_1.InvalidOperationException(\"Adding a key/value when the key already exists.\");\n                ex.data['key'] = key;\n                ex.data['value'] = value;\n                throw ex;\n            }\n            return _.setValue(key, value);\n        };\n        DictionaryBase.prototype.setValue = function (key, value) {\n            var _ = this;\n            _.assertModifiable();\n            var changed = false, old = _.getValue(key);\n            if (!Compare_1.areEqual(value, old) && _._setValueInternal(key, value)) {\n                changed = true;\n                _._onValueModified(key, value, old);\n            }\n            _._signalModification(changed);\n            return changed;\n        };\n        DictionaryBase.prototype.containsKey = function (key) {\n            return !!this._getEntry(key);\n        };\n        DictionaryBase.prototype.containsValue = function (value) {\n            var e = this.getEnumerator(), equal = Compare_1.areEqual;\n            while (e.moveNext()) {\n                if (equal(e.current, value, true)) {\n                    e.dispose();\n                    return true;\n                }\n            }\n            return false;\n        };\n        DictionaryBase.prototype.removeByKey = function (key) {\n            return this.setValue(key, VOID0);\n        };\n        DictionaryBase.prototype.removeByValue = function (value) {\n            var _ = this, count = 0, equal = Compare_1.areEqual;\n            for (var _i = 0, _a = _.getKeys(); _i < _a.length; _i++) {\n                var key = _a[_i];\n                if (equal(_.getValue(key), value, true)) {\n                    _.removeByKey(key);\n                    count++;\n                }\n            }\n            return count;\n        };\n        DictionaryBase.prototype.importEntries = function (pairs) {\n            return _super.prototype.importEntries.call(this, pairs);\n        };\n        DictionaryBase.prototype._importEntries = function (pairs) {\n            var _ = this;\n            if (!pairs)\n                return 0;\n            var changed = 0;\n            Enumerator_1.forEach(pairs, function (pair) { return KeyValueExtract_1.extractKeyValue(pair, function (key, value) {\n                if (_._setValueInternal(key, value))\n                    changed++;\n            }); });\n            return changed;\n        };\n        DictionaryBase.prototype.getEnumerator = function () {\n            var _ = this;\n            var ver, keys, len, i = 0;\n            return new EnumeratorBase_1.EnumeratorBase(function () {\n                ver = _._version;\n                keys = _.getKeys();\n                len = keys.length;\n            }, function (yielder) {\n                _.assertVersion(ver);\n                while (i < len) {\n                    var key = keys[i++], value = _.getValue(key);\n                    if (value !== VOID0)\n                        return yielder.yieldReturn({ key: key, value: value });\n                }\n                return yielder.yieldBreak();\n            });\n        };\n        return DictionaryBase;\n    }(CollectionBase_1.CollectionBase));\n    exports.DictionaryBase = DictionaryBase;\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.default = DictionaryBase;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n\r\nimport {areEqual} from \"../../Compare\";\r\nimport {forEach} from \"../Enumeration/Enumerator\";\r\nimport {CollectionBase} from \"../CollectionBase\";\r\nimport {EnumeratorBase} from \"../Enumeration/EnumeratorBase\";\r\nimport {ArgumentNullException} from \"../../Exceptions/ArgumentNullException\";\r\nimport {InvalidOperationException} from \"../../Exceptions/InvalidOperationException\";\r\nimport {extractKeyValue} from \"../../KeyValueExtract\";\r\nimport {IKeyValuePair, KeyValuePair} from \"../../KeyValuePair\";\r\nimport {IDictionary} from \"./IDictionary\";\r\nimport {IEnumerator} from \"../Enumeration/IEnumerator\";\r\nimport {IEnumerableOrArray} from \"../IEnumerableOrArray\";\r\nimport __extendsImport from \"../../../extends\";\r\nconst __extends = __extendsImport;\r\n\r\nconst VOID0:any = void(0);\r\n\r\n// Design Note: Should DictionaryAbstractBase be IDisposable?\r\nexport abstract class DictionaryBase<TKey, TValue>\r\nextends CollectionBase<IKeyValuePair<TKey,TValue>> implements IDictionary<TKey, TValue>\r\n{\r\n\tconstructor(source?:IEnumerableOrArray<IKeyValuePair<TKey,TValue>>)\r\n\t{\r\n\t\tsuper(source);\r\n\t}\r\n\r\n\r\n\tprotected _onValueModified(key:TKey, value:TValue, old:TValue):void\r\n\t{\r\n\t}\r\n\r\n\tprotected _addInternal(item:KeyValuePair<TKey, TValue>):boolean\r\n\t{\r\n\t\tif(!item)\r\n\t\t\tthrow new ArgumentNullException(\r\n\t\t\t\t'item', 'Dictionaries must use a valid key/value pair. \\'' + item + '\\' is not allowed.'\r\n\t\t\t);\r\n\r\n\t\treturn extractKeyValue(item,\r\n\t\t\t(key, value)=>this.addByKeyValue(key, value));\r\n\t}\r\n\r\n\tprotected _clearInternal():number\r\n\t{\r\n\t\tvar _ = this, count = 0;\r\n\r\n\t\tfor(let key of _.keys)\r\n\t\t{\r\n\t\t\tif(_.removeByKey(key)) count++;\r\n\t\t}\r\n\r\n\t\treturn count;\r\n\t}\r\n\r\n\tcontains(item:KeyValuePair<TKey, TValue>):boolean\r\n\t{\r\n\t\t// Should never have a null object in the collection.\r\n\t\tif(!item || !this.getCount()) return false;\r\n\r\n\t\treturn extractKeyValue(item,\r\n\t\t\t(key, value)=>\r\n\t\t\t{\r\n\t\t\t\t// Leave as variable for debugging...\r\n\t\t\t\tlet v = this.getValue(key);\r\n\t\t\t\treturn areEqual(value, v);\r\n\t\t\t});\r\n\r\n\t}\r\n\r\n\tprotected _removeInternal(item:IKeyValuePair<TKey, TValue>|[TKey,TValue]):number\r\n\t{\r\n\t\tif(!item) return 0;\r\n\r\n\t\treturn extractKeyValue(item,\r\n\t\t\t(key, value)=>\r\n\t\t\t{\r\n\t\t\t\t// Leave as variable for debugging...\r\n\t\t\t\tlet v = this.getValue(key);\r\n\t\t\t\treturn (areEqual(value, v) && this.removeByKey(key))\r\n\t\t\t\t\t? 1 : 0;\r\n\t\t\t});\r\n\t}\r\n\r\n\t/////////////////////////////////////////\r\n\t// IDictionary<TKey,TValue>\r\n\t/////////////////////////////////////////\r\n\r\n\tprotected abstract getKeys():TKey[];\r\n\r\n\tget keys():TKey[] { return this.getKeys(); }\r\n\r\n\tprotected abstract getValues():TValue[];\r\n\r\n\tget values():TValue[] { return this.getValues(); }\r\n\r\n\r\n\taddByKeyValue(key:TKey, value:TValue):boolean\r\n\t{\r\n\t\tif(value===VOID0)\r\n\t\t\tthrow new InvalidOperationException(\"Cannot add 'undefined' as a value.\");\r\n\r\n\t\tconst _ = this;\r\n\t\tif(_.containsKey(key))\r\n\t\t{\r\n\t\t\tvar ex = new InvalidOperationException(\"Adding a key/value when the key already exists.\");\r\n\t\t\tex.data['key'] = key;\r\n\t\t\tex.data['value'] = value;\r\n\t\t\tthrow ex;\r\n\t\t}\r\n\r\n\t\treturn _.setValue(key, value);\r\n\t}\r\n\r\n\tprotected abstract _getEntry(key:TKey):IKeyValuePair<TKey,TValue>;\r\n\r\n\tabstract getValue(key:TKey):TValue;\r\n\r\n\tprotected abstract _setValueInternal(key:TKey, value:TValue):boolean;\r\n\r\n\tsetValue(key:TKey, value:TValue):boolean\r\n\t{\r\n\t\t// setValue shouldn't need to worry about recursion...\r\n\t\tconst _ = this;\r\n\t\t_.assertModifiable();\r\n\r\n\t\tvar changed = false, old = _.getValue(key); // get the old value here and pass to internal.\r\n\t\tif(!areEqual(value, old) && _._setValueInternal(key, value))\r\n\t\t{\r\n\t\t\tchanged = true;\r\n\t\t\t_._onValueModified(key, value, old)\r\n\t\t}\r\n\r\n\t\t_._signalModification(changed);\r\n\t\treturn changed;\r\n\t}\r\n\r\n\tcontainsKey(key:TKey):boolean\r\n\t{\r\n\t\treturn !!this._getEntry(key);\r\n\t}\r\n\r\n\tcontainsValue(value:TValue):boolean\r\n\t{\r\n\t\tvar e = this.getEnumerator(), equal:(a:any, b:any, strict?:boolean) => boolean = areEqual;\r\n\r\n\t\twhile(e.moveNext())\r\n\t\t{\r\n\t\t\tif(equal(e.current, value, true))\r\n\t\t\t{\r\n\t\t\t\te.dispose();\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tremoveByKey(key:TKey):boolean\r\n\t{\r\n\t\treturn this.setValue(key, VOID0);\r\n\t}\r\n\r\n\tremoveByValue(value:TValue):number\r\n\t{\r\n\t\tvar _ = this, count = 0, equal:(a:any, b:any, strict?:boolean) => boolean = areEqual;\r\n\t\tfor(let key of _.getKeys())\r\n\t\t{\r\n\t\t\tif(equal(_.getValue(key), value, true))\r\n\t\t\t{\r\n\t\t\t\t_.removeByKey(key);\r\n\t\t\t\tcount++;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn count;\r\n\t}\r\n\r\n\timportEntries(pairs:IEnumerableOrArray<KeyValuePair<TKey, TValue>>):number\r\n\t{\r\n\t\t// Allow piping through to trigger onModified properly.\r\n\t\treturn super.importEntries(<any>pairs);\r\n\t}\r\n\r\n\tprotected _importEntries(pairs:IEnumerableOrArray<KeyValuePair<TKey, TValue>>):number\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tif(!pairs) return 0;\r\n\t\tlet changed:number = 0;\r\n\t\tforEach(pairs,\r\n\t\t\tpair=>extractKeyValue(pair, (key, value)=>\r\n\t\t\t{\r\n\t\t\t\tif(_._setValueInternal(key, value))\r\n\t\t\t\t\tchanged++;\r\n\t\t\t})\r\n\t\t);\r\n\t\treturn changed;\r\n\t}\r\n\r\n\tgetEnumerator():IEnumerator<IKeyValuePair<TKey, TValue>>\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tvar ver:number, keys:TKey[], len:number, i = 0;\r\n\t\treturn new EnumeratorBase<IKeyValuePair<TKey, TValue>>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tver = _._version; // Track the version since getKeys is a copy.\r\n\t\t\t\tkeys = _.getKeys();\r\n\t\t\t\tlen = keys.length;\r\n\t\t\t},\r\n\r\n\t\t\t(yielder)=>\r\n\t\t\t{\r\n\t\t\t\t_.assertVersion(ver);\r\n\r\n\t\t\t\twhile(i<len)\r\n\t\t\t\t{\r\n\t\t\t\t\tvar key = keys[i++], value = _.getValue(key);\r\n\t\t\t\t\tif(value!==VOID0) // Still valid?\r\n\t\t\t\t\t\treturn yielder.yieldReturn({key: key, value: value});\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n}\r\n\r\n\r\nexport default DictionaryBase;"]}